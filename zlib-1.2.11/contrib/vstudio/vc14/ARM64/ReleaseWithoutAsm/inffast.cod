; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TTL	c:\users\ws103\desktop\zlib-1.2.11\inffast.c
	ARM64

	AREA	|.drectve|, DRECTVE

	EXPORT	|inflate_fast|

	AREA	|.pdata|, PDATA
|$pdata$inflate_fast| DCD imagerel |$LN97|
	DCD	0x309047d
	;Flags[SingleProEpi] functionLength[1148] RegF[0] RegI[9] H[0] frameChainReturn[UnChained] frameSize[96]
; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inffast.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflate_fast| PROC

; 53   : {

  00000		 |$LN97|
  00000	a9bb53f3	 stp         x19,x20,[sp,#-0x50]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	a90263f7	 stp         x23,x24,[sp,#0x20]
  0000c	a9036bf9	 stp         x25,x26,[sp,#0x30]
  00010	f90023fb	 str         x27,[sp,#0x40]
  00014	d10043ff	 sub         sp,sp,#0x10

; 54   :     struct inflate_state FAR *state;
; 55   :     z_const unsigned char FAR *in;      /* local strm->next_in */
; 56   :     z_const unsigned char FAR *last;    /* have enough input while in < last */
; 57   :     unsigned char FAR *out;     /* local strm->next_out */
; 58   :     unsigned char FAR *beg;     /* inflate()'s initial strm->next_out */
; 59   :     unsigned char FAR *end;     /* while out < end, enough space available */
; 60   : #ifdef INFLATE_STRICT
; 61   :     unsigned dmax;              /* maximum distance from zlib header */
; 62   : #endif
; 63   :     unsigned wsize;             /* window size or zero if not using window */
; 64   :     unsigned whave;             /* valid bytes in the window */
; 65   :     unsigned wnext;             /* window write index */
; 66   :     unsigned char FAR *window;  /* allocated sliding window, if wsize != 0 */
; 67   :     unsigned long hold;         /* local strm->hold */
; 68   :     unsigned bits;              /* local strm->bits */
; 69   :     code const FAR *lcode;      /* local strm->lencode */
; 70   :     code const FAR *dcode;      /* local strm->distcode */
; 71   :     unsigned lmask;             /* mask for first level of length codes */
; 72   :     unsigned dmask;             /* mask for first level of distance codes */
; 73   :     code here;                  /* retrieved table entry */
; 74   :     unsigned op;                /* code bits, operation, extra bits, or */
; 75   :                                 /*  window position, window bytes to copy */
; 76   :     unsigned len;               /* match length, unused bytes */
; 77   :     unsigned dist;              /* match distance */
; 78   :     unsigned char FAR *from;    /* where to copy match from */
; 79   : 
; 80   :     /* copy state to local variables */
; 81   :     state = (struct inflate_state FAR *)strm->state;
; 82   :     in = strm->next_in;
; 83   :     last = in + (strm->avail_in - 5);

  00018	b9400808	 ldr         w8,[x0,#8]

; 84   :     out = strm->next_out;
; 85   :     beg = out - (start - strm->avail_out);
; 86   :     end = out + (strm->avail_out - 257);
; 87   : #ifdef INFLATE_STRICT
; 88   :     dmax = state->dmax;
; 89   : #endif
; 90   :     wsize = state->wsize;
; 91   :     whave = state->whave;
; 92   :     wnext = state->wnext;
; 93   :     window = state->window;
; 94   :     hold = state->hold;
; 95   :     bits = state->bits;
; 96   :     lcode = state->lencode;
; 97   :     dcode = state->distcode;
; 98   :     lmask = (1U << state->lenbits) - 1;
; 99   :     dmask = (1U << state->distbits) - 1;

  0001c	5280002a	 mov         w10,#1
  00020	f9400005	 ldr         x5,[x0]
  00024	5295557b	 mov         w27,#0xAAAB
  00028	72b5555b	 movk        w27,#0xAAAA,lsl #0x10
  0002c	f9401402	 ldr         x2,[x0,#0x28]
  00030	f940080d	 ldr         x13,[x0,#0x10]
  00034	51001509	 sub         w9,w8,#5
  00038	8b2940b5	 add         x21,x5,w9,uxtw #0
  0003c	b9401809	 ldr         w9,[x0,#0x18]
  00040	2946dc53	 ldp         w19,w23,[x2,#0x34]
  00044	b9403c44	 ldr         w4,[x2,#0x3C]
  00048	f9402043	 ldr         x3,[x2,#0x40]
  0004c	4b090028	 sub         w8,w1,w9
  00050	29493c46	 ldp         w6,w15,[x2,#0x48]
  00054	cb2841ba	 sub         x26,x13,w8,uxtw #0
  00058	51040529	 sub         w9,w9,#0x101
  0005c	b9407048	 ldr         w8,[x2,#0x70]
  00060	8b2941b6	 add         x22,x13,w9,uxtw #0
  00064	52800029	 mov         w9,#1
  00068	a9465041	 ldp         x1,x20,[x2,#0x60]
  0006c	1ac82129	 lsl         w9,w9,w8
  00070	b9407448	 ldr         w8,[x2,#0x74]
  00074	51000538	 sub         w24,w9,#1
  00078	1ac82149	 lsl         w9,w10,w8
  0007c	51000539	 sub         w25,w9,#1
  00080		 |$LL4@inflate_fa|

; 100  : 
; 101  :     /* decode literals and length/distances until end-of-block or not enough
; 102  :        input data or output space */
; 103  :     do {
; 104  :         if (bits < 15) {

  00080	71003dff	 cmp         w15,#0xF
  00084	54000002	 bhs         |$LN22@inflate_fa|

; 105  :             hold += (unsigned long)(*in++) << bits;

  00088	394000a8	 ldrb        w8,[x5]

; 106  :             bits += 8;

  0008c	110021eb	 add         w11,w15,#8
  00090	1acf2108	 lsl         w8,w8,w15
  00094	0b060109	 add         w9,w8,w6

; 107  :             hold += (unsigned long)(*in++) << bits;

  00098	394004a8	 ldrb        w8,[x5,#1]
  0009c	910008a5	 add         x5,x5,#2

; 108  :             bits += 8;

  000a0	1100216f	 add         w15,w11,#8
  000a4	1acb2108	 lsl         w8,w8,w11
  000a8	0b090106	 add         w6,w8,w9
  000ac		 |$LN22@inflate_fa|

; 109  :         }
; 110  :         here = lcode[hold & lmask];

  000ac	d3407cc8	 uxtw        x8,w6
  000b0	8a080309	 and         x9,x24,x8
  000b4	b869782a	 ldr         w10,[x1,x9 lsl #2]

; 111  :       dolen:
; 112  :         op = (unsigned)(here.bits);

  000b8	53083d48	 ubfx        w8,w10,#8,#8
  000bc	b90003ea	 str         w10,[sp]
  000c0	53107d4e	 lsr         w14,w10,#0x10

; 113  :         hold >>= op;

  000c4	1ac824c6	 lsr         w6,w6,w8

; 114  :         bits -= op;

  000c8	4b0801ef	 sub         w15,w15,w8

; 115  :         op = (unsigned)(here.op);

  000cc	53003dc8	 uxth        w8,w14
  000d0	53001d49	 uxtb        w9,w10

; 116  :         if (op == 0) {                          /* literal */

  000d4	34000009	 cbz         w9,|$LN68@inflate_fa|
  000d8	5280002c	 mov         w12,#1
  000dc		 |$dolen$98|

; 117  :             Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
; 118  :                     "inflate:         literal '%c'\n" :
; 119  :                     "inflate:         literal 0x%02x\n", here.val));
; 120  :             *out++ = (unsigned char)(here.val);
; 121  :         }
; 122  :         else if (op & 16) {                     /* length base */

  000dc	37200009	 tbnz        x9,#4,|$LN69@inflate_fa|

; 274  :             }
; 275  :         }
; 276  :         else if ((op & 64) == 0) {              /* 2nd level length code */

  000e0	37300009	 tbnz        x9,#6,|$LN52@inflate_fa|

; 277  :             here = lcode[here.val + (hold & ((1U << op) - 1))];

  000e4	1ac92188	 lsl         w8,w12,w9
  000e8	794007ea	 ldrh        w10,[sp,#2]
  000ec	51000509	 sub         w9,w8,#1
  000f0	0a06012b	 and         w11,w9,w6
  000f4	0b0a0168	 add         w8,w11,w10
  000f8	b8685829	 ldr         w9,[x1,w8 uxtw #2]
  000fc	53083d28	 ubfx        w8,w9,#8,#8
  00100	b90003e9	 str         w9,[sp]
  00104	53107d2e	 lsr         w14,w9,#0x10
  00108	1ac824c6	 lsr         w6,w6,w8
  0010c	4b0801ef	 sub         w15,w15,w8
  00110	53003dc8	 uxth        w8,w14
  00114	53001d29	 uxtb        w9,w9
  00118	35000009	 cbnz        w9,|$dolen$98|

; 116  :         if (op == 0) {                          /* literal */

  0011c	140000ac	 b           |$LN68@inflate_fa|
  00120		 |$LN69@inflate_fa|

; 123  :             len = (unsigned)(here.val);
; 124  :             op &= 15;                           /* number of extra bits */

  00120	72000d2b	 ands        w11,w9,#0xF

; 125  :             if (op) {

  00124	54000000	 beq         |$LN27@inflate_fa|

; 126  :                 if (bits < op) {

  00128	6b0b01ff	 cmp         w15,w11
  0012c	54000002	 bhs         |$LN28@inflate_fa|

; 127  :                     hold += (unsigned long)(*in++) << bits;

  00130	394000a8	 ldrb        w8,[x5]
  00134	910004a5	 add         x5,x5,#1
  00138	1acf2108	 lsl         w8,w8,w15
  0013c	0b060106	 add         w6,w8,w6

; 128  :                     bits += 8;

  00140	110021ef	 add         w15,w15,#8
  00144		 |$LN28@inflate_fa|

; 129  :                 }
; 130  :                 len += (unsigned)hold & ((1U << op) - 1);

  00144	52800028	 mov         w8,#1
  00148	1acb2108	 lsl         w8,w8,w11
  0014c	51000509	 sub         w9,w8,#1
  00150	0a06012a	 and         w10,w9,w6
  00154	0b0e014e	 add         w14,w10,w14

; 131  :                 hold >>= op;

  00158	1acb24c6	 lsr         w6,w6,w11

; 132  :                 bits -= op;

  0015c	4b0b01ef	 sub         w15,w15,w11
  00160		 |$LN27@inflate_fa|

; 133  :             }
; 134  :             Tracevv((stderr, "inflate:         length %u\n", len));
; 135  :             if (bits < 15) {

  00160	71003dff	 cmp         w15,#0xF
  00164	54000002	 bhs         |$LN29@inflate_fa|

; 136  :                 hold += (unsigned long)(*in++) << bits;

  00168	394000a8	 ldrb        w8,[x5]

; 137  :                 bits += 8;

  0016c	110021eb	 add         w11,w15,#8
  00170	1acf2108	 lsl         w8,w8,w15
  00174	0b060109	 add         w9,w8,w6

; 138  :                 hold += (unsigned long)(*in++) << bits;

  00178	394004a8	 ldrb        w8,[x5,#1]
  0017c	910008a5	 add         x5,x5,#2

; 139  :                 bits += 8;

  00180	1100216f	 add         w15,w11,#8
  00184	1acb2108	 lsl         w8,w8,w11
  00188	0b090106	 add         w6,w8,w9
  0018c		 |$LN29@inflate_fa|

; 140  :             }
; 141  :             here = dcode[hold & dmask];

  0018c	d3407cc8	 uxtw        x8,w6
  00190	8a080329	 and         x9,x25,x8
  00194	b8697a8a	 ldr         w10,[x20,x9 lsl #2]

; 142  :           dodist:
; 143  :             op = (unsigned)(here.bits);

  00198	53083d48	 ubfx        w8,w10,#8,#8
  0019c	b90003ea	 str         w10,[sp]

; 144  :             hold >>= op;

  001a0	1ac824c6	 lsr         w6,w6,w8

; 145  :             bits -= op;

  001a4	4b0801ef	 sub         w15,w15,w8

; 146  :             op = (unsigned)(here.op);

  001a8	53001d4b	 uxtb        w11,w10

; 147  :             if (op & 16) {                      /* distance base */

  001ac	53107d47	 lsr         w7,w10,#0x10
  001b0	3720000b	 tbnz        x11,#4,|$LN70@inflate_fa|
  001b4	5280002c	 mov         w12,#1
  001b8		 |$dodist$99|

; 263  :                     }
; 264  :                 }
; 265  :             }
; 266  :             else if ((op & 64) == 0) {          /* 2nd level distance code */

  001b8	3730000b	 tbnz        x11,#6,|$LN50@inflate_fa|

; 267  :                 here = dcode[here.val + (hold & ((1U << op) - 1))];

  001bc	1acb2188	 lsl         w8,w12,w11
  001c0	794007ea	 ldrh        w10,[sp,#2]
  001c4	51000509	 sub         w9,w8,#1
  001c8	0a06012b	 and         w11,w9,w6
  001cc	0b0a0168	 add         w8,w11,w10
  001d0	b8685a89	 ldr         w9,[x20,w8 uxtw #2]
  001d4	53083d28	 ubfx        w8,w9,#8,#8
  001d8	b90003e9	 str         w9,[sp]
  001dc	1ac824c6	 lsr         w6,w6,w8
  001e0	4b0801ef	 sub         w15,w15,w8
  001e4	53001d2b	 uxtb        w11,w9
  001e8	53107d27	 lsr         w7,w9,#0x10
  001ec	3620000b	 tbz         x11,#4,|$dodist$99|
  001f0		 |$LN70@inflate_fa|

; 148  :                 dist = (unsigned)(here.val);
; 149  :                 op &= 15;                       /* number of extra bits */

  001f0	12000d6c	 and         w12,w11,#0xF

; 150  :                 if (bits < op) {

  001f4	6b0c01ff	 cmp         w15,w12
  001f8	54000002	 bhs         |$LN33@inflate_fa|

; 151  :                     hold += (unsigned long)(*in++) << bits;

  001fc	394000a8	 ldrb        w8,[x5]
  00200	910004a5	 add         x5,x5,#1
  00204	1acf2108	 lsl         w8,w8,w15

; 152  :                     bits += 8;

  00208	110021ef	 add         w15,w15,#8

; 153  :                     if (bits < op) {

  0020c	6b0c01ff	 cmp         w15,w12
  00210	0b060106	 add         w6,w8,w6
  00214	54000002	 bhs         |$LN33@inflate_fa|

; 154  :                         hold += (unsigned long)(*in++) << bits;

  00218	394000a8	 ldrb        w8,[x5]
  0021c	910004a5	 add         x5,x5,#1
  00220	1acf2108	 lsl         w8,w8,w15
  00224	0b060106	 add         w6,w8,w6

; 155  :                         bits += 8;

  00228	110021ef	 add         w15,w15,#8
  0022c		 |$LN33@inflate_fa|

; 156  :                     }
; 157  :                 }
; 158  :                 dist += (unsigned)hold & ((1U << op) - 1);

  0022c	52800028	 mov         w8,#1
  00230	1acc2108	 lsl         w8,w8,w12
  00234	51000509	 sub         w9,w8,#1
  00238	0a06012a	 and         w10,w9,w6
  0023c	0b07014b	 add         w11,w10,w7

; 159  : #ifdef INFLATE_STRICT
; 160  :                 if (dist > dmax) {
; 161  :                     strm->msg = (char *)"invalid distance too far back";
; 162  :                     state->mode = BAD;
; 163  :                     break;
; 164  :                 }
; 165  : #endif
; 166  :                 hold >>= op;
; 167  :                 bits -= op;
; 168  :                 Tracevv((stderr, "inflate:         distance %u\n", dist));
; 169  :                 op = (unsigned)(out - beg);     /* max distance in output */

  00240	4b1a01aa	 sub         w10,w13,w26

; 170  :                 if (dist > op) {                /* see if copy from window */

  00244	6b0a017f	 cmp         w11,w10
  00248	1acc24c6	 lsr         w6,w6,w12
  0024c	4b0c01ef	 sub         w15,w15,w12
  00250	54000009	 bls         |$LN34@inflate_fa|

; 171  :                     op = dist - op;             /* distance back in window */

  00254	4b0a0169	 sub         w9,w11,w10

; 172  :                     if (op > whave) {

  00258	6b17013f	 cmp         w9,w23
  0025c	54000009	 bls         |$LN37@inflate_fa|

; 173  :                         if (state->sane) {

  00260	b95be048	 ldr         w8,[x2,#0x1BE0]
  00264	35000008	 cbnz        w8,|$LN71@inflate_fa|
  00268		 |$LN37@inflate_fa|

; 175  :                                 (char *)"invalid distance too far back";
; 176  :                             state->mode = BAD;
; 177  :                             break;
; 178  :                         }
; 179  : #ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
; 180  :                         if (len <= op - whave) {
; 181  :                             do {
; 182  :                                 *out++ = 0;
; 183  :                             } while (--len);
; 184  :                             continue;
; 185  :                         }
; 186  :                         len -= op - whave;
; 187  :                         do {
; 188  :                             *out++ = 0;
; 189  :                         } while (--op > whave);
; 190  :                         if (op == 0) {
; 191  :                             from = out - dist;
; 192  :                             do {
; 193  :                                 *out++ = *from++;
; 194  :                             } while (--len);
; 195  :                             continue;
; 196  :                         }
; 197  : #endif
; 198  :                     }
; 199  :                     from = window;
; 200  :                     if (wnext == 0) {           /* very common case */

  00268	35000004	 cbnz        w4,|$LN38@inflate_fa|

; 201  :                         from += wsize - op;

  0026c	4b090268	 sub         w8,w19,w9
  00270	8b28406c	 add         x12,x3,w8,uxtw #0

; 202  :                         if (op < len) {         /* some from window */

  00274	6b0e013f	 cmp         w9,w14
  00278	54000002	 bhs         |$LN65@inflate_fa|

; 203  :                             len -= op;

  0027c	4b0901ce	 sub         w14,w14,w9
  00280		 |$LL7@inflate_fa|

; 204  :                             do {
; 205  :                                 *out++ = *from++;

  00280	38401588	 ldrb        w8,[x12],#1

; 206  :                             } while (--op);

  00284	51000529	 sub         w9,w9,#1
  00288	380015a8	 strb        w8,[x13],#1
  0028c	35000009	 cbnz        w9,|$LL7@inflate_fa|

; 207  :                             from = out - dist;  /* rest from output */
; 208  :                         }
; 209  :                     }

  00290	14000021	 b           |$LN94@inflate_fa|
  00294		 |$LN38@inflate_fa|

; 210  :                     else if (wnext < op) {      /* wrap around window */

  00294	4b090088	 sub         w8,w4,w9
  00298	6b09009f	 cmp         w4,w9
  0029c	54000002	 bhs         |$LN41@inflate_fa|

; 211  :                         from += wsize + wnext - op;

  002a0	0b130108	 add         w8,w8,w19

; 212  :                         op -= wnext;

  002a4	4b04012a	 sub         w10,w9,w4
  002a8	8b28406c	 add         x12,x3,w8,uxtw #0

; 213  :                         if (op < len) {         /* some from end of window */

  002ac	6b0e015f	 cmp         w10,w14
  002b0	54000002	 bhs         |$LN65@inflate_fa|

; 214  :                             len -= op;

  002b4	4b0a01ce	 sub         w14,w14,w10
  002b8	cb0d0189	 sub         x9,x12,x13
  002bc		 |$LL10@inflate_fa|

; 215  :                             do {
; 216  :                                 *out++ = *from++;

  002bc	386d6928	 ldrb        w8,[x9,x13]

; 217  :                             } while (--op);

  002c0	5100054a	 sub         w10,w10,#1
  002c4	380015a8	 strb        w8,[x13],#1
  002c8	3500000a	 cbnz        w10,|$LL10@inflate_fa|

; 218  :                             from = window;

  002cc	aa0303ec	 mov         x12,x3

; 219  :                             if (wnext < len) {  /* some from start of window */

  002d0	6b0e009f	 cmp         w4,w14
  002d4	54000002	 bhs         |$LN65@inflate_fa|

; 220  :                                 op = wnext;

  002d8	2a0403e9	 mov         w9,w4

; 221  :                                 len -= op;

  002dc	4b0401ce	 sub         w14,w14,w4
  002e0		 |$LL13@inflate_fa|

; 222  :                                 do {
; 223  :                                     *out++ = *from++;

  002e0	38401588	 ldrb        w8,[x12],#1

; 224  :                                 } while (--op);

  002e4	51000529	 sub         w9,w9,#1
  002e8	380015a8	 strb        w8,[x13],#1
  002ec	35000009	 cbnz        w9,|$LL13@inflate_fa|

; 225  :                                 from = out - dist;      /* rest from output */
; 226  :                             }
; 227  :                         }
; 228  :                     }

  002f0	14000009	 b           |$LN94@inflate_fa|
  002f4		 |$LN41@inflate_fa|

; 229  :                     else {                      /* contiguous in window */
; 230  :                         from += wnext - op;

  002f4	8b28406c	 add         x12,x3,w8,uxtw #0

; 231  :                         if (op < len) {         /* some from window */

  002f8	6b0e013f	 cmp         w9,w14
  002fc	54000002	 bhs         |$LN65@inflate_fa|

; 232  :                             len -= op;

  00300	4b0901ce	 sub         w14,w14,w9
  00304		 |$LL16@inflate_fa|

; 233  :                             do {
; 234  :                                 *out++ = *from++;

  00304	38401588	 ldrb        w8,[x12],#1

; 235  :                             } while (--op);

  00308	51000529	 sub         w9,w9,#1
  0030c	380015a8	 strb        w8,[x13],#1
  00310	35000009	 cbnz        w9,|$LL16@inflate_fa|
  00314		 |$LN94@inflate_fa|

; 236  :                             from = out - dist;  /* rest from output */
; 237  :                         }
; 238  :                     }
; 239  :                     while (len > 2) {

  00314	cb2b41ac	 sub         x12,x13,w11,uxtw #0
  00318		 |$LN65@inflate_fa|
  00318	710009df	 cmp         w14,#2
  0031c	54000009	 bls         |$LN18@inflate_fa|
  00320	51000dc8	 sub         w8,w14,#3
  00324	9bbb7d08	 umull       x8,w8,w27
  00328	d360fd09	 lsr         x9,x8,#0x20
  0032c	53017d2b	 lsr         w11,w9,#1
  00330	11000567	 add         w7,w11,#1
  00334		 |$LL17@inflate_fa|

; 240  :                         *out++ = *from++;

  00334	39400188	 ldrb        w8,[x12]

; 241  :                         *out++ = *from++;
; 242  :                         *out++ = *from++;
; 243  :                         len -= 3;

  00338	51000dce	 sub         w14,w14,#3
  0033c	510004e7	 sub         w7,w7,#1
  00340	390001a8	 strb        w8,[x13]
  00344	39400588	 ldrb        w8,[x12,#1]
  00348	390005a8	 strb        w8,[x13,#1]
  0034c	39400988	 ldrb        w8,[x12,#2]
  00350	91000d8c	 add         x12,x12,#3
  00354	390009a8	 strb        w8,[x13,#2]
  00358	91000dad	 add         x13,x13,#3
  0035c	35000007	 cbnz        w7,|$LL17@inflate_fa|
  00360		 |$LN18@inflate_fa|

; 244  :                     }
; 245  :                     if (len) {

  00360	3400000e	 cbz         w14,|$LN2@inflate_fa|

; 246  :                         *out++ = *from++;

  00364	39400188	 ldrb        w8,[x12]

; 247  :                         if (len > 1)

  00368	710005df	 cmp         w14,#1
  0036c	390001a8	 strb        w8,[x13]
  00370	910005ad	 add         x13,x13,#1
  00374	54000009	 bls         |$LN2@inflate_fa|

; 248  :                             *out++ = *from++;

  00378	39400588	 ldrb        w8,[x12,#1]

; 249  :                     }
; 250  :                 }

  0037c	14000014	 b           |$LN68@inflate_fa|
  00380		 |$LN34@inflate_fa|

; 251  :                 else {
; 252  :                     from = out - dist;          /* copy direct from output */

  00380	cb2b41aa	 sub         x10,x13,w11,uxtw #0
  00384		 |$LL21@inflate_fa|

; 253  :                     do {                        /* minimum length is three */
; 254  :                         *out++ = *from++;

  00384	39400148	 ldrb        w8,[x10]

; 255  :                         *out++ = *from++;
; 256  :                         *out++ = *from++;
; 257  :                         len -= 3;

  00388	51000dce	 sub         w14,w14,#3

; 258  :                     } while (len > 2);

  0038c	710009df	 cmp         w14,#2
  00390	390001a8	 strb        w8,[x13]
  00394	39400548	 ldrb        w8,[x10,#1]
  00398	390005a8	 strb        w8,[x13,#1]
  0039c	39400948	 ldrb        w8,[x10,#2]
  003a0	91000d4a	 add         x10,x10,#3
  003a4	390009a8	 strb        w8,[x13,#2]
  003a8	91000dad	 add         x13,x13,#3
  003ac	54000008	 bhi         |$LL21@inflate_fa|

; 259  :                     if (len) {

  003b0	3400000e	 cbz         w14,|$LN2@inflate_fa|

; 260  :                         *out++ = *from++;

  003b4	39400148	 ldrb        w8,[x10]

; 261  :                         if (len > 1)

  003b8	710005df	 cmp         w14,#1
  003bc	390001a8	 strb        w8,[x13]
  003c0	910005ad	 add         x13,x13,#1
  003c4	54000009	 bls         |$LN2@inflate_fa|

; 262  :                             *out++ = *from++;

  003c8	39400548	 ldrb        w8,[x10,#1]
  003cc		 |$LN68@inflate_fa|

; 288  :             break;
; 289  :         }
; 290  :     } while (in < last && out < end);

  003cc	390001a8	 strb        w8,[x13]
  003d0	910005ad	 add         x13,x13,#1
  003d4		 |$LN2@inflate_fa|
  003d4	eb1500bf	 cmp         x5,x21
  003d8	fa5631ae	 ccmplo      x13,x22,#0xE
  003dc	54000002	 bhs         |$LN3@inflate_fa|
  003e0	17ffff28	 b           |$LL4@inflate_fa|
  003e4		 |$LN52@inflate_fa|

; 278  :             goto dolen;
; 279  :         }
; 280  :         else if (op & 32) {                     /* end-of-block */

  003e4	36280009	 tbz         x9,#5,|$LN54@inflate_fa|

; 281  :             Tracevv((stderr, "inflate:         end of block\n"));
; 282  :             state->mode = TYPE;

  003e8	5287e7e8	 mov         w8,#0x3F3F
  003ec	b9000848	 str         w8,[x2,#8]

; 283  :             break;

  003f0	1400000c	 b           |$LN3@inflate_fa|
  003f4		 |$LN54@inflate_fa|

; 284  :         }
; 285  :         else {
; 286  :             strm->msg = (char *)"invalid literal/length code";

  003f4	90000008	 adrp        x8,|??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@|
  003f8	91000108	 add         x8,x8,PageOffset(|??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@|)

; 287  :             state->mode = BAD;

  003fc	14000006	 b           |$LN95@inflate_fa|
  00400		 |$LN50@inflate_fa|

; 268  :                 goto dodist;
; 269  :             }
; 270  :             else {
; 271  :                 strm->msg = (char *)"invalid distance code";

  00400	90000008	 adrp        x8,|??_C@_0BG@LBKINIKP@invalid?5distance?5code@|
  00404	91000108	 add         x8,x8,PageOffset(|??_C@_0BG@LBKINIKP@invalid?5distance?5code@|)

; 272  :                 state->mode = BAD;
; 273  :                 break;

  00408	14000003	 b           |$LN95@inflate_fa|
  0040c		 |$LN71@inflate_fa|

; 174  :                             strm->msg =

  0040c	90000008	 adrp        x8,|??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@|
  00410	91000108	 add         x8,x8,PageOffset(|??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@|)
  00414		 |$LN95@inflate_fa|

; 291  : 
; 292  :     /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
; 293  :     len = bits >> 3;

  00414	5287ea29	 mov         w9,#0x3F51
  00418	f9001008	 str         x8,[x0,#0x20]
  0041c	b9000849	 str         w9,[x2,#8]
  00420		 |$LN3@inflate_fa|
  00420	53037de8	 lsr         w8,w15,#3

; 294  :     in -= len;
; 295  :     bits -= len << 3;
; 296  :     hold &= (1U << bits) - 1;
; 297  : 
; 298  :     /* update state and return */
; 299  :     strm->next_in = in;
; 300  :     strm->next_out = out;

  00424	f900080d	 str         x13,[x0,#0x10]
  00428	cb2840aa	 sub         x10,x5,w8,uxtw #0
  0042c	4b080dec	 sub         w12,w15,w8,lsl #3
  00430	52800028	 mov         w8,#1

; 301  :     strm->avail_in = (unsigned)(in < last ? 5 + (last - in) : 5 - (in - last));

  00434	4b0a02a9	 sub         w9,w21,w10
  00438	f900000a	 str         x10,[x0]
  0043c	1100152a	 add         w10,w9,#5

; 302  :     strm->avail_out = (unsigned)(out < end ?

  00440	4b0d02c9	 sub         w9,w22,w13
  00444	b900080a	 str         w10,[x0,#8]
  00448	1acc2108	 lsl         w8,w8,w12
  0044c	1104052a	 add         w10,w9,#0x101
  00450	51000509	 sub         w9,w8,#1
  00454	b900180a	 str         w10,[x0,#0x18]
  00458	0a06012a	 and         w10,w9,w6

; 303  :                                  257 + (end - out) : 257 - (out - end));
; 304  :     state->hold = hold;

  0045c	2909304a	 stp         w10,w12,[x2,#0x48]
  00460	910043ff	 add         sp,sp,#0x10
  00464	f94023fb	 ldr         x27,[sp,#0x40]
  00468	a9436bf9	 ldp         x25,x26,[sp,#0x30]
  0046c	a94263f7	 ldp         x23,x24,[sp,#0x20]
  00470	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00474	a8c553f3	 ldp         x19,x20,[sp],#0x50
  00478	d65f03c0	 ret

			 ENDP  ; |inflate_fast|

	END
