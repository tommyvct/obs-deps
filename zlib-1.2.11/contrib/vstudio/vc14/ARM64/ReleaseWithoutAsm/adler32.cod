; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TTL	c:\users\ws103\desktop\zlib-1.2.11\adler32.c
	ARM64

	AREA	|.drectve|, DRECTVE

	EXPORT	|adler32_combine64|
	EXPORT	|adler32_combine|
	EXPORT	|adler32|
	EXPORT	|adler32_z|
	IMPORT	|__chkstk|
	IMPORT	|memchr|
	IMPORT	|memcpy|
	IMPORT	|memset|
	IMPORT	|strcmp|
; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\adler32.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |adler32_z| PROC

; 68   :     unsigned long sum2;
; 69   :     unsigned n;
; 70   : 
; 71   :     /* split Adler-32 into component sums */
; 72   :     sum2 = (adler >> 16) & 0xffff;

  00000	53107c0d	 lsr         w13,w0,#0x10

; 73   :     adler &= 0xffff;

  00004	12003c0c	 and         w12,w0,#0xFFFF

; 74   : 
; 75   :     /* in case user likes doing a byte at a time, keep it fast */
; 76   :     if (len == 1) {

  00008	f100045f	 cmp         x2,#1
  0000c	54000001	 bne         |$LN13@adler32_z|

; 77   :         adler += buf[0];

  00010	39400028	 ldrb        w8,[x1]

; 78   :         if (adler >= BASE)
; 79   :             adler -= BASE;
; 80   :         sum2 += adler;

  00014	529ffe2b	 mov         w11,#0xFFF1
  00018	529ffe2a	 mov         w10,#0xFFF1
  0001c	0b0c0109	 add         w9,w8,w12
  00020	4b0a0128	 sub         w8,w9,w10
  00024	6b0b013f	 cmp         w9,w11
  00028	1a88312b	 csello      w11,w9,w8
  0002c	0b0d016a	 add         w10,w11,w13

; 81   :         if (sum2 >= BASE)
; 82   :             sum2 -= BASE;
; 83   :         return adler | (sum2 << 16);

  00030	529ffe29	 mov         w9,#0xFFF1
  00034	529ffe28	 mov         w8,#0xFFF1
  00038	4b080148	 sub         w8,w10,w8
  0003c	6b09015f	 cmp         w10,w9
  00040	1a883148	 csello      w8,w10,w8
  00044	2a084160	 orr         w0,w11,w8,lsl #0x10
  00048	d65f03c0	 ret
  0004c		 |$LN13@adler32_z|

; 84   :     }
; 85   : 
; 86   :     /* initial Adler-32 value (deferred check for len == 1 speed) */
; 87   :     if (buf == Z_NULL)

  0004c	b5000001	 cbnz        x1,|$LN16@adler32_z|

; 88   :         return 1L;

  00050	52800020	 mov         w0,#1
  00054	d65f03c0	 ret
  00058		 |$LN16@adler32_z|

; 89   : 
; 90   :     /* in case short lengths are provided, keep it somewhat fast */
; 91   :     if (len < 16) {

  00058	f100405f	 cmp         x2,#0x10
  0005c	54000002	 bhs         |$LN22@adler32_z|

; 92   :         while (len--) {

  00060	b4000002	 cbz         x2,|$LN26@adler32_z|
  00064		 |$LL2@adler32_z|

; 93   :             adler += *buf++;

  00064	38401428	 ldrb        w8,[x1],#1
  00068	d1000442	 sub         x2,x2,#1
  0006c	0b0c010c	 add         w12,w8,w12

; 94   :             sum2 += adler;

  00070	0b0c01ad	 add         w13,w13,w12
  00074	b5000002	 cbnz        x2,|$LL2@adler32_z|
  00078		 |$LN26@adler32_z|

; 95   :         }
; 96   :         if (adler >= BASE)
; 97   :             adler -= BASE;
; 98   :         MOD28(sum2);            /* only added so many BASE's */

  00078	529ffe29	 mov         w9,#0xFFF1
  0007c	529ffe28	 mov         w8,#0xFFF1
  00080	4b080188	 sub         w8,w12,w8
  00084	6b09019f	 cmp         w12,w9
  00088	52900e2f	 mov         w15,#0x8071
  0008c	72b000ef	 movk        w15,#0x8007,lsl #0x10
  00090	1a88318c	 csello      w12,w12,w8
  00094	9baf7da8	 umull       x8,w13,w15
  00098	d360fd09	 lsr         x9,x8,#0x20
  0009c	530f7d2b	 lsr         w11,w9,#0xF
  000a0	528001e8	 mov         w8,#0xF

; 99   :         return adler | (sum2 << 16);

  000a4	1b083568	 madd        w8,w11,w8,w13
  000a8	2a084180	 orr         w0,w12,w8,lsl #0x10
  000ac	d65f03c0	 ret
  000b0		 |$LN22@adler32_z|

; 100  :     }
; 101  : 
; 102  :     /* do length NMAX blocks -- requires just one modulo operation */
; 103  :     while (len >= NMAX) {

  000b0	d282b608	 mov         x8,#0x15B0
  000b4	eb08005f	 cmp         x2,x8
  000b8	52900e2f	 mov         w15,#0x8071
  000bc	72b000ef	 movk        w15,#0x8007,lsl #0x10
  000c0	54000003	 blo         |$LN45@adler32_z|
  000c4	d282b608	 mov         x8,#0x15B0
  000c8	9ac8084e	 udiv        x14,x2,x8
  000cc	9282b5e9	 mov         x9,#-0x15B0
  000d0	9b0909c2	 madd        x2,x14,x9,x2
  000d4		 |$LL4@adler32_z|

; 104  :         len -= NMAX;
; 105  :         n = NMAX / 16;          /* NMAX is divisible by 16 */

  000d4	52802b66	 mov         w6,#0x15B
  000d8	91000827	 add         x7,x1,#2
  000dc		 |$LL8@adler32_z|

; 106  :         do {
; 107  :             DO16(buf);          /* 16 sums unrolled */

  000dc	38410428	 ldrb        w8,[x1],#0x10

; 108  :             buf += 16;
; 109  :         } while (--n);

  000e0	510004c6	 sub         w6,w6,#1
  000e4	0b0c0109	 add         w9,w8,w12
  000e8	385ff0e8	 ldurb       w8,[x7,#-1]
  000ec	0b0901aa	 add         w10,w13,w9
  000f0	0b09010b	 add         w11,w8,w9
  000f4	384104e8	 ldrb        w8,[x7],#0x10
  000f8	0b0b014c	 add         w12,w10,w11
  000fc	0b0b0109	 add         w9,w8,w11
  00100	385f10e8	 ldurb       w8,[x7,#-0xF]
  00104	0b09018a	 add         w10,w12,w9
  00108	0b09010b	 add         w11,w8,w9
  0010c	385f20e8	 ldurb       w8,[x7,#-0xE]
  00110	0b0b014c	 add         w12,w10,w11
  00114	0b0b0109	 add         w9,w8,w11
  00118	385f30e8	 ldurb       w8,[x7,#-0xD]
  0011c	0b09018a	 add         w10,w12,w9
  00120	0b09010b	 add         w11,w8,w9
  00124	385f40e8	 ldurb       w8,[x7,#-0xC]
  00128	0b0b014c	 add         w12,w10,w11
  0012c	0b0b0109	 add         w9,w8,w11
  00130	385f50e8	 ldurb       w8,[x7,#-0xB]
  00134	0b09018a	 add         w10,w12,w9
  00138	0b09010b	 add         w11,w8,w9
  0013c	385f60e8	 ldurb       w8,[x7,#-0xA]
  00140	0b0b014c	 add         w12,w10,w11
  00144	0b0b0109	 add         w9,w8,w11
  00148	385f70e8	 ldurb       w8,[x7,#-9]
  0014c	0b09018a	 add         w10,w12,w9
  00150	0b09010b	 add         w11,w8,w9
  00154	385f80e8	 ldurb       w8,[x7,#-8]
  00158	0b0b014c	 add         w12,w10,w11
  0015c	0b0b0109	 add         w9,w8,w11
  00160	385f90e8	 ldurb       w8,[x7,#-7]
  00164	0b09018a	 add         w10,w12,w9
  00168	0b09010b	 add         w11,w8,w9
  0016c	385fa0e8	 ldurb       w8,[x7,#-6]
  00170	0b0b014c	 add         w12,w10,w11
  00174	0b0b0109	 add         w9,w8,w11
  00178	385fb0e8	 ldurb       w8,[x7,#-5]
  0017c	0b09018a	 add         w10,w12,w9
  00180	0b09010b	 add         w11,w8,w9
  00184	385fc0e8	 ldurb       w8,[x7,#-4]
  00188	0b0b014c	 add         w12,w10,w11
  0018c	0b0b0109	 add         w9,w8,w11
  00190	385fd0e8	 ldurb       w8,[x7,#-3]
  00194	0b09018a	 add         w10,w12,w9
  00198	0b09010c	 add         w12,w8,w9
  0019c	0b0c014d	 add         w13,w10,w12
  001a0	35000006	 cbnz        w6,|$LL8@adler32_z|

; 110  :         MOD(adler);

  001a4	9baf7d88	 umull       x8,w12,w15
  001a8	d10005ce	 sub         x14,x14,#1
  001ac	d360fd09	 lsr         x9,x8,#0x20
  001b0	530f7d2b	 lsr         w11,w9,#0xF
  001b4	529ffe28	 mov         w8,#0xFFF1
  001b8	1b08b16c	 msub        w12,w11,w8,w12

; 111  :         MOD(sum2);

  001bc	9baf7da8	 umull       x8,w13,w15
  001c0	d360fd09	 lsr         x9,x8,#0x20
  001c4	530f7d2b	 lsr         w11,w9,#0xF
  001c8	529ffe28	 mov         w8,#0xFFF1
  001cc	1b08b56d	 msub        w13,w11,w8,w13
  001d0	b500000e	 cbnz        x14,|$LL4@adler32_z|

; 112  :     }
; 113  : 
; 114  :     /* do remaining bytes (less than NMAX, still just one modulo) */
; 115  :     if (len) {                  /* avoid modulos if none remaining */

  001d4	b4000002	 cbz         x2,|$LN19@adler32_z|

; 116  :         while (len >= 16) {

  001d8	f100405f	 cmp         x2,#0x10
  001dc	54000003	 blo         |$LL11@adler32_z|
  001e0		 |$LN45@adler32_z|
  001e0	d344fc47	 lsr         x7,x2,#4
  001e4	cb0713e8	 neg         x8,x7,lsl #4
  001e8	9100082e	 add         x14,x1,#2
  001ec	8b020102	 add         x2,x8,x2
  001f0		 |$LL9@adler32_z|

; 117  :             len -= 16;
; 118  :             DO16(buf);

  001f0	38410428	 ldrb        w8,[x1],#0x10
  001f4	d10004e7	 sub         x7,x7,#1
  001f8	0b0c0109	 add         w9,w8,w12
  001fc	385ff1c8	 ldurb       w8,[x14,#-1]
  00200	0b0901aa	 add         w10,w13,w9
  00204	0b09010b	 add         w11,w8,w9
  00208	384105c8	 ldrb        w8,[x14],#0x10
  0020c	0b0b014c	 add         w12,w10,w11
  00210	0b0b0109	 add         w9,w8,w11
  00214	385f11c8	 ldurb       w8,[x14,#-0xF]
  00218	0b09018a	 add         w10,w12,w9
  0021c	0b09010b	 add         w11,w8,w9
  00220	385f21c8	 ldurb       w8,[x14,#-0xE]
  00224	0b0b014c	 add         w12,w10,w11
  00228	0b0b0109	 add         w9,w8,w11
  0022c	385f31c8	 ldurb       w8,[x14,#-0xD]
  00230	0b09018a	 add         w10,w12,w9
  00234	0b09010b	 add         w11,w8,w9
  00238	385f41c8	 ldurb       w8,[x14,#-0xC]
  0023c	0b0b014c	 add         w12,w10,w11
  00240	0b0b0109	 add         w9,w8,w11
  00244	385f51c8	 ldurb       w8,[x14,#-0xB]
  00248	0b09018a	 add         w10,w12,w9
  0024c	0b09010b	 add         w11,w8,w9
  00250	385f61c8	 ldurb       w8,[x14,#-0xA]
  00254	0b0b014c	 add         w12,w10,w11
  00258	0b0b0109	 add         w9,w8,w11
  0025c	385f71c8	 ldurb       w8,[x14,#-9]
  00260	0b09018a	 add         w10,w12,w9
  00264	0b09010b	 add         w11,w8,w9
  00268	385f81c8	 ldurb       w8,[x14,#-8]
  0026c	0b0b014c	 add         w12,w10,w11
  00270	0b0b0109	 add         w9,w8,w11
  00274	385f91c8	 ldurb       w8,[x14,#-7]
  00278	0b09018a	 add         w10,w12,w9
  0027c	0b09010b	 add         w11,w8,w9
  00280	385fa1c8	 ldurb       w8,[x14,#-6]
  00284	0b0b014c	 add         w12,w10,w11
  00288	0b0b0109	 add         w9,w8,w11
  0028c	385fb1c8	 ldurb       w8,[x14,#-5]
  00290	0b09018a	 add         w10,w12,w9
  00294	0b09010b	 add         w11,w8,w9
  00298	385fc1c8	 ldurb       w8,[x14,#-4]
  0029c	0b0b014c	 add         w12,w10,w11
  002a0	0b0b0109	 add         w9,w8,w11
  002a4	385fd1c8	 ldurb       w8,[x14,#-3]
  002a8	0b09018a	 add         w10,w12,w9
  002ac	0b09010c	 add         w12,w8,w9
  002b0	0b0c014d	 add         w13,w10,w12
  002b4	b5000007	 cbnz        x7,|$LL9@adler32_z|

; 119  :             buf += 16;
; 120  :         }
; 121  :         while (len--) {

  002b8	b4000002	 cbz         x2,|$LN30@adler32_z|
  002bc		 |$LL11@adler32_z|

; 122  :             adler += *buf++;

  002bc	38401428	 ldrb        w8,[x1],#1
  002c0	d1000442	 sub         x2,x2,#1
  002c4	0b0c010c	 add         w12,w8,w12

; 123  :             sum2 += adler;

  002c8	0b0c01ad	 add         w13,w13,w12
  002cc	b5000002	 cbnz        x2,|$LL11@adler32_z|
  002d0		 |$LN30@adler32_z|

; 124  :         }
; 125  :         MOD(adler);

  002d0	9baf7d88	 umull       x8,w12,w15
  002d4	d360fd09	 lsr         x9,x8,#0x20
  002d8	530f7d2b	 lsr         w11,w9,#0xF
  002dc	529ffe28	 mov         w8,#0xFFF1
  002e0	1b08b16c	 msub        w12,w11,w8,w12

; 126  :         MOD(sum2);

  002e4	9baf7da8	 umull       x8,w13,w15
  002e8	d360fd09	 lsr         x9,x8,#0x20
  002ec	530f7d2b	 lsr         w11,w9,#0xF
  002f0	529ffe28	 mov         w8,#0xFFF1
  002f4	1b08b56d	 msub        w13,w11,w8,w13
  002f8		 |$LN19@adler32_z|

; 127  :     }
; 128  : 
; 129  :     /* return recombined sums */
; 130  :     return adler | (sum2 << 16);

  002f8	2a0d4180	 orr         w0,w12,w13,lsl #0x10
  002fc	d65f03c0	 ret

			 ENDP  ; |adler32_z|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\adler32.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |adler32| PROC

; 139  :     return adler32_z(adler, buf, len);

  00000	d3407c42	 uxtw        x2,w2
  00004	14000000	 b           adler32_z

			 ENDP  ; |adler32|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\adler32.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |adler32_combine_| PROC

; 148  :     unsigned long sum1;
; 149  :     unsigned long sum2;
; 150  :     unsigned rem;
; 151  : 
; 152  :     /* for negative len, return invalid adler32 as a clue for debugging */
; 153  :     if (len2 < 0)

  00000	b6f80002	 tbz         x2,#0x3F,|$LN2@adler32_co|

; 154  :         return 0xffffffffUL;

  00004	12800000	 mov         w0,#-1
  00008	d65f03c0	 ret
  0000c		 |$LN2@adler32_co|

; 155  : 
; 156  :     /* the derivation of this formula is left as an exercise for the reader */
; 157  :     MOD63(len2);                /* assumes len2 >= 0 */

  0000c	f100005f	 cmp         x2,#0
  00010	9a9fa042	 cselge      x2,x2,xzr
  00014	d503229f	 csdb
  00018	d29ffe29	 mov         x9,#0xFFF1
  0001c	9ac90848	 udiv        x8,x2,x9

; 158  :     rem = (unsigned)len2;
; 159  :     sum1 = adler1 & 0xffff;
; 160  :     sum2 = rem * sum1;
; 161  :     MOD(sum2);

  00020	529ffe27	 mov         w7,#0xFFF1

; 162  :     sum1 += (adler2 & 0xffff) + BASE - 1;

  00024	529ffe0a	 mov         w10,#0xFFF0
  00028	9b09890f	 msub        x15,x8,x9,x2
  0002c	12003c09	 and         w9,w0,#0xFFFF
  00030	12003c28	 and         w8,w1,#0xFFFF
  00034	0b09010d	 add         w13,w8,w9
  00038	1b0f7d2e	 mul         w14,w9,w15
  0003c	52900e28	 mov         w8,#0x8071
  00040	72b000e8	 movk        w8,#0x8007,lsl #0x10
  00044	0b0a01ac	 add         w12,w13,w10
  00048	9ba87dc8	 umull       x8,w14,w8
  0004c	d360fd09	 lsr         x9,x8,#0x20
  00050	530f7d2b	 lsr         w11,w9,#0xF

; 163  :     sum2 += ((adler1 >> 16) & 0xffff) + ((adler2 >> 16) & 0xffff) + BASE - rem;

  00054	53107c08	 lsr         w8,w0,#0x10
  00058	1b07a169	 msub        w9,w11,w7,w8

; 164  :     if (sum1 >= BASE) sum1 -= BASE;
; 165  :     if (sum1 >= BASE) sum1 -= BASE;
; 166  :     if (sum2 >= ((unsigned long)BASE << 1)) sum2 -= ((unsigned long)BASE << 1);

  0005c	529ffe2b	 mov         w11,#0xFFF1
  00060	6b0b019f	 cmp         w12,w11
  00064	0b414129	 add         w9,w9,w1,lsr #0x10
  00068	4b0f0128	 sub         w8,w9,w15
  0006c	0b0e010a	 add         w10,w8,w14
  00070	510005a9	 sub         w9,w13,#1
  00074	1a89318b	 csello      w11,w12,w9
  00078	529ffe28	 mov         w8,#0xFFF1
  0007c	0b080148	 add         w8,w10,w8

; 167  :     if (sum2 >= BASE) sum2 -= BASE;
; 168  :     return sum1 | (sum2 << 16);

  00080	529ffc49	 mov         w9,#0xFFE2
  00084	72a00029	 movk        w9,#1,lsl #0x10
  00088	6b09011f	 cmp         w8,w9
  0008c	529ffe2d	 mov         w13,#0xFFF1
  00090	129ffe0c	 mov         w12,#-0xFFF1
  00094	1a8c31a8	 csello      w8,w13,w12
  00098	0b0a0109	 add         w9,w8,w10
  0009c	529ffe2c	 mov         w12,#0xFFF1
  000a0	529ffe28	 mov         w8,#0xFFF1
  000a4	4b080128	 sub         w8,w9,w8
  000a8	6b0c013f	 cmp         w9,w12
  000ac	529ffe2d	 mov         w13,#0xFFF1
  000b0	529ffe2c	 mov         w12,#0xFFF1
  000b4	1a88312a	 csello      w10,w9,w8
  000b8	4b0c0168	 sub         w8,w11,w12
  000bc	6b0d017f	 cmp         w11,w13
  000c0	1a883168	 csello      w8,w11,w8
  000c4	2a0a4100	 orr         w0,w8,w10,lsl #0x10
  000c8	d65f03c0	 ret

			 ENDP  ; |adler32_combine_|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\adler32.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |adler32_combine| PROC

; 177  :     return adler32_combine_(adler1, adler2, len2);

  00000	93407c42	 sxtw        x2,w2
  00004	14000000	 b           adler32_combine_

			 ENDP  ; |adler32_combine|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\adler32.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |adler32_combine64| PROC

; 185  :     return adler32_combine_(adler1, adler2, len2);

  00000	14000000	 b           adler32_combine_

			 ENDP  ; |adler32_combine64|

	END
