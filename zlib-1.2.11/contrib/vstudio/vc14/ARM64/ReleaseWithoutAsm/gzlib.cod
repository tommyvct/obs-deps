; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TTL	c:\users\ws103\desktop\zlib-1.2.11\gzlib.c
	ARM64

	AREA	|.drectve|, DRECTVE

	EXPORT	|??_C@_02DKCKIIND@?$CFs@| [ DATA ]	; `string'
	EXPORT	|??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO@| [ DATA ] ; `string'
	EXPORT	|??_C@_0O@BNNCBLEN@out?5of?5memory@| [ DATA ] ; `string'
	EXPORT	|??_C@_00CNPNBAHC@@| [ DATA ]		; `string'
	EXPORT	|??_C@_02LMMGGCAJ@?3?5@| [ DATA ]	; `string'
	EXPORT	|??_C@_06DIJPEION@?$CFs?$CFs?$CFs@| [ DATA ] ; `string'
	IMPORT	|__imp_malloc|
	IMPORT	|__imp_free|
	IMPORT	|__imp___stdio_common_vsprintf|
	IMPORT	|__imp_wcstombs|
	IMPORT	|__imp__open|
	IMPORT	|__imp__wopen|
	IMPORT	|__imp__lseeki64|

	AREA	|.rdata|, DATA, READONLY
|??_C@_06DIJPEION@?$CFs?$CFs?$CFs@| DCB "%s%s%s", 0x0	; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_02LMMGGCAJ@?3?5@| DCB ": ", 0x0			; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_00CNPNBAHC@@| DCB 0x0				; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0O@BNNCBLEN@out?5of?5memory@| DCB "out of memory", 0x0 ; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO@| DCB "<fd:%d>", 0x0 ; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_02DKCKIIND@?$CFs@| DCB "%s", 0x0			; `string'
	EXPORT	|gz_error|
	EXPORT	|gzclearerr|
	EXPORT	|gzerror|
	EXPORT	|gzeof|
	EXPORT	|gzoffset|
	EXPORT	|gzoffset64|
	EXPORT	|gztell|
	EXPORT	|gztell64|
	EXPORT	|gzseek|
	EXPORT	|gzseek64|
	EXPORT	|gzrewind|
	EXPORT	|gzbuffer|
	EXPORT	|gzopen_w|
	EXPORT	|gzdopen|
	EXPORT	|gzopen64|
	EXPORT	|gzopen|
	EXPORT	|snprintf|
	EXPORT	|vsnprintf|
	EXPORT	|__local_stdio_printf_options|

	AREA	|.pdata|, PDATA
|$pdata$gz_error| DCD imagerel |$LN34|
	DCD	imagerel |$unwind$gz_error|

	AREA	|.pdata|, PDATA
|$pdata$gzoffset| DCD imagerel |$LN4|
	DCD	0xe00021
	;Flags[SingleProEpi] functionLength[32] RegF[0] RegI[0] H[0] frameChainReturn[Chained] frameSize[16]

	AREA	|.pdata|, PDATA
|$pdata$gzoffset64| DCD imagerel |$LN9|
	DCD	imagerel |$unwind$gzoffset64|

	AREA	|.pdata|, PDATA
|$pdata$gztell| DCD imagerel |$LN4|
	DCD	0xe00021
	;Flags[SingleProEpi] functionLength[32] RegF[0] RegI[0] H[0] frameChainReturn[Chained] frameSize[16]

	AREA	|.pdata|, PDATA
|$pdata$gzseek| DCD imagerel |$LN4|
	DCD	0xe00025
	;Flags[SingleProEpi] functionLength[36] RegF[0] RegI[0] H[0] frameChainReturn[Chained] frameSize[16]

	AREA	|.pdata|, PDATA
|$pdata$gzseek64| DCD imagerel |$LN27|
	DCD	imagerel |$unwind$gzseek64|

	AREA	|.pdata|, PDATA
|$pdata$gzrewind| DCD imagerel |$LN8|
	DCD	imagerel |$unwind$gzrewind|

	AREA	|.pdata|, PDATA
|$pdata$gzdopen| DCD imagerel |$LN6|
	DCD	imagerel |$unwind$gzdopen|

	AREA	|.pdata|, PDATA
|$pdata$gz_open| DCD imagerel |gz_open|
	DCD	imagerel |$unwind$gz_open|

	AREA	|.pdata|, PDATA
|$pdata$gz_reset| DCD imagerel |gz_reset|
	DCD	0x1610055
	;Flags[SingleProEpi] functionLength[84] RegF[0] RegI[1] H[0] frameChainReturn[Chained] frameSize[32]

	AREA	|.pdata|, PDATA
|$pdata$snprintf| DCD imagerel |$LN6|
	DCD	imagerel |$unwind$snprintf|

	AREA	|.pdata|, PDATA
|$pdata$vsnprintf| DCD imagerel |$LN4|
	DCD	0x1e40069
	;Flags[SingleProEpi] functionLength[104] RegF[0] RegI[4] H[0] frameChainReturn[Chained] frameSize[48]

	AREA	|.xdata|, DATA
|$unwind$snprintf| DCD 0x2260001d
	DCD	0xe3e381e1
	DCD	0x2a82c8e3
	DCD	0x82c881e4
	DCD	0xe3e3e42a
	;Code Words[4], Epilog Start Index[9], E[1], X[0], Function Length[29]=116 bytes
	;set_fp
	;save_fplr_x
	;nop
	;nop
	;nop
	;save_regp
	;save_r19r20_x
	;end
	;save_fplr_x
	;save_regp
	;save_r19r20_x
	;end
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$gz_open| DCD 0x10c000e9
	DCD	0x4000a1
	DCD	0x4000be
	DCD	0x4000d3
	DCD	0x4c981e1
	DCD	0xe42682c8
	;Code Words[2], Epilog Count[3], E[0], X[0], Function Length[233]=932 bytes
	;Epilog Start Index[1], Epilog Start Offset[161]=644 bytes
	;Epilog Start Index[1], Epilog Start Offset[190]=760 bytes
	;Epilog Start Index[1], Epilog Start Offset[211]=844 bytes
	;set_fp
	;save_fplr_x
	;save_regp
	;save_regp
	;save_r19r20_x
	;end

	AREA	|.xdata|, DATA
|$unwind$gzdopen| DCD 0x10800026
	DCD	0x40001d
	DCD	0x400022
	DCD	0x82d081e1
	DCD	0xe3e3e424
	;Code Words[2], Epilog Count[2], E[0], X[0], Function Length[38]=152 bytes
	;Epilog Start Index[1], Epilog Start Offset[29]=116 bytes
	;Epilog Start Index[1], Epilog Start Offset[34]=136 bytes
	;set_fp
	;save_fplr_x
	;save_reg
	;save_r19r20_x
	;end
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$gzrewind| DCD 0x1080001f
	DCD	0x400018
	DCD	0x40001c
	DCD	0x1d481e1
	DCD	0xe3e3e3e4
	;Code Words[2], Epilog Count[2], E[0], X[0], Function Length[31]=124 bytes
	;Epilog Start Index[1], Epilog Start Offset[24]=96 bytes
	;Epilog Start Index[1], Epilog Start Offset[28]=112 bytes
	;set_fp
	;save_fplr_x
	;save_reg_x
	;end
	;nop
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$gzseek64| DCD 0x8c00066
	DCD	0x40003c
	DCD	0x40005f
	DCD	0x400063
	DCD	0xe42281e1
	;Code Words[1], Epilog Count[3], E[0], X[0], Function Length[102]=408 bytes
	;Epilog Start Index[1], Epilog Start Offset[60]=240 bytes
	;Epilog Start Index[1], Epilog Start Offset[95]=380 bytes
	;Epilog Start Index[1], Epilog Start Offset[99]=396 bytes
	;set_fp
	;save_fplr_x
	;save_r19r20_x
	;end

	AREA	|.xdata|, DATA
|$unwind$gzoffset64| DCD 0x10800021
	DCD	0x40001a
	DCD	0x40001e
	DCD	0x1d481e1
	DCD	0xe3e3e3e4
	;Code Words[2], Epilog Count[2], E[0], X[0], Function Length[33]=132 bytes
	;Epilog Start Index[1], Epilog Start Offset[26]=104 bytes
	;Epilog Start Index[1], Epilog Start Offset[30]=120 bytes
	;set_fp
	;save_fplr_x
	;save_reg_x
	;end
	;nop
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$gz_error| DCD 0x1080004b
	DCD	0x40002e
	DCD	0x400047
	DCD	0x82d081e1
	DCD	0xe3e3e424
	;Code Words[2], Epilog Count[2], E[0], X[0], Function Length[75]=300 bytes
	;Epilog Start Index[1], Epilog Start Offset[46]=184 bytes
	;Epilog Start Index[1], Epilog Start Offset[71]=284 bytes
	;set_fp
	;save_fplr_x
	;save_reg
	;save_r19r20_x
	;end
	;nop
	;nop
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h

	AREA	|.text$mn|, CODE, ARM64

  00000		 |__local_stdio_printf_options| PROC

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	90000008	 adrp        x8,|?_OptionsStorage@?1??__local_stdio_printf_options@@9@9|
  00004	91000100	 add         x0,x8,PageOffset(|?_OptionsStorage@?1??__local_stdio_printf_options@@9@9|)
  00008	d65f03c0	 ret

			 ENDP  ; |__local_stdio_printf_options|

; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h

	AREA	|.text$mn|, CODE, ARM64

  00000		 |vsnprintf| PROC

; 1438 :     {

  00000		 |$LN4|
  00000	a9be53f3	 stp         x19,x20,[sp,#-0x20]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  0000c	910003fd	 mov         fp,sp
  00010	aa0003f6	 mov         x22,x0
  00014	aa0103f5	 mov         x21,x1
  00018	aa0203f4	 mov         x20,x2
  0001c	aa0303f3	 mov         x19,x3

; 1439 :         int const _Result = __stdio_common_vsprintf(

  00020	94000000	 bl          __local_stdio_printf_options
  00024	f9400008	 ldr         x8,[x0]
  00028	aa1303e5	 mov         x5,x19
  0002c	d2800004	 mov         x4,#0
  00030	aa1403e3	 mov         x3,x20
  00034	aa1503e2	 mov         x2,x21
  00038	b27f0100	 orr         x0,x8,#2
  0003c	90000008	 adrp        x8,__imp___stdio_common_vsprintf
  00040	f9400108	 ldr         x8,[x8,PageOffset(__imp___stdio_common_vsprintf)]
  00044	aa1603e1	 mov         x1,x22
  00048	d63f0100	 blr         x8

; 1440 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1441 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1442 : 
; 1443 :         return _Result < 0 ? -1 : _Result;

  0004c	12800008	 mov         w8,#-1
  00050	7100001f	 cmp         w0,#0
  00054	1a80b100	 csellt      w0,w8,w0
  00058	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0005c	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00060	a8c253f3	 ldp         x19,x20,[sp],#0x20
  00064	d65f03c0	 ret

			 ENDP  ; |vsnprintf|

; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h

	AREA	|.text$mn|, CODE, ARM64

  00000		 |snprintf| PROC

; 1927 :     {

  00000		 |$LN6|
  00000	a9bb53f3	 stp         x19,x20,[sp,#-0x50]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	a90293e3	 stp         x3,x4,[sp,#0x28]
  0000c	a9039be5	 stp         x5,x6,[sp,#0x38]
  00010	f90027e7	 str         x7,[sp,#0x48]
  00014	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00018	910003fd	 mov         fp,sp
  0001c	aa0003f5	 mov         x21,x0
  00020	aa0103f4	 mov         x20,x1
  00024	aa0203f3	 mov         x19,x2

; 1928 :         int _Result;
; 1929 :         va_list _ArgList;
; 1930 :         __crt_va_start(_ArgList, _Format);

  00028	9100e3f6	 add         x22,sp,#0x38

; 1439 :         int const _Result = __stdio_common_vsprintf(

  0002c	94000000	 bl          __local_stdio_printf_options
  00030	f9400008	 ldr         x8,[x0]
  00034	aa1603e5	 mov         x5,x22
  00038	d2800004	 mov         x4,#0
  0003c	aa1303e3	 mov         x3,x19
  00040	aa1403e2	 mov         x2,x20
  00044	b27f0100	 orr         x0,x8,#2
  00048	90000008	 adrp        x8,__imp___stdio_common_vsprintf
  0004c	f9400108	 ldr         x8,[x8,PageOffset(__imp___stdio_common_vsprintf)]
  00050	aa1503e1	 mov         x1,x21
  00054	d63f0100	 blr         x8

; 1440 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1441 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1442 : 
; 1443 :         return _Result < 0 ? -1 : _Result;

  00058	12800008	 mov         w8,#-1
  0005c	7100001f	 cmp         w0,#0
  00060	1a80b100	 csellt      w0,w8,w0
  00064	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00068	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  0006c	a8c553f3	 ldp         x19,x20,[sp],#0x50
  00070	d65f03c0	 ret

			 ENDP  ; |snprintf|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzlib.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gz_reset| PROC

; 77   : {

  00000	f81f0ff3	 str         x19,[sp,#-0x10]!
  00004	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00008	910003fd	 mov         fp,sp
  0000c	aa0003f3	 mov         x19,x0

; 78   :     state->x.have = 0;              /* no output data available */
; 79   :     if (state->mode == GZ_READ) {   /* for reading ... */

  00010	b9401a68	 ldr         w8,[x19,#0x18]
  00014	528389e9	 mov         w9,#0x1C4F
  00018	b900027f	 str         wzr,[x19]
  0001c	6b09011f	 cmp         w8,w9
  00020	54000001	 bne         |$LN2@gz_reset|

; 80   :         state->eof = 0;             /* not at end of file */

  00024	f9002a7f	 str         xzr,[x19,#0x50]

; 81   :         state->past = 0;            /* have not read past end yet */
; 82   :         state->how = LOOK;          /* look for gzip header */

  00028	b900467f	 str         wzr,[x19,#0x44]
  0002c		 |$LN2@gz_reset|

; 83   :     }
; 84   :     state->seek = 0;                /* no seek request pending */
; 85   :     gz_error(state, Z_OK, NULL);    /* clear error */

  0002c	d2800002	 mov         x2,#0
  00030	b9006a7f	 str         wzr,[x19,#0x68]
  00034	52800001	 mov         w1,#0
  00038	aa1303e0	 mov         x0,x19
  0003c	94000000	 bl          gz_error

; 86   :     state->x.pos = 0;               /* no uncompressed data yet */

  00040	f9000a7f	 str         xzr,[x19,#0x10]

; 87   :     state->strm.avail_in = 0;       /* no input data yet */

  00044	b900827f	 str         wzr,[x19,#0x80]
  00048	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0004c	f84107f3	 ldr         x19,[sp],#0x10
  00050	d65f03c0	 ret

			 ENDP  ; |gz_reset|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzlib.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gz_open| PROC

; 95   : {

  00000	a9bd53f3	 stp         x19,x20,[sp,#-0x30]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	a90263f7	 stp         x23,x24,[sp,#0x20]
  0000c	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00010	910003fd	 mov         fp,sp
  00014	aa0003f6	 mov         x22,x0
  00018	2a0103f5	 mov         w21,w1
  0001c	aa0203f4	 mov         x20,x2

; 96   :     gz_statep state;
; 97   :     z_size_t len;
; 98   :     int oflag;
; 99   : #ifdef O_CLOEXEC
; 100  :     int cloexec = 0;
; 101  : #endif
; 102  : #ifdef O_EXCL
; 103  :     int exclusive = 0;

  00020	52800017	 mov         w23,#0

; 104  : #endif
; 105  : 
; 106  :     /* check input */
; 107  :     if (path == NULL)

  00024	b4000016	 cbz         x22,|$LN58@gz_open|

; 108  :         return NULL;
; 109  : 
; 110  :     /* allocate gzFile structure to return */
; 111  :     state = (gz_statep)malloc(sizeof(gz_state));

  00028	90000008	 adrp        x8,__imp_malloc
  0002c	f9400108	 ldr         x8,[x8,PageOffset(__imp_malloc)]
  00030	d2801a00	 mov         x0,#0xD0
  00034	d63f0100	 blr         x8
  00038	aa0003f3	 mov         x19,x0

; 112  :     if (state == NULL)

  0003c	b4000013	 cbz         x19,|$LN58@gz_open|

; 113  :         return NULL;
; 114  :     state->size = 0;            /* no buffers allocated yet */
; 115  :     state->want = GZBUFSIZE;    /* requested buffer size */

  00040	52840008	 mov         w8,#0x2000
  00044	2905227f	 stp         wzr,w8,[x19,#0x28]

; 116  :     state->msg = NULL;          /* no error message yet */
; 117  : 
; 118  :     /* interpret mode */
; 119  :     state->mode = GZ_NONE;
; 120  :     state->level = Z_DEFAULT_COMPRESSION;

  00048	12800008	 mov         w8,#-1
  0004c	f9003a7f	 str         xzr,[x19,#0x70]
  00050	290b7e68	 stp         w8,wzr,[x19,#0x58]
  00054	b9001a7f	 str         wzr,[x19,#0x18]

; 121  :     state->strategy = Z_DEFAULT_STRATEGY;
; 122  :     state->direct = 0;

  00058	b900427f	 str         wzr,[x19,#0x40]

; 123  :     while (*mode) {

  0005c	39c0028a	 ldrsb       w10,[x20]
  00060	3400000a	 cbz         w10,|$LN57@gz_open|
  00064	5280008d	 mov         w13,#4
  00068	5280006e	 mov         w14,#3
  0006c	5280002c	 mov         w12,#1
  00070	528389ef	 mov         w15,#0x1C4F
  00074	528f3638	 mov         w24,#0x79B1
  00078	52800047	 mov         w7,#2
  0007c		 |$LL2@gz_open|

; 124  :         if (*mode >= '0' && *mode <= '9')

  0007c	11034148	 add         w8,w10,#0xD0
  00080	53001d09	 uxtb        w9,w8
  00084	7100253f	 cmp         w9,#9
  00088	54000008	 bhi         |$LN8@gz_open|

; 125  :             state->level = *mode - '0';

  0008c	5100c148	 sub         w8,w10,#0x30
  00090	b9005a68	 str         w8,[x19,#0x58]
  00094	14000028	 b           |$LN21@gz_open|
  00098		 |$LN8@gz_open|

; 126  :         else
; 127  :             switch (*mode) {

  00098	7101995f	 cmp         w10,#0x66
  0009c	5400000c	 bgt         |$LN38@gz_open|
  000a0	54000000	 beq         |$LN16@gz_open|
  000a4	7101495f	 cmp         w10,#0x52
  000a8	5400000c	 bgt         |$LN39@gz_open|
  000ac	54000000	 beq         |$LN18@gz_open|
  000b0	7100ad5f	 cmp         w10,#0x2B
  000b4	54000000	 beq         |$LN57@gz_open|
  000b8	7101195f	 cmp         w10,#0x46
  000bc	54000001	 bne         |$LN21@gz_open|

; 163  :             case 'F':
; 164  :                 state->strategy = Z_FIXED;

  000c0	b9005e6d	 str         w13,[x19,#0x5C]

; 165  :                 break;

  000c4	1400001c	 b           |$LN21@gz_open|
  000c8		 |$LN18@gz_open|

; 159  :                 break;
; 160  :             case 'R':
; 161  :                 state->strategy = Z_RLE;

  000c8	b9005e6e	 str         w14,[x19,#0x5C]

; 162  :                 break;

  000cc	1400001a	 b           |$LN21@gz_open|
  000d0		 |$LN39@gz_open|

; 126  :         else
; 127  :             switch (*mode) {

  000d0	7101515f	 cmp         w10,#0x54
  000d4	54000000	 beq         |$LN20@gz_open|
  000d8	7101855f	 cmp         w10,#0x61
  000dc	54000001	 bne         |$LN21@gz_open|

; 135  :             case 'a':
; 136  :                 state->mode = GZ_APPEND;

  000e0	b9001a6c	 str         w12,[x19,#0x18]

; 137  :                 break;

  000e4	14000014	 b           |$LN21@gz_open|
  000e8		 |$LN20@gz_open|

; 166  :             case 'T':
; 167  :                 state->direct = 1;

  000e8	b900426c	 str         w12,[x19,#0x40]

; 168  :                 break;

  000ec	14000012	 b           |$LN21@gz_open|
  000f0		 |$LN16@gz_open|

; 153  : #endif
; 154  :             case 'f':
; 155  :                 state->strategy = Z_FILTERED;

  000f0	b9005e6c	 str         w12,[x19,#0x5C]

; 156  :                 break;

  000f4	14000010	 b           |$LN21@gz_open|
  000f8		 |$LN38@gz_open|

; 126  :         else
; 127  :             switch (*mode) {

  000f8	5101a14b	 sub         w11,w10,#0x68
  000fc	7100417f	 cmp         w11,#0x10
  00100	54000008	 bhi         |$LN21@gz_open|
  00104	100012e9	 adr         x9,__swt
  00108	b8ab5928	 ldrsw       x8,[x9,w11 uxtw #2]
  0010c	100000a9	 adr         x9,|$LN62@gz_open|
  00110	8b080928	 add         x8,x9,x8,lsl #2
  00114	d61f0100	 br          x8
  00118		 |$LN10@gz_open|

; 128  :             case 'r':
; 129  :                 state->mode = GZ_READ;

  00118	b9001a6f	 str         w15,[x19,#0x18]

; 130  :                 break;

  0011c	14000006	 b           |$LN21@gz_open|
  00120		 |$LN11@gz_open|
  00120		 |$LN62@gz_open|

; 131  : #ifndef NO_GZCOMPRESS
; 132  :             case 'w':
; 133  :                 state->mode = GZ_WRITE;

  00120	b9001a78	 str         w24,[x19,#0x18]

; 134  :                 break;

  00124	14000004	 b           |$LN21@gz_open|
  00128		 |$LN15@gz_open|

; 138  : #endif
; 139  :             case '+':       /* can't read and write at the same time */
; 140  :                 free(state);
; 141  :                 return NULL;
; 142  :             case 'b':       /* ignore -- will request binary anyway */
; 143  :                 break;
; 144  : #ifdef O_CLOEXEC
; 145  :             case 'e':
; 146  :                 cloexec = 1;
; 147  :                 break;
; 148  : #endif
; 149  : #ifdef O_EXCL
; 150  :             case 'x':
; 151  :                 exclusive = 1;

  00128	52800037	 mov         w23,#1

; 152  :                 break;

  0012c	14000002	 b           |$LN21@gz_open|
  00130		 |$LN17@gz_open|

; 157  :             case 'h':
; 158  :                 state->strategy = Z_HUFFMAN_ONLY;

  00130	b9005e67	 str         w7,[x19,#0x5C]
  00134		 |$LN21@gz_open|

; 123  :     while (*mode) {

  00134	38c01e8a	 ldrsb       w10,[x20,#1]!
  00138	3500000a	 cbnz        w10,|$LL2@gz_open|

; 169  :             default:        /* could consider as an error, but just ignore */
; 170  :                 ;
; 171  :             }
; 172  :         mode++;
; 173  :     }
; 174  : 
; 175  :     /* must provide an "r", "w", or "a" */
; 176  :     if (state->mode == GZ_NONE) {

  0013c	b9401a68	 ldr         w8,[x19,#0x18]
  00140	34000008	 cbz         w8,|$LN57@gz_open|

; 177  :         free(state);
; 178  :         return NULL;
; 179  :     }
; 180  : 
; 181  :     /* can't force transparent read */
; 182  :     if (state->mode == GZ_READ) {

  00144	528389e9	 mov         w9,#0x1C4F
  00148	6b09011f	 cmp         w8,w9
  0014c	54000001	 bne         |$LN23@gz_open|

; 183  :         if (state->direct) {

  00150	b9404268	 ldr         w8,[x19,#0x40]
  00154	35000008	 cbnz        w8,|$LN57@gz_open|

; 184  :             free(state);
; 185  :             return NULL;
; 186  :         }
; 187  :         state->direct = 1;      /* for empty file */

  00158	b900426c	 str         w12,[x19,#0x40]
  0015c		 |$LN23@gz_open|

; 188  :     }
; 189  : 
; 190  :     /* save the path name for error messages */
; 191  : #ifdef WIDECHAR
; 192  :     if (fd == -2) {

  0015c	31000abf	 cmn         w21,#2
  00160	54000001	 bne         |$LN25@gz_open|

; 193  :         len = wcstombs(NULL, path, 0);

  00164	90000008	 adrp        x8,__imp_wcstombs
  00168	f9400108	 ldr         x8,[x8,PageOffset(__imp_wcstombs)]
  0016c	d2800002	 mov         x2,#0
  00170	aa1603e1	 mov         x1,x22
  00174	d2800000	 mov         x0,#0
  00178	d63f0100	 blr         x8
  0017c	aa0003f4	 mov         x20,x0

; 194  :         if (len == (z_size_t)-1)

  00180	b100069f	 cmn         x20,#1
  00184	54000001	 bne         |$LN26@gz_open|

; 195  :             len = 0;

  00188	d2800014	 mov         x20,#0

; 196  :     }

  0018c	14000007	 b           |$LN26@gz_open|
  00190		 |$LN25@gz_open|

; 197  :     else
; 198  : #endif
; 199  :         len = strlen((const char *)path);

  00190	39c002c8	 ldrsb       w8,[x22]
  00194	aa1603e9	 mov         x9,x22
  00198	34000008	 cbz         w8,|$LN40@gz_open|
  0019c		 |$LL41@gz_open|
  0019c	38c01d28	 ldrsb       w8,[x9,#1]!
  001a0	35000008	 cbnz        w8,|$LL41@gz_open|
  001a4		 |$LN40@gz_open|
  001a4	cb160134	 sub         x20,x9,x22
  001a8		 |$LN26@gz_open|

; 200  :     state->path = (char *)malloc(len + 1);

  001a8	90000008	 adrp        x8,__imp_malloc
  001ac	f9400108	 ldr         x8,[x8,PageOffset(__imp_malloc)]
  001b0	91000680	 add         x0,x20,#1
  001b4	d63f0100	 blr         x8
  001b8	f9001260	 str         x0,[x19,#0x20]

; 201  :     if (state->path == NULL) {

  001bc	b4000000	 cbz         x0,|$LN57@gz_open|

; 202  :         free(state);
; 203  :         return NULL;
; 204  :     }
; 205  : #ifdef WIDECHAR
; 206  :     if (fd == -2)

  001c0	31000abf	 cmn         w21,#2
  001c4	54000001	 bne         |$LN29@gz_open|

; 207  :         if (len)

  001c8	b4000014	 cbz         x20,|$LN31@gz_open|

; 208  :             wcstombs(state->path, path, len + 1);

  001cc	90000008	 adrp        x8,__imp_wcstombs
  001d0	f9400108	 ldr         x8,[x8,PageOffset(__imp_wcstombs)]
  001d4	91000682	 add         x2,x20,#1
  001d8	aa1603e1	 mov         x1,x22
  001dc	d63f0100	 blr         x8
  001e0	14000008	 b           |$LN30@gz_open|
  001e4		 |$LN31@gz_open|

; 209  :         else
; 210  :             *(state->path) = 0;

  001e4	3900001f	 strb        wzr,[x0]
  001e8	14000006	 b           |$LN30@gz_open|
  001ec		 |$LN29@gz_open|

; 211  :     else
; 212  : #endif
; 213  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 214  :         (void)snprintf(state->path, len + 1, "%s", (const char *)path);

  001ec	90000008	 adrp        x8,|??_C@_02DKCKIIND@?$CFs@|
  001f0	91000102	 add         x2,x8,PageOffset(|??_C@_02DKCKIIND@?$CFs@|)
  001f4	aa1603e3	 mov         x3,x22
  001f8	91000681	 add         x1,x20,#1
  001fc	94000000	 bl          snprintf
  00200		 |$LN30@gz_open|

; 215  : #else
; 216  :         strcpy(state->path, path);
; 217  : #endif
; 218  : 
; 219  :     /* compute the flags for open() */
; 220  :     oflag =

  00200	b9401a68	 ldr         w8,[x19,#0x18]
  00204	528389e9	 mov         w9,#0x1C4F
  00208	6b09011f	 cmp         w8,w9
  0020c	54000001	 bne         |$LN42@gz_open|
  00210	52800008	 mov         w8,#0
  00214	1400000b	 b           |$LN43@gz_open|
  00218		 |$LN42@gz_open|
  00218	528f3629	 mov         w9,#0x79B1
  0021c	6b09011f	 cmp         w8,w9
  00220	5280400b	 mov         w11,#0x200
  00224	5280010a	 mov         w10,#8
  00228	1a8a0169	 cseleq      w9,w11,w10
  0022c	710002ff	 cmp         w23,#0
  00230	5280a02c	 mov         w12,#0x501
  00234	52802028	 mov         w8,#0x101
  00238	1a881188	 cselne      w8,w12,w8
  0023c	2a080128	 orr         w8,w9,w8
  00240		 |$LN43@gz_open|
  00240	32110101	 orr         w1,w8,#0x8000

; 221  : #ifdef O_LARGEFILE
; 222  :         O_LARGEFILE |
; 223  : #endif
; 224  : #ifdef O_BINARY
; 225  :         O_BINARY |
; 226  : #endif
; 227  : #ifdef O_CLOEXEC
; 228  :         (cloexec ? O_CLOEXEC : 0) |
; 229  : #endif
; 230  :         (state->mode == GZ_READ ?
; 231  :          O_RDONLY :
; 232  :          (O_WRONLY | O_CREAT |
; 233  : #ifdef O_EXCL
; 234  :           (exclusive ? O_EXCL : 0) |
; 235  : #endif
; 236  :           (state->mode == GZ_WRITE ?
; 237  :            O_TRUNC :
; 238  :            O_APPEND)));
; 239  : 
; 240  :     /* open the file with the appropriate flags (or just use fd) */
; 241  :     state->fd = fd > -1 ? fd : (

  00244	310006bf	 cmn         w21,#1
  00248	5400000d	 ble         |$LN46@gz_open|
  0024c	b9001e75	 str         w21,[x19,#0x1C]
  00250	2a1503e0	 mov         w0,w21
  00254		 |$LN33@gz_open|

; 248  :         free(state);
; 249  :         return NULL;
; 250  :     }
; 251  :     if (state->mode == GZ_APPEND) {

  00254	b9401a68	 ldr         w8,[x19,#0x18]
  00258	7100051f	 cmp         w8,#1
  0025c	54000001	 bne         |$LN34@gz_open|

; 252  :         LSEEK(state->fd, 0, SEEK_END);  /* so gzoffset() is correct */

  00260	90000008	 adrp        x8,__imp__lseeki64
  00264	f9400108	 ldr         x8,[x8,PageOffset(__imp__lseeki64)]
  00268	52800042	 mov         w2,#2
  0026c	d2800001	 mov         x1,#0
  00270	d63f0100	 blr         x8

; 260  :     }
; 261  : 
; 262  :     /* initialize stream */
; 263  :     gz_reset(state);

  00274	aa1303e0	 mov         x0,x19
  00278	b9001a78	 str         w24,[x19,#0x18]
  0027c	94000000	 bl          gz_reset

; 264  : 
; 265  :     /* return stream */
; 266  :     return (gzFile)state;

  00280	aa1303e0	 mov         x0,x19
  00284	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00288	a94263f7	 ldp         x23,x24,[sp,#0x20]
  0028c	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00290	a8c353f3	 ldp         x19,x20,[sp],#0x30
  00294	d65f03c0	 ret
  00298		 |$LN46@gz_open|

; 221  : #ifdef O_LARGEFILE
; 222  :         O_LARGEFILE |
; 223  : #endif
; 224  : #ifdef O_BINARY
; 225  :         O_BINARY |
; 226  : #endif
; 227  : #ifdef O_CLOEXEC
; 228  :         (cloexec ? O_CLOEXEC : 0) |
; 229  : #endif
; 230  :         (state->mode == GZ_READ ?
; 231  :          O_RDONLY :
; 232  :          (O_WRONLY | O_CREAT |
; 233  : #ifdef O_EXCL
; 234  :           (exclusive ? O_EXCL : 0) |
; 235  : #endif
; 236  :           (state->mode == GZ_WRITE ?
; 237  :            O_TRUNC :
; 238  :            O_APPEND)));
; 239  : 
; 240  :     /* open the file with the appropriate flags (or just use fd) */
; 241  :     state->fd = fd > -1 ? fd : (

  00298	31000abf	 cmn         w21,#2
  0029c	528036c2	 mov         w2,#0x1B6
  002a0	aa1603e0	 mov         x0,x22
  002a4	54000001	 bne         |$LN44@gz_open|
  002a8	90000008	 adrp        x8,__imp__wopen
  002ac	f9400108	 ldr         x8,[x8,PageOffset(__imp__wopen)]
  002b0	14000003	 b           |$LN59@gz_open|
  002b4		 |$LN44@gz_open|
  002b4	90000008	 adrp        x8,__imp__open
  002b8	f9400108	 ldr         x8,[x8,PageOffset(__imp__open)]
  002bc		 |$LN59@gz_open|
  002bc	d63f0100	 blr         x8
  002c0	2a0003f5	 mov         w21,w0

; 242  : #ifdef WIDECHAR
; 243  :         fd == -2 ? _wopen(path, oflag, 0666) :
; 244  : #endif
; 245  :         open((const char *)path, oflag, 0666));
; 246  :     if (state->fd == -1) {

  002c4	2a1503e0	 mov         w0,w21
  002c8	b9001e75	 str         w21,[x19,#0x1C]
  002cc	3100041f	 cmn         w0,#1
  002d0	54000001	 bne         |$LN33@gz_open|

; 247  :         free(state->path);

  002d4	90000008	 adrp        x8,__imp_free
  002d8	f9400108	 ldr         x8,[x8,PageOffset(__imp_free)]
  002dc	f9401260	 ldr         x0,[x19,#0x20]
  002e0	d63f0100	 blr         x8
  002e4		 |$LN57@gz_open|

; 267  : }

  002e4	90000008	 adrp        x8,__imp_free
  002e8	f9400108	 ldr         x8,[x8,PageOffset(__imp_free)]
  002ec	aa1303e0	 mov         x0,x19
  002f0	d63f0100	 blr         x8
  002f4		 |$LN58@gz_open|
  002f4	d2800000	 mov         x0,#0
  002f8	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  002fc	a94263f7	 ldp         x23,x24,[sp,#0x20]
  00300	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00304	a8c353f3	 ldp         x19,x20,[sp],#0x30
  00308	d65f03c0	 ret
  0030c		 |$LN34@gz_open|

; 253  :         state->mode = GZ_WRITE;         /* simplify later checks */
; 254  :     }
; 255  : 
; 256  :     /* save the current position for rewinding (only if reading) */
; 257  :     if (state->mode == GZ_READ) {

  0030c	528389e9	 mov         w9,#0x1C4F
  00310	6b09011f	 cmp         w8,w9
  00314	54000001	 bne         |$LN36@gz_open|

; 258  :         state->start = LSEEK(state->fd, 0, SEEK_CUR);

  00318	90000008	 adrp        x8,__imp__lseeki64
  0031c	f9400108	 ldr         x8,[x8,PageOffset(__imp__lseeki64)]
  00320	52800022	 mov         w2,#1
  00324	d2800001	 mov         x1,#0
  00328	2a1503e0	 mov         w0,w21
  0032c	d63f0100	 blr         x8
  00330	f9002660	 str         x0,[x19,#0x48]

; 259  :         if (state->start == -1) state->start = 0;

  00334	b100041f	 cmn         x0,#1
  00338	54000001	 bne         |$LN36@gz_open|
  0033c	f900267f	 str         xzr,[x19,#0x48]
  00340		 |$LN36@gz_open|

; 260  :     }
; 261  : 
; 262  :     /* initialize stream */
; 263  :     gz_reset(state);

  00340	aa1303e0	 mov         x0,x19
  00344	94000000	 bl          gz_reset

; 264  : 
; 265  :     /* return stream */
; 266  :     return (gzFile)state;

  00348	aa1303e0	 mov         x0,x19
  0034c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00350	a94263f7	 ldp         x23,x24,[sp,#0x20]
  00354	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00358	a8c353f3	 ldp         x19,x20,[sp],#0x30
  0035c	d65f03c0	 ret
  00360		 |__swt|
  00360		 |$LN63@gz_open|

; 126  :         else
; 127  :             switch (*mode) {

  00360	00000004	 DCD         0x4
  00364		 |$LN64@gz_open|
  00364	00000005	 DCD         0x5
  00368		 |$LN65@gz_open|
  00368	00000005	 DCD         0x5
  0036c		 |$LN66@gz_open|
  0036c	00000005	 DCD         0x5
  00370		 |$LN67@gz_open|
  00370	00000005	 DCD         0x5
  00374		 |$LN68@gz_open|
  00374	00000005	 DCD         0x5
  00378		 |$LN69@gz_open|
  00378	00000005	 DCD         0x5
  0037c		 |$LN70@gz_open|
  0037c	00000005	 DCD         0x5
  00380		 |$LN71@gz_open|
  00380	00000005	 DCD         0x5
  00384		 |$LN72@gz_open|
  00384	00000005	 DCD         0x5
  00388		 |$LN73@gz_open|
  00388	fffffffe	 DCD         0xfffffffe
  0038c		 |$LN74@gz_open|
  0038c	00000005	 DCD         0x5
  00390		 |$LN75@gz_open|
  00390	00000005	 DCD         0x5
  00394		 |$LN76@gz_open|
  00394	00000005	 DCD         0x5
  00398		 |$LN77@gz_open|
  00398	00000005	 DCD         0x5
  0039c		 |$LN78@gz_open|
  0039c	00000000	 DCD         0x0
  003a0		 |$LN79@gz_open|
  003a0	00000002	 DCD         0x2

			 ENDP  ; |gz_open|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzlib.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gzopen| PROC

; 274  :     return gz_open(path, -1, mode);

  00000	aa0103e2	 mov         x2,x1
  00004	12800001	 mov         w1,#-1
  00008	14000000	 b           gz_open

			 ENDP  ; |gzopen|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzlib.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gzopen64| PROC

; 282  :     return gz_open(path, -1, mode);

  00000	aa0103e2	 mov         x2,x1
  00004	12800001	 mov         w1,#-1
  00008	14000000	 b           gz_open

			 ENDP  ; |gzopen64|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzlib.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gzdopen| PROC

; 289  : {

  00000		 |$LN6|
  00000	a9be53f3	 stp         x19,x20,[sp,#-0x20]!
  00004	f9000bf5	 str         x21,[sp,#0x10]
  00008	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  0000c	910003fd	 mov         fp,sp
  00010	2a0003f3	 mov         w19,w0

; 290  :     char *path;         /* identifier for error messages */
; 291  :     gzFile gz;
; 292  : 
; 293  :     if (fd == -1 || (path = (char *)malloc(7 + 3 * sizeof(int))) == NULL)

  00014	3100067f	 cmn         w19,#1
  00018	aa0103f5	 mov         x21,x1
  0001c	54000000	 beq         |$LN3@gzdopen|
  00020	90000008	 adrp        x8,__imp_malloc
  00024	f9400108	 ldr         x8,[x8,PageOffset(__imp_malloc)]
  00028	d2800260	 mov         x0,#0x13
  0002c	d63f0100	 blr         x8
  00030	aa0003f4	 mov         x20,x0
  00034	b4000014	 cbz         x20,|$LN3@gzdopen|

; 295  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 296  :     (void)snprintf(path, 7 + 3 * sizeof(int), "<fd:%d>", fd);

  00038	90000008	 adrp        x8,|??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO@|
  0003c	91000102	 add         x2,x8,PageOffset(|??_C@_07EBNKNFJN@?$DMfd?3?$CFd?$DO@|)
  00040	2a1303e3	 mov         w3,w19
  00044	d2800261	 mov         x1,#0x13
  00048	94000000	 bl          snprintf

; 297  : #else
; 298  :     sprintf(path, "<fd:%d>", fd);   /* for debugging */
; 299  : #endif
; 300  :     gz = gz_open(path, fd, mode);

  0004c	aa1503e2	 mov         x2,x21
  00050	2a1303e1	 mov         w1,w19
  00054	aa1403e0	 mov         x0,x20
  00058	94000000	 bl          gz_open

; 301  :     free(path);

  0005c	90000008	 adrp        x8,__imp_free
  00060	f9400108	 ldr         x8,[x8,PageOffset(__imp_free)]
  00064	aa0003f3	 mov         x19,x0
  00068	aa1403e0	 mov         x0,x20
  0006c	d63f0100	 blr         x8

; 302  :     return gz;

  00070	aa1303e0	 mov         x0,x19
  00074	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00078	f9400bf5	 ldr         x21,[sp,#0x10]
  0007c	a8c253f3	 ldp         x19,x20,[sp],#0x20
  00080	d65f03c0	 ret
  00084		 |$LN3@gzdopen|

; 294  :         return NULL;

  00084	d2800000	 mov         x0,#0
  00088	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0008c	f9400bf5	 ldr         x21,[sp,#0x10]
  00090	a8c253f3	 ldp         x19,x20,[sp],#0x20
  00094	d65f03c0	 ret

			 ENDP  ; |gzdopen|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzlib.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gzopen_w| PROC

; 311  :     return gz_open(path, -2, mode);

  00000	aa0103e2	 mov         x2,x1
  00004	12800021	 mov         w1,#-2
  00008	14000000	 b           gz_open

			 ENDP  ; |gzopen_w|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzlib.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gzbuffer| PROC

; 320  :     gz_statep state;
; 321  : 
; 322  :     /* get internal structure and check integrity */
; 323  :     if (file == NULL)

  00000	b4000000	 cbz         x0,|$LN8@gzbuffer|

; 324  :         return -1;
; 325  :     state = (gz_statep)file;
; 326  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00004	b9401808	 ldr         w8,[x0,#0x18]
  00008	528389e9	 mov         w9,#0x1C4F
  0000c	6b09011f	 cmp         w8,w9
  00010	54000000	 beq         |$LN3@gzbuffer|
  00014	528f3629	 mov         w9,#0x79B1
  00018	6b09011f	 cmp         w8,w9
  0001c	54000001	 bne         |$LN8@gzbuffer|
  00020		 |$LN3@gzbuffer|

; 327  :         return -1;
; 328  : 
; 329  :     /* make sure we haven't already allocated memory */
; 330  :     if (state->size != 0)

  00020	b9402808	 ldr         w8,[x0,#0x28]
  00024	35000008	 cbnz        w8,|$LN8@gzbuffer|

; 331  :         return -1;
; 332  : 
; 333  :     /* check and set requested size */
; 334  :     if ((size << 1) < size)

  00028	6b01043f	 cmp         w1,w1,lsl #1
  0002c	54000008	 bhi         |$LN8@gzbuffer|

; 336  :     if (size < 2)
; 337  :         size = 2;               /* need two bytes to check magic header */
; 338  :     state->want = size;

  00030	7100083f	 cmp         w1,#2
  00034	52800048	 mov         w8,#2
  00038	1a882028	 cselhs      w8,w1,w8
  0003c	b9002c08	 str         w8,[x0,#0x2C]

; 339  :     return 0;

  00040	52800000	 mov         w0,#0
  00044	d65f03c0	 ret
  00048		 |$LN8@gzbuffer|

; 335  :         return -1;              /* need to be able to double it */

  00048	12800000	 mov         w0,#-1
  0004c	d65f03c0	 ret

			 ENDP  ; |gzbuffer|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzlib.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gzrewind| PROC

; 345  : {

  00000		 |$LN8|
  00000	f81f0ff3	 str         x19,[sp,#-0x10]!
  00004	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00008	910003fd	 mov         fp,sp
  0000c	aa0003f3	 mov         x19,x0

; 346  :     gz_statep state;
; 347  : 
; 348  :     /* get internal structure */
; 349  :     if (file == NULL)

  00010	b4000013	 cbz         x19,|$LN4@gzrewind|

; 350  :         return -1;
; 351  :     state = (gz_statep)file;
; 352  : 
; 353  :     /* check that we're reading and that there's no error */
; 354  :     if (state->mode != GZ_READ ||

  00014	b9401a68	 ldr         w8,[x19,#0x18]
  00018	528389e9	 mov         w9,#0x1C4F
  0001c	6b09011f	 cmp         w8,w9
  00020	54000001	 bne         |$LN4@gzrewind|
  00024	b9406e68	 ldr         w8,[x19,#0x6C]
  00028	34000008	 cbz         w8,|$LN3@gzrewind|
  0002c	3100151f	 cmn         w8,#5
  00030	54000001	 bne         |$LN4@gzrewind|
  00034		 |$LN3@gzrewind|

; 357  : 
; 358  :     /* back up and start over */
; 359  :     if (LSEEK(state->fd, state->start, SEEK_SET) == -1)

  00034	90000008	 adrp        x8,__imp__lseeki64
  00038	f9400108	 ldr         x8,[x8,PageOffset(__imp__lseeki64)]
  0003c	f9402661	 ldr         x1,[x19,#0x48]
  00040	b9401e60	 ldr         w0,[x19,#0x1C]
  00044	52800002	 mov         w2,#0
  00048	d63f0100	 blr         x8
  0004c	b100041f	 cmn         x0,#1
  00050	54000000	 beq         |$LN4@gzrewind|

; 360  :         return -1;
; 361  :     gz_reset(state);

  00054	aa1303e0	 mov         x0,x19
  00058	94000000	 bl          gz_reset

; 362  :     return 0;

  0005c	52800000	 mov         w0,#0
  00060	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00064	f84107f3	 ldr         x19,[sp],#0x10
  00068	d65f03c0	 ret
  0006c		 |$LN4@gzrewind|

; 355  :             (state->err != Z_OK && state->err != Z_BUF_ERROR))
; 356  :         return -1;

  0006c	12800000	 mov         w0,#-1
  00070	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00074	f84107f3	 ldr         x19,[sp],#0x10
  00078	d65f03c0	 ret

			 ENDP  ; |gzrewind|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzlib.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gzseek64| PROC

; 370  : {

  00000		 |$LN27|
  00000	a9bf53f3	 stp         x19,x20,[sp,#-0x10]!
  00004	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00008	910003fd	 mov         fp,sp
  0000c	aa0003f3	 mov         x19,x0
  00010	aa0103f4	 mov         x20,x1

; 371  :     unsigned n;
; 372  :     z_off64_t ret;
; 373  :     gz_statep state;
; 374  : 
; 375  :     /* get internal structure and check integrity */
; 376  :     if (file == NULL)

  00014	b4000013	 cbz         x19,|$LN25@gzseek64|

; 377  :         return -1;
; 378  :     state = (gz_statep)file;
; 379  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00018	b9401a69	 ldr         w9,[x19,#0x18]
  0001c	528389e8	 mov         w8,#0x1C4F
  00020	6b08013f	 cmp         w9,w8
  00024	54000000	 beq         |$LN23@gzseek64|
  00028	528f3628	 mov         w8,#0x79B1
  0002c	6b08013f	 cmp         w9,w8
  00030	54000001	 bne         |$LN25@gzseek64|
  00034		 |$LN23@gzseek64|

; 380  :         return -1;
; 381  : 
; 382  :     /* check that there's no error */
; 383  :     if (state->err != Z_OK && state->err != Z_BUF_ERROR)

  00034	b9406e68	 ldr         w8,[x19,#0x6C]
  00038	34000008	 cbz         w8,|$LN4@gzseek64|
  0003c	3100151f	 cmn         w8,#5
  00040	54000001	 bne         |$LN25@gzseek64|
  00044		 |$LN4@gzseek64|

; 384  :         return -1;
; 385  : 
; 386  :     /* can only seek from start or relative to current position */
; 387  :     if (whence != SEEK_SET && whence != SEEK_CUR)

  00044	34000002	 cbz         w2,|$LN22@gzseek64|
  00048	7100045f	 cmp         w2,#1
  0004c	54000001	 bne         |$LN25@gzseek64|

; 393  :     else if (state->seek)

  00050	b9406a68	 ldr         w8,[x19,#0x68]
  00054	34000008	 cbz         w8,|$LN8@gzseek64|

; 394  :         offset += state->skip;

  00058	f9403268	 ldr         x8,[x19,#0x60]
  0005c	8b140114	 add         x20,x8,x20
  00060	14000003	 b           |$LN8@gzseek64|
  00064		 |$LN22@gzseek64|

; 388  :         return -1;
; 389  : 
; 390  :     /* normalize offset to a SEEK_CUR specification */
; 391  :     if (whence == SEEK_SET)
; 392  :         offset -= state->x.pos;

  00064	f9400a68	 ldr         x8,[x19,#0x10]
  00068	cb080294	 sub         x20,x20,x8
  0006c		 |$LN8@gzseek64|

; 395  :     state->seek = 0;
; 396  : 
; 397  :     /* if within raw area while reading, just go there */
; 398  :     if (state->mode == GZ_READ && state->how == COPY &&

  0006c	528389e8	 mov         w8,#0x1C4F
  00070	b9006a7f	 str         wzr,[x19,#0x68]
  00074	6b08013f	 cmp         w9,w8
  00078	54000001	 bne         |$LN9@gzseek64|
  0007c	b9404668	 ldr         w8,[x19,#0x44]
  00080	7100051f	 cmp         w8,#1
  00084	54000001	 bne         |$LN9@gzseek64|
  00088	f9400a68	 ldr         x8,[x19,#0x10]
  0008c	8b14010a	 add         x10,x8,x20
  00090	b7f8000a	 tbnz        x10,#0x3F,|$LN9@gzseek64|

; 399  :             state->x.pos + offset >= 0) {
; 400  :         ret = LSEEK(state->fd, offset - state->x.have, SEEK_CUR);

  00094	f100015f	 cmp         x10,#0
  00098	9a9fa14a	 cselge      x10,x10,xzr
  0009c	d503229f	 csdb
  000a0	b9400268	 ldr         w8,[x19]
  000a4	b9401e60	 ldr         w0,[x19,#0x1C]
  000a8	52800022	 mov         w2,#1
  000ac	cb284281	 sub         x1,x20,w8,uxtw #0
  000b0	90000008	 adrp        x8,__imp__lseeki64
  000b4	f9400108	 ldr         x8,[x8,PageOffset(__imp__lseeki64)]
  000b8	d63f0100	 blr         x8

; 401  :         if (ret == -1)

  000bc	b100041f	 cmn         x0,#1
  000c0	54000000	 beq         |$LN25@gzseek64|

; 402  :             return -1;
; 403  :         state->x.have = 0;
; 404  :         state->eof = 0;
; 405  :         state->past = 0;
; 406  :         state->seek = 0;
; 407  :         gz_error(state, Z_OK, NULL);

  000c4	d2800002	 mov         x2,#0
  000c8	b900027f	 str         wzr,[x19]
  000cc	52800001	 mov         w1,#0
  000d0	f9002a7f	 str         xzr,[x19,#0x50]
  000d4	aa1303e0	 mov         x0,x19
  000d8	b9006a7f	 str         wzr,[x19,#0x68]
  000dc	94000000	 bl          gz_error

; 408  :         state->strm.avail_in = 0;
; 409  :         state->x.pos += offset;

  000e0	f9400a68	 ldr         x8,[x19,#0x10]
  000e4	b900827f	 str         wzr,[x19,#0x80]
  000e8	8b140100	 add         x0,x8,x20
  000ec	f9000a60	 str         x0,[x19,#0x10]
  000f0	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000f4	a8c153f3	 ldp         x19,x20,[sp],#0x10
  000f8	d65f03c0	 ret
  000fc		 |$LN9@gzseek64|

; 410  :         return state->x.pos;
; 411  :     }
; 412  : 
; 413  :     /* calculate skip amount, rewinding if needed for back seek when reading */
; 414  :     if (offset < 0) {

  000fc	b6f80014	 tbz         x20,#0x3F,|$LN20@gzseek64|

; 415  :         if (state->mode != GZ_READ)         /* writing -- can't go backwards */

  00100	528389e8	 mov         w8,#0x1C4F
  00104	6b08013f	 cmp         w9,w8
  00108	54000001	 bne         |$LN25@gzseek64|

; 416  :             return -1;
; 417  :         offset += state->x.pos;

  0010c	f9400a68	 ldr         x8,[x19,#0x10]
  00110	8b140114	 add         x20,x8,x20

; 418  :         if (offset < 0)                     /* before start of file! */

  00114	b7f80014	 tbnz        x20,#0x3F,|$LN25@gzseek64|

; 419  :             return -1;
; 420  :         if (gzrewind(file) == -1)           /* rewind, then skip to offset */

  00118	aa1303e0	 mov         x0,x19
  0011c	94000000	 bl          gzrewind
  00120	3100041f	 cmn         w0,#1
  00124	54000000	 beq         |$LN25@gzseek64|
  00128		 |$LN20@gzseek64|

; 422  :     }
; 423  : 
; 424  :     /* if reading, skip what's in output buffer (one less gzgetc() check) */
; 425  :     if (state->mode == GZ_READ) {

  00128	b9401a68	 ldr         w8,[x19,#0x18]
  0012c	528389e9	 mov         w9,#0x1C4F
  00130	6b09011f	 cmp         w8,w9
  00134	54000001	 bne         |$LN24@gzseek64|

; 426  :         n = GT_OFF(state->x.have) || (z_off64_t)state->x.have > offset ?

  00138	b9400269	 ldr         w9,[x19]

; 427  :             (unsigned)offset : state->x.have;
; 428  :         state->x.have -= n;

  0013c	eb29429f	 cmp         x20,w9,uxtw #0
  00140	1a89328b	 csello      w11,w20,w9
  00144	4b0b0128	 sub         w8,w9,w11

; 429  :         state->x.next += n;

  00148	f9400669	 ldr         x9,[x19,#8]

; 430  :         state->x.pos += n;
; 431  :         offset -= n;

  0014c	cb2b4294	 sub         x20,x20,w11,uxtw #0
  00150	b9000268	 str         w8,[x19]
  00154	f9400a68	 ldr         x8,[x19,#0x10]
  00158	8b2b412a	 add         x10,x9,w11,uxtw #0
  0015c	8b2b4109	 add         x9,x8,w11,uxtw #0
  00160	a900a66a	 stp         x10,x9,[x19,#8]
  00164		 |$LN24@gzseek64|

; 432  :     }
; 433  : 
; 434  :     /* request skip (if not zero) */
; 435  :     if (offset) {

  00164	b4000014	 cbz         x20,|$LN16@gzseek64|

; 436  :         state->seek = 1;

  00168	52800028	 mov         w8,#1

; 437  :         state->skip = offset;

  0016c	f9003274	 str         x20,[x19,#0x60]
  00170	b9006a68	 str         w8,[x19,#0x68]
  00174		 |$LN16@gzseek64|

; 438  :     }
; 439  :     return state->x.pos + offset;

  00174	f9400a68	 ldr         x8,[x19,#0x10]
  00178	8b140100	 add         x0,x8,x20
  0017c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00180	a8c153f3	 ldp         x19,x20,[sp],#0x10
  00184	d65f03c0	 ret
  00188		 |$LN25@gzseek64|

; 421  :             return -1;

  00188	92800000	 mov         x0,#-1
  0018c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00190	a8c153f3	 ldp         x19,x20,[sp],#0x10
  00194	d65f03c0	 ret

			 ENDP  ; |gzseek64|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzlib.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gzseek| PROC

; 447  : {

  00000		 |$LN4|
  00000	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00004	910003fd	 mov         fp,sp

; 448  :     z_off64_t ret;
; 449  : 
; 450  :     ret = gzseek64(file, (z_off64_t)offset, whence);

  00008	93407c21	 sxtw        x1,w1
  0000c	94000000	 bl          gzseek64

; 451  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  00010	12800009	 mov         w9,#-1
  00014	eb20c01f	 cmp         x0,w0,sxtw #0
  00018	1a890000	 cseleq      w0,w0,w9
  0001c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00020	d65f03c0	 ret

			 ENDP  ; |gzseek|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzlib.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gztell64| PROC

; 458  :     gz_statep state;
; 459  : 
; 460  :     /* get internal structure and check integrity */
; 461  :     if (file == NULL)

  00000	b4000000	 cbz         x0,|$LN7@gztell64|

; 462  :         return -1;
; 463  :     state = (gz_statep)file;
; 464  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00004	b9401808	 ldr         w8,[x0,#0x18]
  00008	528389e9	 mov         w9,#0x1C4F
  0000c	6b09011f	 cmp         w8,w9
  00010	54000000	 beq         |$LN3@gztell64|
  00014	528f3629	 mov         w9,#0x79B1
  00018	6b09011f	 cmp         w8,w9
  0001c	54000001	 bne         |$LN7@gztell64|
  00020		 |$LN3@gztell64|

; 466  : 
; 467  :     /* return position */
; 468  :     return state->x.pos + (state->seek ? state->skip : 0);

  00020	b9406808	 ldr         w8,[x0,#0x68]
  00024	34000008	 cbz         w8,|$LN5@gztell64|
  00028	f9403009	 ldr         x9,[x0,#0x60]
  0002c	f9400808	 ldr         x8,[x0,#0x10]
  00030	8b090100	 add         x0,x8,x9
  00034	d65f03c0	 ret
  00038		 |$LN5@gztell64|
  00038	f9400808	 ldr         x8,[x0,#0x10]
  0003c	d2800009	 mov         x9,#0
  00040	8b090100	 add         x0,x8,x9
  00044	d65f03c0	 ret
  00048		 |$LN7@gztell64|

; 465  :         return -1;

  00048	92800000	 mov         x0,#-1
  0004c	d65f03c0	 ret

			 ENDP  ; |gztell64|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzlib.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gztell| PROC

; 474  : {

  00000		 |$LN4|
  00000	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00004	910003fd	 mov         fp,sp

; 475  :     z_off64_t ret;
; 476  : 
; 477  :     ret = gztell64(file);

  00008	94000000	 bl          gztell64

; 478  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  0000c	12800008	 mov         w8,#-1
  00010	eb20c01f	 cmp         x0,w0,sxtw #0
  00014	1a880000	 cseleq      w0,w0,w8
  00018	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0001c	d65f03c0	 ret

			 ENDP  ; |gztell|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzlib.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gzoffset64| PROC

; 484  : {

  00000		 |$LN9|
  00000	f81f0ff3	 str         x19,[sp,#-0x10]!
  00004	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00008	910003fd	 mov         fp,sp
  0000c	aa0003f3	 mov         x19,x0

; 485  :     z_off64_t offset;
; 486  :     gz_statep state;
; 487  : 
; 488  :     /* get internal structure and check integrity */
; 489  :     if (file == NULL)

  00010	b4000013	 cbz         x19,|$LN7@gzoffset64|

; 490  :         return -1;
; 491  :     state = (gz_statep)file;
; 492  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00014	b9401a68	 ldr         w8,[x19,#0x18]
  00018	528389e9	 mov         w9,#0x1C4F
  0001c	6b09011f	 cmp         w8,w9
  00020	54000000	 beq         |$LN3@gzoffset64|
  00024	528f3629	 mov         w9,#0x79B1
  00028	6b09011f	 cmp         w8,w9
  0002c	54000001	 bne         |$LN7@gzoffset64|
  00030		 |$LN3@gzoffset64|

; 493  :         return -1;
; 494  : 
; 495  :     /* compute and return effective offset in file */
; 496  :     offset = LSEEK(state->fd, 0, SEEK_CUR);

  00030	90000008	 adrp        x8,__imp__lseeki64
  00034	f9400108	 ldr         x8,[x8,PageOffset(__imp__lseeki64)]
  00038	b9401e60	 ldr         w0,[x19,#0x1C]
  0003c	52800022	 mov         w2,#1
  00040	d2800001	 mov         x1,#0
  00044	d63f0100	 blr         x8

; 497  :     if (offset == -1)

  00048	b100041f	 cmn         x0,#1
  0004c	54000000	 beq         |$LN7@gzoffset64|

; 499  :     if (state->mode == GZ_READ)             /* reading */

  00050	b9401a68	 ldr         w8,[x19,#0x18]
  00054	528389e9	 mov         w9,#0x1C4F
  00058	6b09011f	 cmp         w8,w9
  0005c	54000001	 bne         |$LN1@gzoffset64|

; 500  :         offset -= state->strm.avail_in;     /* don't count buffered input */

  00060	b9408268	 ldr         w8,[x19,#0x80]
  00064	cb284000	 sub         x0,x0,w8,uxtw #0
  00068	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0006c	f84107f3	 ldr         x19,[sp],#0x10
  00070	d65f03c0	 ret
  00074		 |$LN7@gzoffset64|

; 498  :         return -1;

  00074	92800000	 mov         x0,#-1
  00078		 |$LN1@gzoffset64|
  00078	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0007c	f84107f3	 ldr         x19,[sp],#0x10
  00080	d65f03c0	 ret

			 ENDP  ; |gzoffset64|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzlib.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gzoffset| PROC

; 507  : {

  00000		 |$LN4|
  00000	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00004	910003fd	 mov         fp,sp

; 508  :     z_off64_t ret;
; 509  : 
; 510  :     ret = gzoffset64(file);

  00008	94000000	 bl          gzoffset64

; 511  :     return ret == (z_off_t)ret ? (z_off_t)ret : -1;

  0000c	12800009	 mov         w9,#-1
  00010	eb20c01f	 cmp         x0,w0,sxtw #0
  00014	1a890000	 cseleq      w0,w0,w9
  00018	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0001c	d65f03c0	 ret

			 ENDP  ; |gzoffset|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzlib.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gzeof| PROC

; 518  :     gz_statep state;
; 519  : 
; 520  :     /* get internal structure and check integrity */
; 521  :     if (file == NULL)

  00000	b4000000	 cbz         x0,|$LN8@gzeof|

; 522  :         return 0;
; 523  :     state = (gz_statep)file;
; 524  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00004	b9401808	 ldr         w8,[x0,#0x18]
  00008	528389e9	 mov         w9,#0x1C4F
  0000c	6b09011f	 cmp         w8,w9
  00010	54000000	 beq         |$LN7@gzeof|
  00014	528f3629	 mov         w9,#0x79B1
  00018		 |$LN8@gzeof|

; 529  : }

  00018	52800000	 mov         w0,#0
  0001c	d65f03c0	 ret
  00020		 |$LN7@gzeof|

; 525  :         return 0;
; 526  : 
; 527  :     /* return end-of-file state */
; 528  :     return state->mode == GZ_READ ? state->past : 0;

  00020	b9405400	 ldr         w0,[x0,#0x54]
  00024	d65f03c0	 ret

			 ENDP  ; |gzeof|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzlib.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gzerror| PROC

; 536  :     gz_statep state;
; 537  : 
; 538  :     /* get internal structure and check integrity */
; 539  :     if (file == NULL)

  00000	b4000000	 cbz         x0,|$LN10@gzerror|

; 540  :         return NULL;
; 541  :     state = (gz_statep)file;
; 542  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00004	b9401808	 ldr         w8,[x0,#0x18]
  00008	528389e9	 mov         w9,#0x1C4F
  0000c	6b09011f	 cmp         w8,w9
  00010	54000000	 beq         |$LN3@gzerror|
  00014	528f3629	 mov         w9,#0x79B1
  00018	6b09011f	 cmp         w8,w9
  0001c	54000001	 bne         |$LN10@gzerror|
  00020		 |$LN3@gzerror|

; 544  : 
; 545  :     /* return error information */
; 546  :     if (errnum != NULL)

  00020	b4000001	 cbz         x1,|$LN4@gzerror|

; 547  :         *errnum = state->err;

  00024	b9406c08	 ldr         w8,[x0,#0x6C]
  00028	b9000028	 str         w8,[x1]
  0002c		 |$LN4@gzerror|

; 548  :     return state->err == Z_MEM_ERROR ? "out of memory" :

  0002c	b9406c08	 ldr         w8,[x0,#0x6C]
  00030	3100111f	 cmn         w8,#4
  00034	54000001	 bne         |$LN8@gzerror|
  00038	90000008	 adrp        x8,|??_C@_0O@BNNCBLEN@out?5of?5memory@|
  0003c	91000100	 add         x0,x8,PageOffset(|??_C@_0O@BNNCBLEN@out?5of?5memory@|)
  00040	d65f03c0	 ret
  00044		 |$LN8@gzerror|
  00044	f9403809	 ldr         x9,[x0,#0x70]
  00048	90000008	 adrp        x8,|??_C@_00CNPNBAHC@@|
  0004c	91000108	 add         x8,x8,PageOffset(|??_C@_00CNPNBAHC@@|)
  00050	f100013f	 cmp         x9,#0
  00054	9a890100	 cseleq      x0,x8,x9
  00058	d65f03c0	 ret
  0005c		 |$LN10@gzerror|

; 543  :         return NULL;

  0005c	d2800000	 mov         x0,#0
  00060	d65f03c0	 ret

			 ENDP  ; |gzerror|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzlib.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gzclearerr| PROC

; 556  :     gz_statep state;
; 557  : 
; 558  :     /* get internal structure and check integrity */
; 559  :     if (file == NULL)

  00000	b4000000	 cbz         x0,|$LN1@gzclearerr|

; 560  :         return;
; 561  :     state = (gz_statep)file;
; 562  :     if (state->mode != GZ_READ && state->mode != GZ_WRITE)

  00004	b9401808	 ldr         w8,[x0,#0x18]
  00008	528389e9	 mov         w9,#0x1C4F
  0000c	6b09011f	 cmp         w8,w9
  00010	54000000	 beq         |$LN6@gzclearerr|
  00014	528f3629	 mov         w9,#0x79B1
  00018	6b09011f	 cmp         w8,w9
  0001c	54000001	 bne         |$LN1@gzclearerr|

; 568  :         state->past = 0;
; 569  :     }
; 570  :     gz_error(state, Z_OK, NULL);

  00020	d2800002	 mov         x2,#0
  00024	52800001	 mov         w1,#0
  00028	14000000	 b           gz_error
  0002c		 |$LN6@gzclearerr|

; 563  :         return;
; 564  : 
; 565  :     /* clear error and end-of-file */
; 566  :     if (state->mode == GZ_READ) {
; 567  :         state->eof = 0;

  0002c	f900281f	 str         xzr,[x0,#0x50]

; 568  :         state->past = 0;
; 569  :     }
; 570  :     gz_error(state, Z_OK, NULL);

  00030	d2800002	 mov         x2,#0
  00034	52800001	 mov         w1,#0
  00038	14000000	 b           gz_error
  0003c		 |$LN1@gzclearerr|
  0003c	d65f03c0	 ret

			 ENDP  ; |gzclearerr|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzlib.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gz_error| PROC

; 583  : {

  00000		 |$LN34|
  00000	a9be53f3	 stp         x19,x20,[sp,#-0x20]!
  00004	f9000bf5	 str         x21,[sp,#0x10]
  00008	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  0000c	910003fd	 mov         fp,sp
  00010	aa0003f3	 mov         x19,x0

; 584  :     /* free previously allocated message and clear */
; 585  :     if (state->msg != NULL) {

  00014	f9403a60	 ldr         x0,[x19,#0x70]
  00018	2a0103f4	 mov         w20,w1
  0001c	aa0203f5	 mov         x21,x2
  00020	b4000000	 cbz         x0,|$LN2@gz_error|

; 586  :         if (state->err != Z_MEM_ERROR)

  00024	b9406e68	 ldr         w8,[x19,#0x6C]
  00028	3100111f	 cmn         w8,#4
  0002c	54000000	 beq         |$LN3@gz_error|

; 587  :             free(state->msg);

  00030	90000008	 adrp        x8,__imp_free
  00034	f9400108	 ldr         x8,[x8,PageOffset(__imp_free)]
  00038	d63f0100	 blr         x8
  0003c		 |$LN3@gz_error|

; 588  :         state->msg = NULL;

  0003c	f9003a7f	 str         xzr,[x19,#0x70]
  00040		 |$LN2@gz_error|

; 589  :     }
; 590  : 
; 591  :     /* if fatal, set state->x.have to 0 so that the gzgetc() macro fails */
; 592  :     if (err != Z_OK && err != Z_BUF_ERROR)

  00040	34000014	 cbz         w20,|$LN4@gz_error|
  00044	3100169f	 cmn         w20,#5
  00048	54000000	 beq         |$LN4@gz_error|

; 593  :         state->x.have = 0;

  0004c	b900027f	 str         wzr,[x19]
  00050		 |$LN4@gz_error|

; 594  : 
; 595  :     /* set error code, and if no message, then done */
; 596  :     state->err = err;

  00050	b9006e74	 str         w20,[x19,#0x6C]

; 597  :     if (msg == NULL)

  00054	b4000015	 cbz         x21,|$LN1@gz_error|

; 598  :         return;
; 599  : 
; 600  :     /* for an out of memory error, return literal string when requested */
; 601  :     if (err == Z_MEM_ERROR)

  00058	3100129f	 cmn         w20,#4
  0005c	54000000	 beq         |$LN1@gz_error|

; 602  :         return;
; 603  : 
; 604  :     /* construct error message with path */
; 605  :     if ((state->msg = (char *)malloc(strlen(state->path) + strlen(msg) + 3)) ==

  00060	f940126a	 ldr         x10,[x19,#0x20]
  00064	39c00148	 ldrsb       w8,[x10]
  00068	aa0a03e9	 mov         x9,x10
  0006c	34000008	 cbz         w8,|$LN9@gz_error|
  00070		 |$LL10@gz_error|
  00070	38c01d28	 ldrsb       w8,[x9,#1]!
  00074	35000008	 cbnz        w8,|$LL10@gz_error|
  00078		 |$LN9@gz_error|
  00078	cb0a012b	 sub         x11,x9,x10
  0007c	39c002a8	 ldrsb       w8,[x21]
  00080	aa1503ea	 mov         x10,x21
  00084	34000008	 cbz         w8,|$LN11@gz_error|
  00088		 |$LL12@gz_error|
  00088	38c01d48	 ldrsb       w8,[x10,#1]!
  0008c	35000008	 cbnz        w8,|$LL12@gz_error|
  00090		 |$LN11@gz_error|
  00090	90000009	 adrp        x9,__imp_malloc
  00094	f9400129	 ldr         x9,[x9,PageOffset(__imp_malloc)]
  00098	cb150148	 sub         x8,x10,x21
  0009c	8b0b0108	 add         x8,x8,x11
  000a0	91000d00	 add         x0,x8,#3
  000a4	d63f0120	 blr         x9
  000a8	f9003a60	 str         x0,[x19,#0x70]
  000ac	b5000000	 cbnz        x0,|$LN7@gz_error|

; 606  :             NULL) {
; 607  :         state->err = Z_MEM_ERROR;

  000b0	12800068	 mov         w8,#-4
  000b4	b9006e68	 str         w8,[x19,#0x6C]
  000b8	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000bc	f9400bf5	 ldr         x21,[sp,#0x10]
  000c0	a8c253f3	 ldp         x19,x20,[sp],#0x20
  000c4	d65f03c0	 ret
  000c8		 |$LN7@gz_error|

; 608  :         return;
; 609  :     }
; 610  : #if !defined(NO_snprintf) && !defined(NO_vsnprintf)
; 611  :     (void)snprintf(state->msg, strlen(state->path) + strlen(msg) + 3,

  000c8	f9401263	 ldr         x3,[x19,#0x20]
  000cc	39c00068	 ldrsb       w8,[x3]
  000d0	aa0303e9	 mov         x9,x3
  000d4	34000008	 cbz         w8,|$LN13@gz_error|
  000d8		 |$LL14@gz_error|
  000d8	38c01d28	 ldrsb       w8,[x9,#1]!
  000dc	35000008	 cbnz        w8,|$LL14@gz_error|
  000e0		 |$LN13@gz_error|
  000e0	39c002a8	 ldrsb       w8,[x21]
  000e4	cb03012b	 sub         x11,x9,x3
  000e8	aa1503ea	 mov         x10,x21
  000ec	34000008	 cbz         w8,|$LN15@gz_error|
  000f0		 |$LL16@gz_error|
  000f0	38c01d48	 ldrsb       w8,[x10,#1]!
  000f4	35000008	 cbnz        w8,|$LL16@gz_error|
  000f8		 |$LN15@gz_error|
  000f8	cb150148	 sub         x8,x10,x21
  000fc	8b0b0109	 add         x9,x8,x11
  00100	90000008	 adrp        x8,|??_C@_06DIJPEION@?$CFs?$CFs?$CFs@|
  00104	91000102	 add         x2,x8,PageOffset(|??_C@_06DIJPEION@?$CFs?$CFs?$CFs@|)
  00108	9000000a	 adrp        x10,|??_C@_02LMMGGCAJ@?3?5@|
  0010c	91000144	 add         x4,x10,PageOffset(|??_C@_02LMMGGCAJ@?3?5@|)
  00110	aa1503e5	 mov         x5,x21
  00114	91000d21	 add         x1,x9,#3
  00118	94000000	 bl          snprintf
  0011c		 |$LN1@gz_error|
  0011c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00120	f9400bf5	 ldr         x21,[sp,#0x10]
  00124	a8c253f3	 ldp         x19,x20,[sp],#0x20
  00128	d65f03c0	 ret

			 ENDP  ; |gz_error|

	END
