; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TTL	c:\users\ws103\desktop\zlib-1.2.11\deflate.c
	ARM64

	AREA	|.drectve|, DRECTVE

	EXPORT	|deflate_copyright| [ DATA ]
|deflate_copyright| DCB " deflate 1.2.11 Copyright 1995-2017 Jean-loup Ga"
	DCB	"illy and Mark Adler ", 0x0
	%	3
|?my_version@?1??deflateInit2_@@9@9| DCB "1.2.11", 0x0	; `deflateInit2_'::`2'::my_version
	%	1
|configuration_table| DCW 0x0
	DCW	0x0
	DCW	0x0
	DCW	0x0
	DCQ	|deflate_stored|, 0
	DCW	0x4
	DCW	0x4
	DCW	0x8
	DCW	0x4
	DCQ	|deflate_fast|, 0
	DCW	0x4
	DCW	0x5
	DCW	0x10
	DCW	0x8
	DCQ	|deflate_fast|, 0
	DCW	0x4
	DCW	0x6
	DCW	0x20
	DCW	0x20
	DCQ	|deflate_fast|, 0
	DCW	0x4
	DCW	0x4
	DCW	0x10
	DCW	0x10
	DCQ	|deflate_slow|, 0
	DCW	0x8
	DCW	0x10
	DCW	0x20
	DCW	0x20
	DCQ	|deflate_slow|, 0
	DCW	0x8
	DCW	0x10
	DCW	0x80
	DCW	0x80
	DCQ	|deflate_slow|, 0
	DCW	0x8
	DCW	0x20
	DCW	0x80
	DCW	0x100
	DCQ	|deflate_slow|, 0
	DCW	0x20
	DCW	0x80
	DCW	0x102
	DCW	0x400
	DCQ	|deflate_slow|, 0
	DCW	0x20
	DCW	0x102
	DCW	0x102
	DCW	0x1000
	DCQ	|deflate_slow|, 0
	EXPORT	|deflateCopy|
	EXPORT	|deflateBound|
	EXPORT	|deflateTune|
	EXPORT	|deflateParams|
	EXPORT	|deflatePrime|
	EXPORT	|deflatePending|
	EXPORT	|deflateSetHeader|
	EXPORT	|deflateReset|
	EXPORT	|deflateResetKeep|
	EXPORT	|deflateGetDictionary|
	EXPORT	|deflateSetDictionary|
	EXPORT	|deflateInit2_|
	EXPORT	|deflateInit_|
	EXPORT	|deflateEnd|
	EXPORT	|deflate|

	AREA	|.pdata|, PDATA
|$pdata$deflate_huff| DCD imagerel |deflate_huff|
	DCD	imagerel |$unwind$deflate_huff|

	AREA	|.pdata|, PDATA
|$pdata$deflate_rle| DCD imagerel |deflate_rle|
	DCD	imagerel |$unwind$deflate_rle|

	AREA	|.pdata|, PDATA
|$pdata$deflate_slow| DCD imagerel |deflate_slow|
	DCD	imagerel |$unwind$deflate_slow|

	AREA	|.pdata|, PDATA
|$pdata$deflate_fast| DCD imagerel |deflate_fast|
	DCD	imagerel |$unwind$deflate_fast|

	AREA	|.pdata|, PDATA
|$pdata$deflate_stored| DCD imagerel |deflate_stored|
	DCD	0x2e704a5
	;Flags[SingleProEpi] functionLength[1188] RegF[0] RegI[7] H[0] frameChainReturn[Chained] frameSize[80]

	AREA	|.pdata|, PDATA
|$pdata$fill_window| DCD imagerel |fill_window|
	DCD	imagerel |$unwind$fill_window|

	AREA	|.pdata|, PDATA
|$pdata$longest_match| DCD imagerel |longest_match|
	DCD	imagerel |$unwind$longest_match|

	AREA	|.pdata|, PDATA
|$pdata$lm_init| DCD imagerel |lm_init|
	DCD	0x16100a5
	;Flags[SingleProEpi] functionLength[164] RegF[0] RegI[1] H[0] frameChainReturn[Chained] frameSize[32]

	AREA	|.pdata|, PDATA
|$pdata$read_buf| DCD imagerel |read_buf|
	DCD	imagerel |$unwind$read_buf|

	AREA	|.pdata|, PDATA
|$pdata$deflateCopy| DCD imagerel |$LN10|
	DCD	imagerel |$unwind$deflateCopy|

	AREA	|.pdata|, PDATA
|$pdata$flush_pending| DCD imagerel |flush_pending|
	DCD	0x1e30095
	;Flags[SingleProEpi] functionLength[148] RegF[0] RegI[3] H[0] frameChainReturn[Chained] frameSize[48]

	AREA	|.pdata|, PDATA
|$pdata$deflateBound| DCD imagerel |$LN30|
	DCD	imagerel |$unwind$deflateBound|

	AREA	|.pdata|, PDATA
|$pdata$deflateTune| DCD imagerel |$LN5|
	DCD	imagerel |$unwind$deflateTune|

	AREA	|.pdata|, PDATA
|$pdata$deflateParams| DCD imagerel |$LN18|
	DCD	imagerel |$unwind$deflateParams|

	AREA	|.pdata|, PDATA
|$pdata$deflatePrime| DCD imagerel |$LN15|
	DCD	imagerel |$unwind$deflatePrime|

	AREA	|.pdata|, PDATA
|$pdata$deflatePending| DCD imagerel |$LN7|
	DCD	imagerel |$unwind$deflatePending|

	AREA	|.pdata|, PDATA
|$pdata$deflateSetHeader| DCD imagerel |$LN6|
	DCD	imagerel |$unwind$deflateSetHeader|

	AREA	|.pdata|, PDATA
|$pdata$deflateReset| DCD imagerel |$LN5|
	DCD	0x1620035
	;Flags[SingleProEpi] functionLength[52] RegF[0] RegI[2] H[0] frameChainReturn[Chained] frameSize[32]

	AREA	|.pdata|, PDATA
|$pdata$deflateResetKeep| DCD imagerel |$LN11|
	DCD	imagerel |$unwind$deflateResetKeep|

	AREA	|.pdata|, PDATA
|$pdata$deflateGetDictionary| DCD imagerel |$LN8|
	DCD	imagerel |$unwind$deflateGetDictionary|

	AREA	|.pdata|, PDATA
|$pdata$deflateSetDictionary| DCD imagerel |$LN29|
	DCD	0x2e701cd
	;Flags[SingleProEpi] functionLength[460] RegF[0] RegI[7] H[0] frameChainReturn[Chained] frameSize[80]

	AREA	|.pdata|, PDATA
|$pdata$deflateInit2_| DCD imagerel |$LN21|
	DCD	0x2e70269
	;Flags[SingleProEpi] functionLength[616] RegF[0] RegI[7] H[0] frameChainReturn[Chained] frameSize[80]

	AREA	|.pdata|, PDATA
|$pdata$deflateEnd| DCD imagerel |$LN9|
	DCD	imagerel |$unwind$deflateEnd|

	AREA	|.pdata|, PDATA
|$pdata$deflate| DCD imagerel |$LN150|
	DCD	0x2e70af1
	;Flags[SingleProEpi] functionLength[2800] RegF[0] RegI[7] H[0] frameChainReturn[Chained] frameSize[80]

	AREA	|.xdata|, DATA
|$unwind$deflateEnd| DCD 0x880002d
	DCD	0x400007
	DCD	0x40002a
	DCD	0xe42281e1
	;Code Words[1], Epilog Count[2], E[0], X[0], Function Length[45]=180 bytes
	;Epilog Start Index[1], Epilog Start Offset[7]=28 bytes
	;Epilog Start Index[1], Epilog Start Offset[42]=168 bytes
	;set_fp
	;save_fplr_x
	;save_r19r20_x
	;end

	AREA	|.xdata|, DATA
|$unwind$deflateGetDictionary| DCD 0x8800022
	DCD	0x400009
	DCD	0x40001f
	DCD	0xe42281e1
	;Code Words[1], Epilog Count[2], E[0], X[0], Function Length[34]=136 bytes
	;Epilog Start Index[1], Epilog Start Offset[9]=36 bytes
	;Epilog Start Index[1], Epilog Start Offset[31]=124 bytes
	;set_fp
	;save_fplr_x
	;save_r19r20_x
	;end

	AREA	|.xdata|, DATA
|$unwind$deflateResetKeep| DCD 0x880002e
	DCD	0x400007
	DCD	0x40002b
	DCD	0xe42281e1
	;Code Words[1], Epilog Count[2], E[0], X[0], Function Length[46]=184 bytes
	;Epilog Start Index[1], Epilog Start Offset[7]=28 bytes
	;Epilog Start Index[1], Epilog Start Offset[43]=172 bytes
	;set_fp
	;save_fplr_x
	;save_r19r20_x
	;end

	AREA	|.xdata|, DATA
|$unwind$deflateSetHeader| DCD 0x8800010
	DCD	0x40000b
	DCD	0x40000e
	DCD	0xe3e481e1
	;Code Words[1], Epilog Count[2], E[0], X[0], Function Length[16]=64 bytes
	;Epilog Start Index[1], Epilog Start Offset[11]=44 bytes
	;Epilog Start Index[1], Epilog Start Offset[14]=56 bytes
	;set_fp
	;save_fplr_x
	;end
	;nop

	AREA	|.xdata|, DATA
|$unwind$deflatePending| DCD 0x8800013
	DCD	0x400006
	DCD	0x400011
	DCD	0xe3e481e1
	;Code Words[1], Epilog Count[2], E[0], X[0], Function Length[19]=76 bytes
	;Epilog Start Index[1], Epilog Start Offset[6]=24 bytes
	;Epilog Start Index[1], Epilog Start Offset[17]=68 bytes
	;set_fp
	;save_fplr_x
	;end
	;nop

	AREA	|.xdata|, DATA
|$unwind$deflatePrime| DCD 0x8c00028
	DCD	0x400006
	DCD	0x40000f
	DCD	0x400026
	DCD	0xe3e481e1
	;Code Words[1], Epilog Count[3], E[0], X[0], Function Length[40]=160 bytes
	;Epilog Start Index[1], Epilog Start Offset[6]=24 bytes
	;Epilog Start Index[1], Epilog Start Offset[15]=60 bytes
	;Epilog Start Index[1], Epilog Start Offset[38]=152 bytes
	;set_fp
	;save_fplr_x
	;end
	;nop

	AREA	|.xdata|, DATA
|$unwind$deflateParams| DCD 0x10c0005d
	DCD	0x400028
	DCD	0x400052
	DCD	0x400058
	DCD	0x4d181e1
	DCD	0xe42682c8
	;Code Words[2], Epilog Count[3], E[0], X[0], Function Length[93]=372 bytes
	;Epilog Start Index[1], Epilog Start Offset[40]=160 bytes
	;Epilog Start Index[1], Epilog Start Offset[82]=328 bytes
	;Epilog Start Index[1], Epilog Start Offset[88]=352 bytes
	;set_fp
	;save_fplr_x
	;save_reg
	;save_regp
	;save_r19r20_x
	;end

	AREA	|.xdata|, DATA
|$unwind$deflateTune| DCD 0x880000e
	DCD	0x400006
	DCD	0x40000c
	DCD	0xe3e481e1
	;Code Words[1], Epilog Count[2], E[0], X[0], Function Length[14]=56 bytes
	;Epilog Start Index[1], Epilog Start Offset[6]=24 bytes
	;Epilog Start Index[1], Epilog Start Offset[12]=48 bytes
	;set_fp
	;save_fplr_x
	;end
	;nop

	AREA	|.xdata|, DATA
|$unwind$deflateBound| DCD 0x8c00046
	DCD	0x40000c
	DCD	0x400041
	DCD	0x400044
	DCD	0xe3e481e1
	;Code Words[1], Epilog Count[3], E[0], X[0], Function Length[70]=280 bytes
	;Epilog Start Index[1], Epilog Start Offset[12]=48 bytes
	;Epilog Start Index[1], Epilog Start Offset[65]=260 bytes
	;Epilog Start Index[1], Epilog Start Offset[68]=272 bytes
	;set_fp
	;save_fplr_x
	;end
	;nop

	AREA	|.xdata|, DATA
|$unwind$deflateCopy| DCD 0x10c00078
	DCD	0x400068
	DCD	0x40006f
	DCD	0x400074
	DCD	0x82c881e1
	DCD	0xe3e3e424
	;Code Words[2], Epilog Count[3], E[0], X[0], Function Length[120]=480 bytes
	;Epilog Start Index[1], Epilog Start Offset[104]=416 bytes
	;Epilog Start Index[1], Epilog Start Offset[111]=444 bytes
	;Epilog Start Index[1], Epilog Start Offset[116]=464 bytes
	;set_fp
	;save_fplr_x
	;save_regp
	;save_r19r20_x
	;end
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$read_buf| DCD 0x10800030
	DCD	0x40000b
	DCD	0x40002c
	DCD	0x82d081e1
	DCD	0xe3e3e424
	;Code Words[2], Epilog Count[2], E[0], X[0], Function Length[48]=192 bytes
	;Epilog Start Index[1], Epilog Start Offset[11]=44 bytes
	;Epilog Start Index[1], Epilog Start Offset[44]=176 bytes
	;set_fp
	;save_fplr_x
	;save_reg
	;save_r19r20_x
	;end
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$longest_match| DCD 0x880006c
	DCD	0x65
	DCD	0x69
	DCD	0xe42482d0
	;Code Words[1], Epilog Count[2], E[0], X[0], Function Length[108]=432 bytes
	;Epilog Start Index[0], Epilog Start Offset[101]=404 bytes
	;Epilog Start Index[0], Epilog Start Offset[105]=420 bytes
	;save_reg
	;save_r19r20_x
	;end

	AREA	|.xdata|, DATA
|$unwind$fill_window| DCD 0x10800090
	DCD	0x400078
	DCD	0x40008c
	DCD	0x82d081e1
	DCD	0xe3e3e424
	;Code Words[2], Epilog Count[2], E[0], X[0], Function Length[144]=576 bytes
	;Epilog Start Index[1], Epilog Start Offset[120]=480 bytes
	;Epilog Start Index[1], Epilog Start Offset[140]=560 bytes
	;set_fp
	;save_fplr_x
	;save_reg
	;save_r19r20_x
	;end
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$deflate_fast| DCD 0x10c00110
	DCD	0x4000d5
	DCD	0x4000f4
	DCD	0x40010c
	DCD	0x82d081e1
	DCD	0xe3e3e424
	;Code Words[2], Epilog Count[3], E[0], X[0], Function Length[272]=1088 bytes
	;Epilog Start Index[1], Epilog Start Offset[213]=852 bytes
	;Epilog Start Index[1], Epilog Start Offset[244]=976 bytes
	;Epilog Start Index[1], Epilog Start Offset[268]=1072 bytes
	;set_fp
	;save_fplr_x
	;save_reg
	;save_r19r20_x
	;end
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$deflate_slow| DCD 0x10c00151
	DCD	0x4000c7
	DCD	0x400133
	DCD	0x40014c
	DCD	0x4d181e1
	DCD	0xe42682c8
	;Code Words[2], Epilog Count[3], E[0], X[0], Function Length[337]=1348 bytes
	;Epilog Start Index[1], Epilog Start Offset[199]=796 bytes
	;Epilog Start Index[1], Epilog Start Offset[307]=1228 bytes
	;Epilog Start Index[1], Epilog Start Offset[332]=1328 bytes
	;set_fp
	;save_fplr_x
	;save_reg
	;save_regp
	;save_r19r20_x
	;end

	AREA	|.xdata|, DATA
|$unwind$deflate_rle| DCD 0x10c000d6
	DCD	0x40009a
	DCD	0x4000b7
	DCD	0x4000d1
	DCD	0x4d181e1
	DCD	0xe42682c8
	;Code Words[2], Epilog Count[3], E[0], X[0], Function Length[214]=856 bytes
	;Epilog Start Index[1], Epilog Start Offset[154]=616 bytes
	;Epilog Start Index[1], Epilog Start Offset[183]=732 bytes
	;Epilog Start Index[1], Epilog Start Offset[209]=836 bytes
	;set_fp
	;save_fplr_x
	;save_reg
	;save_regp
	;save_r19r20_x
	;end

	AREA	|.xdata|, DATA
|$unwind$deflate_huff| DCD 0x8c00071
	DCD	0x40003a
	DCD	0x400056
	DCD	0x40006e
	DCD	0xe42281e1
	;Code Words[1], Epilog Count[3], E[0], X[0], Function Length[113]=452 bytes
	;Epilog Start Index[1], Epilog Start Offset[58]=232 bytes
	;Epilog Start Index[1], Epilog Start Offset[86]=344 bytes
	;Epilog Start Index[1], Epilog Start Offset[110]=440 bytes
	;set_fp
	;save_fplr_x
	;save_r19r20_x
	;end
; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |deflate| PROC

; 766  : {

  00000		 |$LN150|
  00000	a9bc53f3	 stp         x19,x20,[sp,#-0x40]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	a90263f7	 stp         x23,x24,[sp,#0x20]
  0000c	f9001bf9	 str         x25,[sp,#0x30]
  00010	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00014	910003fd	 mov         fp,sp
  00018	aa0003f4	 mov         x20,x0
  0001c	2a0103f6	 mov         w22,w1

; 767  :     int old_flush; /* value of flush param for previous deflate call */
; 768  :     deflate_state *s;
; 769  : 
; 770  :     if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {

  00020	94000000	 bl          deflateStateCheck
  00024	7100001f	 cmp         w0,#0
  00028	7a450aca	 ccmpeq      w22,#5,#0xA
  0002c	54000008	 bhi         |$LN29@deflate|

; 771  :         return Z_STREAM_ERROR;
; 772  :     }
; 773  :     s = strm->state;

  00030	710002df	 cmp         w22,#0
  00034	1a9fa2d6	 cselge      w22,w22,wzr
  00038	d503229f	 csdb
  0003c	f9401693	 ldr         x19,[x20,#0x28]

; 774  : 
; 775  :     if (strm->next_out == Z_NULL ||
; 776  :         (strm->avail_in != 0 && strm->next_in == Z_NULL) ||

  00040	f9400a88	 ldr         x8,[x20,#0x10]
  00044	b4000008	 cbz         x8,|$LN31@deflate|
  00048	b9400a88	 ldr         w8,[x20,#8]
  0004c	34000008	 cbz         w8,|$LN32@deflate|
  00050	f9400288	 ldr         x8,[x20]
  00054	b4000008	 cbz         x8,|$LN31@deflate|
  00058		 |$LN32@deflate|
  00058	b9400a6c	 ldr         w12,[x19,#8]
  0005c	710a699f	 cmp         w12,#0x29A
  00060	7a440ac4	 ccmpeq      w22,#4,#4
  00064	54000001	 bne         |$LN31@deflate|

; 779  :     }
; 780  :     if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);

  00068	b9401a88	 ldr         w8,[x20,#0x18]
  0006c	34000008	 cbz         w8,|$LN145@deflate|

; 781  : 
; 782  :     old_flush = s->last_flush;

  00070	b940426a	 ldr         w10,[x19,#0x40]

; 783  :     s->last_flush = flush;

  00074	b9004276	 str         w22,[x19,#0x40]

; 784  : 
; 785  :     /* Flush as much pending output as possible */
; 786  :     if (s->pending != 0) {

  00078	b9402a68	 ldr         w8,[x19,#0x28]
  0007c	34000008	 cbz         w8,|$LN34@deflate|

; 787  :         flush_pending(strm);

  00080	aa1403e0	 mov         x0,x20
  00084	94000000	 bl          flush_pending

; 788  :         if (strm->avail_out == 0) {

  00088	b9401a88	 ldr         w8,[x20,#0x18]
  0008c	34000008	 cbz         w8,|$LN144@deflate|

; 789  :             /* Since avail_out is 0, deflate will be called again with
; 790  :              * more output space, but possibly with both pending and
; 791  :              * avail_in equal to zero. There won't be anything to do,
; 792  :              * but this is not an error situation so make sure we
; 793  :              * return OK instead of BUF_ERROR at next call of deflate:
; 794  :              */
; 795  :             s->last_flush = -1;
; 796  :             return Z_OK;
; 797  :         }

  00090	b9400a6b	 ldr         w11,[x19,#8]
  00094	14000012	 b           |$LN37@deflate|
  00098		 |$LN34@deflate|

; 798  : 
; 799  :     /* Make sure there is something to do and avoid duplicate consecutive
; 800  :      * flushes. For repeated and useless calls with Z_FINISH, we keep
; 801  :      * returning Z_STREAM_END instead of Z_BUF_ERROR.
; 802  :      */
; 803  :     } else if (strm->avail_in == 0 && RANK(flush) <= RANK(old_flush) &&

  00098	b9400a88	 ldr         w8,[x20,#8]
  0009c	2a0c03eb	 mov         w11,w12
  000a0	35000008	 cbnz        w8,|$LN37@deflate|
  000a4	7100115f	 cmp         w10,#4
  000a8	52800128	 mov         w8,#9
  000ac	1a9fc109	 cselgt      w9,w8,wzr
  000b0	531f7948	 lsl         w8,w10,#1
  000b4	710012df	 cmp         w22,#4
  000b8	5280012d	 mov         w13,#9
  000bc	4b09010a	 sub         w10,w8,w9
  000c0	1a9fc1a9	 cselgt      w9,w13,wzr
  000c4	531f7ac8	 lsl         w8,w22,#1
  000c8	4b090109	 sub         w9,w8,w9
  000cc	6b0a013f	 cmp         w9,w10
  000d0	5400000c	 bgt         |$LN37@deflate|
  000d4	710012df	 cmp         w22,#4
  000d8	54000001	 bne         |$LN145@deflate|
  000dc		 |$LN37@deflate|

; 804  :                flush != Z_FINISH) {
; 805  :         ERR_RETURN(strm, Z_BUF_ERROR);
; 806  :     }
; 807  : 
; 808  :     /* User must not provide more input after the first FINISH: */
; 809  :     if (s->status == FINISH_STATE && strm->avail_in != 0) {

  000dc	52800e39	 mov         w25,#0x71
  000e0	710a697f	 cmp         w11,#0x29A
  000e4	54000001	 bne         |$LN38@deflate|
  000e8	b9400a88	 ldr         w8,[x20,#8]
  000ec	34000008	 cbz         w8,|$LN124@deflate|
  000f0		 |$LN145@deflate|

; 810  :         ERR_RETURN(strm, Z_BUF_ERROR);

  000f0	90000008	 adrp        x8,|??_C@_0N@DFPGLBGC@buffer?5error@|
  000f4	91000108	 add         x8,x8,PageOffset(|??_C@_0N@DFPGLBGC@buffer?5error@|)
  000f8	f9001288	 str         x8,[x20,#0x20]
  000fc	12800080	 mov         w0,#-5
  00100	14000276	 b           |$LN1@deflate|
  00104		 |$LN38@deflate|

; 811  :     }
; 812  : 
; 813  :     /* Write the header */
; 814  :     if (s->status == INIT_STATE) {

  00104	7100a97f	 cmp         w11,#0x2A
  00108	54000001	 bne         |$LN124@deflate|

; 815  :         /* zlib header */
; 816  :         uInt header = (Z_DEFLATED + ((s->w_bits-8)<<4)) << 8;

  0010c	b9404a68	 ldr         w8,[x19,#0x48]
  00110	528f000a	 mov         w10,#0x7800
  00114	53144d09	 lsl         w9,w8,#0xC

; 817  :         uInt level_flags;
; 818  : 
; 819  :         if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)

  00118	b940b268	 ldr         w8,[x19,#0xB0]
  0011c	4b0a012b	 sub         w11,w9,w10
  00120	7100091f	 cmp         w8,#2
  00124	5400000a	 bge         |$LN135@deflate|
  00128	b940ae68	 ldr         w8,[x19,#0xAC]
  0012c	7100091f	 cmp         w8,#2
  00130	5400000b	 blt         |$LN135@deflate|

; 821  :         else if (s->level < 6)

  00134	7100191f	 cmp         w8,#6
  00138	5400000a	 bge         |$LN148@deflate|

; 822  :             level_flags = 1;

  0013c	52800808	 mov         w8,#0x40
  00140	52800c09	 mov         w9,#0x60
  00144	1400000a	 b           |$LN46@deflate|
  00148		 |$LN148@deflate|

; 823  :         else if (s->level == 6)

  00148	54000001	 bne         |$LN45@deflate|

; 824  :             level_flags = 2;

  0014c	52801008	 mov         w8,#0x80
  00150	52801409	 mov         w9,#0xA0
  00154	14000006	 b           |$LN46@deflate|
  00158		 |$LN45@deflate|

; 825  :         else
; 826  :             level_flags = 3;

  00158	52801808	 mov         w8,#0xC0
  0015c	52801c09	 mov         w9,#0xE0
  00160	14000003	 b           |$LN46@deflate|
  00164		 |$LN135@deflate|

; 820  :             level_flags = 0;

  00164	52800008	 mov         w8,#0
  00168	52800409	 mov         w9,#0x20
  0016c		 |$LN46@deflate|

; 827  :         header |= (level_flags << 6);

  0016c	2a0b010a	 orr         w10,w8,w11

; 828  :         if (s->strstart != 0) header |= PRESET_DICT;

  00170	b9409668	 ldr         w8,[x19,#0x94]
  00174	34000008	 cbz         w8,|$LN47@deflate|
  00178	2a0b012a	 orr         w10,w9,w11
  0017c		 |$LN47@deflate|

; 829  :         header += 31 - (header % 31);

  0017c	528210a8	 mov         w8,#0x1085
  00180	72a10848	 movk        w8,#0x842,lsl #0x10
  00184	9ba87d48	 umull       x8,w10,w8

; 830  : 
; 831  :         putShortMSB(s, header);

  00188	aa1303e0	 mov         x0,x19
  0018c	d360fd09	 lsr         x9,x8,#0x20
  00190	4b09014a	 sub         w10,w10,w9
  00194	0b4a0528	 add         w8,w9,w10,lsr #1
  00198	528003ea	 mov         w10,#0x1F
  0019c	53047d09	 lsr         w9,w8,#4
  001a0	1100052c	 add         w12,w9,#1
  001a4	1b0a7d81	 mul         w1,w12,w10
  001a8	94000000	 bl          putShortMSB

; 832  : 
; 833  :         /* Save the adler32 of the preset dictionary: */
; 834  :         if (s->strstart != 0) {

  001ac	b940966c	 ldr         w12,[x19,#0x94]
  001b0	3400000c	 cbz         w12,|$LN48@deflate|

; 835  :             putShortMSB(s, (uInt)(strm->adler >> 16));

  001b4	79409e81	 ldrh        w1,[x20,#0x4E]
  001b8	94000000	 bl          putShortMSB

; 836  :             putShortMSB(s, (uInt)(strm->adler & 0xffff));

  001bc	79409a81	 ldrh        w1,[x20,#0x4C]
  001c0	94000000	 bl          putShortMSB
  001c4		 |$LN48@deflate|

; 837  :         }
; 838  :         strm->adler = adler32(0L, Z_NULL, 0);

  001c4	52800002	 mov         w2,#0
  001c8	d2800001	 mov         x1,#0
  001cc	52800000	 mov         w0,#0
  001d0	94000000	 bl          adler32
  001d4	b9004e80	 str         w0,[x20,#0x4C]

; 839  :         s->status = BUSY_STATE;
; 840  : 
; 841  :         /* Compression must start with an empty pending buffer */
; 842  :         flush_pending(strm);

  001d8	aa1403e0	 mov         x0,x20
  001dc	b9000a79	 str         w25,[x19,#8]
  001e0	94000000	 bl          flush_pending

; 843  :         if (s->pending != 0) {

  001e4	b9402a68	 ldr         w8,[x19,#0x28]
  001e8	35000008	 cbnz        w8,|$LN144@deflate|
  001ec		 |$LN124@deflate|

; 844  :             s->last_flush = -1;
; 845  :             return Z_OK;
; 846  :         }
; 847  :     }
; 848  : #ifdef GZIP
; 849  :     if (s->status == GZIP_STATE) {

  001ec	b9400a68	 ldr         w8,[x19,#8]
  001f0	7100e51f	 cmp         w8,#0x39
  001f4	54000001	 bne         |$LN52@deflate|

; 850  :         /* gzip header */
; 851  :         strm->adler = crc32(0L, Z_NULL, 0);

  001f8	52800002	 mov         w2,#0
  001fc	d2800001	 mov         x1,#0
  00200	52800000	 mov         w0,#0
  00204	94000000	 bl          crc32

; 852  :         put_byte(s, 31);

  00208	528003ea	 mov         w10,#0x1F
  0020c	b9004e80	 str         w0,[x20,#0x4C]
  00210	b9402a69	 ldr         w9,[x19,#0x28]
  00214	f9400a68	 ldr         x8,[x19,#0x10]
  00218	3829490a	 strb        w10,[x8,w9 uxtw #0]
  0021c	b9402a68	 ldr         w8,[x19,#0x28]

; 853  :         put_byte(s, 139);

  00220	f9400a69	 ldr         x9,[x19,#0x10]
  00224	1100050a	 add         w10,w8,#1
  00228	52801168	 mov         w8,#0x8B
  0022c	b9002a6a	 str         w10,[x19,#0x28]
  00230	382a4928	 strb        w8,[x9,w10 uxtw #0]
  00234	b9402a68	 ldr         w8,[x19,#0x28]

; 854  :         put_byte(s, 8);

  00238	f9400a69	 ldr         x9,[x19,#0x10]
  0023c	1100050b	 add         w11,w8,#1
  00240	52800108	 mov         w8,#8
  00244	b9002a6b	 str         w11,[x19,#0x28]
  00248	382b4928	 strb        w8,[x9,w11 uxtw #0]
  0024c	b9402a68	 ldr         w8,[x19,#0x28]

; 855  :         if (s->gzhead == Z_NULL) {

  00250	f9401a6d	 ldr         x13,[x19,#0x30]
  00254	1100050c	 add         w12,w8,#1
  00258	b9002a6c	 str         w12,[x19,#0x28]
  0025c	b500000d	 cbnz        x13,|$LN51@deflate|

; 856  :             put_byte(s, 0);

  00260	f9400a68	 ldr         x8,[x19,#0x10]
  00264	382c491f	 strb        wzr,[x8,w12 uxtw #0]
  00268	b9402a69	 ldr         w9,[x19,#0x28]

; 857  :             put_byte(s, 0);

  0026c	f9400a68	 ldr         x8,[x19,#0x10]
  00270	1100052a	 add         w10,w9,#1
  00274	b9002a6a	 str         w10,[x19,#0x28]
  00278	382a491f	 strb        wzr,[x8,w10 uxtw #0]
  0027c	b9402a69	 ldr         w9,[x19,#0x28]

; 858  :             put_byte(s, 0);

  00280	f9400a68	 ldr         x8,[x19,#0x10]
  00284	1100052b	 add         w11,w9,#1
  00288	b9002a6b	 str         w11,[x19,#0x28]
  0028c	382b491f	 strb        wzr,[x8,w11 uxtw #0]
  00290	b9402a69	 ldr         w9,[x19,#0x28]

; 859  :             put_byte(s, 0);

  00294	f9400a68	 ldr         x8,[x19,#0x10]
  00298	1100052a	 add         w10,w9,#1
  0029c	b9002a6a	 str         w10,[x19,#0x28]
  002a0	382a491f	 strb        wzr,[x8,w10 uxtw #0]
  002a4	b9402a69	 ldr         w9,[x19,#0x28]

; 860  :             put_byte(s, 0);

  002a8	f9400a68	 ldr         x8,[x19,#0x10]
  002ac	1100052b	 add         w11,w9,#1
  002b0	b9002a6b	 str         w11,[x19,#0x28]
  002b4	382b491f	 strb        wzr,[x8,w11 uxtw #0]
  002b8	b9402a69	 ldr         w9,[x19,#0x28]
  002bc	1100052a	 add         w10,w9,#1

; 861  :             put_byte(s, s->level == 9 ? 2 :

  002c0	b940ae69	 ldr         w9,[x19,#0xAC]
  002c4	b9002a6a	 str         w10,[x19,#0x28]
  002c8	7100253f	 cmp         w9,#9
  002cc	54000001	 bne         |$LN100@deflate|
  002d0	52800049	 mov         w9,#2
  002d4	14000006	 b           |$LN98@deflate|
  002d8		 |$LN100@deflate|
  002d8	b940b268	 ldr         w8,[x19,#0xB0]
  002dc	5280008b	 mov         w11,#4
  002e0	7100091f	 cmp         w8,#2
  002e4	7a42b92a	 ccmplt      w9,#2,#0xA
  002e8	1a8ba3e9	 cselge      w9,wzr,w11
  002ec		 |$LN98@deflate|
  002ec	f9400a68	 ldr         x8,[x19,#0x10]

; 862  :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 863  :                       4 : 0));
; 864  :             put_byte(s, OS_CODE);
; 865  :             s->status = BUSY_STATE;
; 866  : 
; 867  :             /* Compression must start with an empty pending buffer */
; 868  :             flush_pending(strm);

  002f0	aa1403e0	 mov         x0,x20
  002f4	382a4909	 strb        w9,[x8,w10 uxtw #0]
  002f8	b9402a69	 ldr         w9,[x19,#0x28]
  002fc	f9400a68	 ldr         x8,[x19,#0x10]
  00300	1100052a	 add         w10,w9,#1
  00304	52800149	 mov         w9,#0xA
  00308	b9002a6a	 str         w10,[x19,#0x28]
  0030c	382a4909	 strb        w9,[x8,w10 uxtw #0]
  00310	b9402a68	 ldr         w8,[x19,#0x28]
  00314	b9000a79	 str         w25,[x19,#8]
  00318	11000509	 add         w9,w8,#1
  0031c	b9002a69	 str         w9,[x19,#0x28]
  00320	94000000	 bl          flush_pending

; 869  :             if (s->pending != 0) {

  00324	b9402a68	 ldr         w8,[x19,#0x28]
  00328	35000008	 cbnz        w8,|$LN144@deflate|

; 870  :                 s->last_flush = -1;
; 871  :                 return Z_OK;
; 872  :             }
; 873  :         }

  0032c	b9400a68	 ldr         w8,[x19,#8]
  00330		 |$LN52@deflate|

; 898  :         }
; 899  :     }
; 900  :     if (s->status == EXTRA_STATE) {

  00330	7101151f	 cmp         w8,#0x45
  00334	54000001	 bne         |$LN138@deflate|
  00338		 |$LN143@deflate|

; 901  :         if (s->gzhead->extra != Z_NULL) {

  00338	f9401a6a	 ldr         x10,[x19,#0x30]
  0033c	f9400948	 ldr         x8,[x10,#0x10]
  00340	b4000008	 cbz         x8,|$LN136@deflate|

; 902  :             ulg beg = s->pending;   /* start of bytes to update crc */
; 903  :             uInt left = (s->gzhead->extra_len & 0xffff) - s->gzindex;

  00344	79403148	 ldrh        w8,[x10,#0x18]
  00348	b9403a6b	 ldr         w11,[x19,#0x38]
  0034c	b9402a75	 ldr         w21,[x19,#0x28]

; 904  :             while (s->pending + left > s->pending_buf_size) {

  00350	b9401a69	 ldr         w9,[x19,#0x18]
  00354	4b0b0117	 sub         w23,w8,w11
  00358	0b1702a8	 add         w8,w21,w23
  0035c	6b09011f	 cmp         w8,w9
  00360	54000009	 bls         |$LN3@deflate|
  00364	2a1503ec	 mov         w12,w21
  00368		 |$LL2@deflate|

; 905  :                 uInt copy = s->pending_buf_size - s->pending;
; 906  :                 zmemcpy(s->pending_buf + s->pending,

  00368	f9401a68	 ldr         x8,[x19,#0x30]
  0036c	4b0c0138	 sub         w24,w9,w12
  00370	b9403a6b	 ldr         w11,[x19,#0x38]
  00374	aa1803e2	 mov         x2,x24
  00378	f9400a6a	 ldr         x10,[x19,#0x10]
  0037c	f9400909	 ldr         x9,[x8,#0x10]
  00380	8b2c4140	 add         x0,x10,w12,uxtw #0
  00384	8b2b4121	 add         x1,x9,w11,uxtw #0
  00388	94000000	 bl          memcpy

; 907  :                         s->gzhead->extra + s->gzindex, copy);
; 908  :                 s->pending = s->pending_buf_size;

  0038c	b9401a6a	 ldr         w10,[x19,#0x18]

; 909  :                 HCRC_UPDATE(beg);

  00390	f9401a68	 ldr         x8,[x19,#0x30]
  00394	b9002a6a	 str         w10,[x19,#0x28]
  00398	b9403d09	 ldr         w9,[x8,#0x3C]
  0039c	7100013f	 cmp         w9,#0
  003a0	7a551144	 ccmpne      w10,w21,#4
  003a4	54000009	 bls         |$LN4@deflate|
  003a8	f9400a68	 ldr         x8,[x19,#0x10]
  003ac	4b150142	 sub         w2,w10,w21
  003b0	b9404e80	 ldr         w0,[x20,#0x4C]
  003b4	8b354101	 add         x1,x8,w21,uxtw #0
  003b8	94000000	 bl          crc32
  003bc	b9004e80	 str         w0,[x20,#0x4C]
  003c0		 |$LN4@deflate|

; 910  :                 s->gzindex += copy;

  003c0	b9403a68	 ldr         w8,[x19,#0x38]

; 911  :                 flush_pending(strm);

  003c4	aa1403e0	 mov         x0,x20
  003c8	0b180109	 add         w9,w8,w24
  003cc	b9003a69	 str         w9,[x19,#0x38]
  003d0	94000000	 bl          flush_pending

; 912  :                 if (s->pending != 0) {

  003d4	b9402a68	 ldr         w8,[x19,#0x28]
  003d8	35000008	 cbnz        w8,|$LN144@deflate|

; 913  :                     s->last_flush = -1;
; 914  :                     return Z_OK;
; 915  :                 }
; 916  :                 beg = 0;
; 917  :                 left -= copy;

  003dc	b9401a69	 ldr         w9,[x19,#0x18]
  003e0	4b1802f7	 sub         w23,w23,w24
  003e4	52800015	 mov         w21,#0
  003e8	5280000c	 mov         w12,#0
  003ec	6b0902ff	 cmp         w23,w9
  003f0	54000008	 bhi         |$LL2@deflate|

; 965  :             } while (val != 0);

  003f4	f9401a6a	 ldr         x10,[x19,#0x30]
  003f8	b9403a6b	 ldr         w11,[x19,#0x38]
  003fc		 |$LN3@deflate|

; 918  :             }
; 919  :             zmemcpy(s->pending_buf + s->pending,

  003fc	f9400948	 ldr         x8,[x10,#0x10]
  00400	d3407ee2	 uxtw        x2,w23
  00404	f9400a69	 ldr         x9,[x19,#0x10]
  00408	8b2b4101	 add         x1,x8,w11,uxtw #0
  0040c	8b354120	 add         x0,x9,w21,uxtw #0
  00410	94000000	 bl          memcpy

; 920  :                     s->gzhead->extra + s->gzindex, left);
; 921  :             s->pending += left;

  00414	b9402a68	 ldr         w8,[x19,#0x28]
  00418	0b17010a	 add         w10,w8,w23

; 922  :             HCRC_UPDATE(beg);

  0041c	f9401a68	 ldr         x8,[x19,#0x30]
  00420	b9002a6a	 str         w10,[x19,#0x28]
  00424	b9403d09	 ldr         w9,[x8,#0x3C]
  00428	7100013f	 cmp         w9,#0
  0042c	7a551144	 ccmpne      w10,w21,#4
  00430	54000009	 bls         |$LN7@deflate|
  00434	6b15015f	 cmp         w10,w21
  00438	1a9f82b5	 cselhi      w21,w21,wzr
  0043c	d503229f	 csdb
  00440	f9400a69	 ldr         x9,[x19,#0x10]
  00444	b9402a68	 ldr         w8,[x19,#0x28]
  00448	b9404e80	 ldr         w0,[x20,#0x4C]
  0044c	8b354121	 add         x1,x9,w21,uxtw #0
  00450	4b150102	 sub         w2,w8,w21
  00454	94000000	 bl          crc32
  00458	b9004e80	 str         w0,[x20,#0x4C]
  0045c		 |$LN7@deflate|

; 923  :             s->gzindex = 0;

  0045c	b9003a7f	 str         wzr,[x19,#0x38]
  00460		 |$LN136@deflate|

; 924  :         }
; 925  :         s->status = NAME_STATE;

  00460	52800928	 mov         w8,#0x49
  00464	b9000a68	 str         w8,[x19,#8]
  00468	1400006c	 b           |$LN142@deflate|
  0046c		 |$LN51@deflate|

; 874  :         else {
; 875  :             put_byte(s, (s->gzhead->text ? 1 : 0) +

  0046c	f94019a8	 ldr         x8,[x13,#0x30]
  00470	52800209	 mov         w9,#0x10
  00474	f100011f	 cmp         x8,#0
  00478	b9403da8	 ldr         w8,[x13,#0x3C]
  0047c	1a8903ea	 cseleq      w10,wzr,w9
  00480	52800049	 mov         w9,#2
  00484	7100011f	 cmp         w8,#0
  00488	f94011a8	 ldr         x8,[x13,#0x20]
  0048c	1a9f1129	 cselne      w9,w9,wzr
  00490	0b09014b	 add         w11,w10,w9
  00494	52800109	 mov         w9,#8
  00498	f100011f	 cmp         x8,#0
  0049c	f94009a8	 ldr         x8,[x13,#0x10]
  004a0	1a8903e9	 cseleq      w9,wzr,w9
  004a4	0b2b012a	 add         w10,w9,w11,uxtb #0
  004a8	52800089	 mov         w9,#4
  004ac	f100011f	 cmp         x8,#0
  004b0	b94001a8	 ldr         w8,[x13]
  004b4	1a8903e9	 cseleq      w9,wzr,w9
  004b8	0b2a012a	 add         w10,w9,w10,uxtb #0
  004bc	7100011f	 cmp         w8,#0
  004c0	f9400a68	 ldr         x8,[x19,#0x10]
  004c4	1a9f07e9	 csetne      w9
  004c8	0b2a012a	 add         w10,w9,w10,uxtb #0
  004cc	382c490a	 strb        w10,[x8,w12 uxtw #0]
  004d0	b9402a69	 ldr         w9,[x19,#0x28]

; 876  :                      (s->gzhead->hcrc ? 2 : 0) +
; 877  :                      (s->gzhead->extra == Z_NULL ? 0 : 4) +
; 878  :                      (s->gzhead->name == Z_NULL ? 0 : 8) +
; 879  :                      (s->gzhead->comment == Z_NULL ? 0 : 16)
; 880  :                      );
; 881  :             put_byte(s, (Byte)(s->gzhead->time & 0xff));

  004d4	f9401a68	 ldr         x8,[x19,#0x30]
  004d8	1100052b	 add         w11,w9,#1
  004dc	f9400a69	 ldr         x9,[x19,#0x10]
  004e0	b9002a6b	 str         w11,[x19,#0x28]
  004e4	3940110a	 ldrb        w10,[x8,#4]
  004e8	382b492a	 strb        w10,[x9,w11 uxtw #0]
  004ec	b9402a68	 ldr         w8,[x19,#0x28]

; 882  :             put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));

  004f0	f9401a69	 ldr         x9,[x19,#0x30]
  004f4	f9400a6a	 ldr         x10,[x19,#0x10]
  004f8	1100050c	 add         w12,w8,#1
  004fc	b9002a6c	 str         w12,[x19,#0x28]
  00500	39401528	 ldrb        w8,[x9,#5]
  00504	382c4948	 strb        w8,[x10,w12 uxtw #0]
  00508	b9402a69	 ldr         w9,[x19,#0x28]

; 883  :             put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));

  0050c	f9401a68	 ldr         x8,[x19,#0x30]
  00510	1100052b	 add         w11,w9,#1
  00514	f9400a69	 ldr         x9,[x19,#0x10]
  00518	b9002a6b	 str         w11,[x19,#0x28]
  0051c	39401908	 ldrb        w8,[x8,#6]
  00520	382b4928	 strb        w8,[x9,w11 uxtw #0]
  00524	b9402a69	 ldr         w9,[x19,#0x28]

; 884  :             put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));

  00528	f9401a68	 ldr         x8,[x19,#0x30]
  0052c	1100052a	 add         w10,w9,#1
  00530	f9400a69	 ldr         x9,[x19,#0x10]
  00534	b9002a6a	 str         w10,[x19,#0x28]
  00538	39401d08	 ldrb        w8,[x8,#7]
  0053c	382a4928	 strb        w8,[x9,w10 uxtw #0]
  00540	b9402a69	 ldr         w9,[x19,#0x28]
  00544	1100052b	 add         w11,w9,#1

; 885  :             put_byte(s, s->level == 9 ? 2 :

  00548	b940ae69	 ldr         w9,[x19,#0xAC]
  0054c	b9002a6b	 str         w11,[x19,#0x28]
  00550	7100253f	 cmp         w9,#9
  00554	54000001	 bne         |$LN104@deflate|
  00558	52800049	 mov         w9,#2
  0055c	14000006	 b           |$LN102@deflate|
  00560		 |$LN104@deflate|
  00560	b940b268	 ldr         w8,[x19,#0xB0]
  00564	5280008a	 mov         w10,#4
  00568	7100091f	 cmp         w8,#2
  0056c	7a42b92a	 ccmplt      w9,#2,#0xA
  00570	1a8aa3e9	 cselge      w9,wzr,w10
  00574		 |$LN102@deflate|
  00574	f9400a68	 ldr         x8,[x19,#0x10]
  00578	382b4909	 strb        w9,[x8,w11 uxtw #0]
  0057c	b9402a69	 ldr         w9,[x19,#0x28]

; 886  :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 887  :                       4 : 0));
; 888  :             put_byte(s, s->gzhead->os & 0xff);

  00580	f9401a68	 ldr         x8,[x19,#0x30]
  00584	1100052b	 add         w11,w9,#1
  00588	f9400a69	 ldr         x9,[x19,#0x10]
  0058c	b9002a6b	 str         w11,[x19,#0x28]
  00590	3940310a	 ldrb        w10,[x8,#0xC]
  00594	382b492a	 strb        w10,[x9,w11 uxtw #0]
  00598	b9402a68	 ldr         w8,[x19,#0x28]

; 889  :             if (s->gzhead->extra != Z_NULL) {

  0059c	f9401a69	 ldr         x9,[x19,#0x30]
  005a0	11000502	 add         w2,w8,#1
  005a4	b9002a62	 str         w2,[x19,#0x28]
  005a8	f9400928	 ldr         x8,[x9,#0x10]
  005ac	b4000008	 cbz         x8,|$LN54@deflate|

; 890  :                 put_byte(s, s->gzhead->extra_len & 0xff);

  005b0	39406129	 ldrb        w9,[x9,#0x18]
  005b4	f9400a68	 ldr         x8,[x19,#0x10]
  005b8	38224909	 strb        w9,[x8,w2 uxtw #0]
  005bc	b9402a69	 ldr         w9,[x19,#0x28]

; 891  :                 put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);

  005c0	f9401a68	 ldr         x8,[x19,#0x30]
  005c4	1100052a	 add         w10,w9,#1
  005c8	f9400a69	 ldr         x9,[x19,#0x10]
  005cc	b9002a6a	 str         w10,[x19,#0x28]
  005d0	39406508	 ldrb        w8,[x8,#0x19]
  005d4	382a4928	 strb        w8,[x9,w10 uxtw #0]
  005d8	b9402a69	 ldr         w9,[x19,#0x28]
  005dc	11000522	 add         w2,w9,#1
  005e0	f9401a69	 ldr         x9,[x19,#0x30]
  005e4	b9002a62	 str         w2,[x19,#0x28]
  005e8		 |$LN54@deflate|

; 892  :             }
; 893  :             if (s->gzhead->hcrc)

  005e8	b9403d28	 ldr         w8,[x9,#0x3C]
  005ec	34000008	 cbz         w8,|$LN55@deflate|

; 894  :                 strm->adler = crc32(strm->adler, s->pending_buf,

  005f0	f9400a61	 ldr         x1,[x19,#0x10]
  005f4	b9404e80	 ldr         w0,[x20,#0x4C]
  005f8	94000000	 bl          crc32
  005fc	b9004e80	 str         w0,[x20,#0x4C]
  00600		 |$LN55@deflate|

; 895  :                                     s->pending);
; 896  :             s->gzindex = 0;
; 897  :             s->status = EXTRA_STATE;

  00600	528008a8	 mov         w8,#0x45
  00604	b9003a7f	 str         wzr,[x19,#0x38]
  00608	b9000a68	 str         w8,[x19,#8]

; 969  :     }
; 970  :     if (s->status == HCRC_STATE) {

  0060c	17ffff4b	 b           |$LN143@deflate|
  00610		 |$LN138@deflate|

; 926  :     }
; 927  :     if (s->status == NAME_STATE) {

  00610	7101251f	 cmp         w8,#0x49
  00614	54000001	 bne         |$LN139@deflate|
  00618		 |$LN142@deflate|

; 928  :         if (s->gzhead->name != Z_NULL) {

  00618	f9401a68	 ldr         x8,[x19,#0x30]
  0061c	f9401109	 ldr         x9,[x8,#0x20]
  00620	b4000009	 cbz         x9,|$LN137@deflate|

; 929  :             ulg beg = s->pending;   /* start of bytes to update crc */

  00624	b9402a6d	 ldr         w13,[x19,#0x28]
  00628	2a0d03ec	 mov         w12,w13
  0062c		 |$LL12@deflate|

; 930  :             int val;
; 931  :             do {
; 932  :                 if (s->pending == s->pending_buf_size) {

  0062c	b9401a68	 ldr         w8,[x19,#0x18]
  00630	6b08019f	 cmp         w12,w8
  00634	54000001	 bne         |$LN63@deflate|

; 933  :                     HCRC_UPDATE(beg);

  00638	f9401a68	 ldr         x8,[x19,#0x30]
  0063c	b9403d09	 ldr         w9,[x8,#0x3C]
  00640	7100013f	 cmp         w9,#0
  00644	7a4d1184	 ccmpne      w12,w13,#4
  00648	54000009	 bls         |$LN13@deflate|
  0064c	f9400a68	 ldr         x8,[x19,#0x10]
  00650	4b0d0182	 sub         w2,w12,w13
  00654	b9404e80	 ldr         w0,[x20,#0x4C]
  00658	8b2d4101	 add         x1,x8,w13,uxtw #0
  0065c	94000000	 bl          crc32
  00660	b9004e80	 str         w0,[x20,#0x4C]
  00664		 |$LN13@deflate|

; 934  :                     flush_pending(strm);

  00664	aa1403e0	 mov         x0,x20
  00668	94000000	 bl          flush_pending

; 935  :                     if (s->pending != 0) {

  0066c	b9402a68	 ldr         w8,[x19,#0x28]
  00670	35000008	 cbnz        w8,|$LN144@deflate|

; 936  :                         s->last_flush = -1;
; 937  :                         return Z_OK;
; 938  :                     }
; 939  :                     beg = 0;

  00674	5280000d	 mov         w13,#0
  00678	5280000c	 mov         w12,#0
  0067c		 |$LN63@deflate|

; 940  :                 }
; 941  :                 val = s->gzhead->name[s->gzindex++];

  0067c	f9401a68	 ldr         x8,[x19,#0x30]
  00680	b9403a6a	 ldr         w10,[x19,#0x38]
  00684	f9401109	 ldr         x9,[x8,#0x20]
  00688	11000548	 add         w8,w10,#1
  0068c	386a492b	 ldrb        w11,[x9,w10 uxtw #0]
  00690	b9003a68	 str         w8,[x19,#0x38]

; 942  :                 put_byte(s, val);

  00694	f9400a69	 ldr         x9,[x19,#0x10]
  00698	382c492b	 strb        w11,[x9,w12 uxtw #0]
  0069c	b9402a68	 ldr         w8,[x19,#0x28]
  006a0	1100050c	 add         w12,w8,#1
  006a4	b9002a6c	 str         w12,[x19,#0x28]

; 943  :             } while (val != 0);

  006a8	3500000b	 cbnz        w11,|$LL12@deflate|

; 944  :             HCRC_UPDATE(beg);

  006ac	f9401a68	 ldr         x8,[x19,#0x30]
  006b0	b9403d09	 ldr         w9,[x8,#0x3C]
  006b4	7100013f	 cmp         w9,#0
  006b8	7a4d1184	 ccmpne      w12,w13,#4
  006bc	54000009	 bls         |$LN16@deflate|
  006c0	6b0d019f	 cmp         w12,w13
  006c4	1a9f81ad	 cselhi      w13,w13,wzr
  006c8	d503229f	 csdb
  006cc	f9400a69	 ldr         x9,[x19,#0x10]
  006d0	b9402a68	 ldr         w8,[x19,#0x28]
  006d4	b9404e80	 ldr         w0,[x20,#0x4C]
  006d8	8b2d4121	 add         x1,x9,w13,uxtw #0
  006dc	4b0d0102	 sub         w2,w8,w13
  006e0	94000000	 bl          crc32
  006e4	b9004e80	 str         w0,[x20,#0x4C]
  006e8		 |$LN16@deflate|

; 945  :             s->gzindex = 0;

  006e8	b9003a7f	 str         wzr,[x19,#0x38]
  006ec		 |$LN137@deflate|

; 946  :         }
; 947  :         s->status = COMMENT_STATE;

  006ec	52800b68	 mov         w8,#0x5B
  006f0	b9000a68	 str         w8,[x19,#8]
  006f4	14000003	 b           |$LN141@deflate|
  006f8		 |$LN139@deflate|

; 948  :     }
; 949  :     if (s->status == COMMENT_STATE) {

  006f8	71016d1f	 cmp         w8,#0x5B
  006fc	54000001	 bne         |$LN67@deflate|
  00700		 |$LN141@deflate|

; 950  :         if (s->gzhead->comment != Z_NULL) {

  00700	f9401a68	 ldr         x8,[x19,#0x30]
  00704	f9401909	 ldr         x9,[x8,#0x30]
  00708	b4000009	 cbz         x9,|$LN26@deflate|

; 951  :             ulg beg = s->pending;   /* start of bytes to update crc */

  0070c	b9402a6d	 ldr         w13,[x19,#0x28]
  00710	2a0d03ec	 mov         w12,w13
  00714		 |$LL21@deflate|

; 952  :             int val;
; 953  :             do {
; 954  :                 if (s->pending == s->pending_buf_size) {

  00714	b9401a68	 ldr         w8,[x19,#0x18]
  00718	6b08019f	 cmp         w12,w8
  0071c	54000001	 bne         |$LN69@deflate|

; 955  :                     HCRC_UPDATE(beg);

  00720	f9401a68	 ldr         x8,[x19,#0x30]
  00724	b9403d09	 ldr         w9,[x8,#0x3C]
  00728	7100013f	 cmp         w9,#0
  0072c	7a4d1184	 ccmpne      w12,w13,#4
  00730	54000009	 bls         |$LN22@deflate|
  00734	f9400a68	 ldr         x8,[x19,#0x10]
  00738	4b0d0182	 sub         w2,w12,w13
  0073c	b9404e80	 ldr         w0,[x20,#0x4C]
  00740	8b2d4101	 add         x1,x8,w13,uxtw #0
  00744	94000000	 bl          crc32
  00748	b9004e80	 str         w0,[x20,#0x4C]
  0074c		 |$LN22@deflate|

; 956  :                     flush_pending(strm);

  0074c	aa1403e0	 mov         x0,x20
  00750	94000000	 bl          flush_pending

; 957  :                     if (s->pending != 0) {

  00754	b9402a68	 ldr         w8,[x19,#0x28]
  00758	35000008	 cbnz        w8,|$LN144@deflate|

; 958  :                         s->last_flush = -1;
; 959  :                         return Z_OK;
; 960  :                     }
; 961  :                     beg = 0;

  0075c	5280000d	 mov         w13,#0
  00760	5280000c	 mov         w12,#0
  00764		 |$LN69@deflate|

; 962  :                 }
; 963  :                 val = s->gzhead->comment[s->gzindex++];

  00764	f9401a68	 ldr         x8,[x19,#0x30]
  00768	b9403a6a	 ldr         w10,[x19,#0x38]
  0076c	f9401909	 ldr         x9,[x8,#0x30]
  00770	11000548	 add         w8,w10,#1
  00774	386a492b	 ldrb        w11,[x9,w10 uxtw #0]
  00778	b9003a68	 str         w8,[x19,#0x38]

; 964  :                 put_byte(s, val);

  0077c	f9400a69	 ldr         x9,[x19,#0x10]
  00780	382c492b	 strb        w11,[x9,w12 uxtw #0]
  00784	b9402a68	 ldr         w8,[x19,#0x28]
  00788	1100050c	 add         w12,w8,#1
  0078c	b9002a6c	 str         w12,[x19,#0x28]

; 965  :             } while (val != 0);

  00790	3500000b	 cbnz        w11,|$LL21@deflate|

; 966  :             HCRC_UPDATE(beg);

  00794	f9401a68	 ldr         x8,[x19,#0x30]
  00798	b9403d09	 ldr         w9,[x8,#0x3C]
  0079c	7100013f	 cmp         w9,#0
  007a0	7a4d1184	 ccmpne      w12,w13,#4
  007a4	54000009	 bls         |$LN26@deflate|
  007a8	6b0d019f	 cmp         w12,w13
  007ac	1a9f81ad	 cselhi      w13,w13,wzr
  007b0	d503229f	 csdb
  007b4	f9400a69	 ldr         x9,[x19,#0x10]
  007b8	b9402a68	 ldr         w8,[x19,#0x28]
  007bc	b9404e80	 ldr         w0,[x20,#0x4C]
  007c0	8b2d4121	 add         x1,x9,w13,uxtw #0
  007c4	4b0d0102	 sub         w2,w8,w13
  007c8	94000000	 bl          crc32
  007cc	b9004e80	 str         w0,[x20,#0x4C]
  007d0		 |$LN26@deflate|

; 967  :         }
; 968  :         s->status = HCRC_STATE;

  007d0	52800ce8	 mov         w8,#0x67
  007d4	b9000a68	 str         w8,[x19,#8]

; 969  :     }
; 970  :     if (s->status == HCRC_STATE) {

  007d8	14000003	 b           |$LN134@deflate|
  007dc		 |$LN67@deflate|
  007dc	71019d1f	 cmp         w8,#0x67
  007e0	54000001	 bne         |$LN130@deflate|
  007e4		 |$LN134@deflate|

; 971  :         if (s->gzhead->hcrc) {

  007e4	f9401a68	 ldr         x8,[x19,#0x30]
  007e8	b9403d09	 ldr         w9,[x8,#0x3C]
  007ec	34000009	 cbz         w9,|$LN74@deflate|

; 972  :             if (s->pending + 2 > s->pending_buf_size) {

  007f0	b9402a6a	 ldr         w10,[x19,#0x28]
  007f4	b9401a68	 ldr         w8,[x19,#0x18]
  007f8	11000949	 add         w9,w10,#2
  007fc	6b08013f	 cmp         w9,w8
  00800	54000009	 bls         |$LN129@deflate|

; 973  :                 flush_pending(strm);

  00804	aa1403e0	 mov         x0,x20
  00808	94000000	 bl          flush_pending

; 974  :                 if (s->pending != 0) {

  0080c	b9402a6a	 ldr         w10,[x19,#0x28]
  00810	3500000a	 cbnz        w10,|$LN144@deflate|
  00814		 |$LN129@deflate|

; 975  :                     s->last_flush = -1;
; 976  :                     return Z_OK;
; 977  :                 }
; 978  :             }
; 979  :             put_byte(s, (Byte)(strm->adler & 0xff));

  00814	39413289	 ldrb        w9,[x20,#0x4C]

; 980  :             put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
; 981  :             strm->adler = crc32(0L, Z_NULL, 0);

  00818	52800002	 mov         w2,#0
  0081c	f9400a68	 ldr         x8,[x19,#0x10]
  00820	d2800001	 mov         x1,#0
  00824	52800000	 mov         w0,#0
  00828	382a4909	 strb        w9,[x8,w10 uxtw #0]
  0082c	b9402a69	 ldr         w9,[x19,#0x28]
  00830	f9400a6a	 ldr         x10,[x19,#0x10]
  00834	1100052b	 add         w11,w9,#1
  00838	b9002a6b	 str         w11,[x19,#0x28]
  0083c	39413688	 ldrb        w8,[x20,#0x4D]
  00840	382b4948	 strb        w8,[x10,w11 uxtw #0]
  00844	b9402a69	 ldr         w9,[x19,#0x28]
  00848	1100052a	 add         w10,w9,#1
  0084c	b9002a6a	 str         w10,[x19,#0x28]
  00850	94000000	 bl          crc32
  00854	b9004e80	 str         w0,[x20,#0x4C]
  00858		 |$LN74@deflate|

; 982  :         }
; 983  :         s->status = BUSY_STATE;
; 984  : 
; 985  :         /* Compression must start with an empty pending buffer */
; 986  :         flush_pending(strm);

  00858	aa1403e0	 mov         x0,x20
  0085c	b9000a79	 str         w25,[x19,#8]
  00860	94000000	 bl          flush_pending

; 987  :         if (s->pending != 0) {

  00864	b9402a68	 ldr         w8,[x19,#0x28]
  00868	35000008	 cbnz        w8,|$LN144@deflate|
  0086c		 |$LN130@deflate|

; 988  :             s->last_flush = -1;
; 989  :             return Z_OK;
; 990  :         }
; 991  :     }
; 992  : #endif
; 993  : 
; 994  :     /* Start a new block or continue the current one.
; 995  :      */
; 996  :     if (strm->avail_in != 0 || s->lookahead != 0 ||

  0086c	b9400a88	 ldr         w8,[x20,#8]
  00870	35000008	 cbnz        w8,|$LN79@deflate|
  00874	b9409e68	 ldr         w8,[x19,#0x9C]
  00878	35000008	 cbnz        w8,|$LN79@deflate|
  0087c	34000016	 cbz         w22,|$LN84@deflate|
  00880	b9400a68	 ldr         w8,[x19,#8]
  00884	710a691f	 cmp         w8,#0x29A
  00888	54000000	 beq         |$LN91@deflate|
  0088c		 |$LN79@deflate|

; 997  :         (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {
; 998  :         block_state bstate;
; 999  : 
; 1000 :         bstate = s->level == 0 ? deflate_stored(s, flush) :

  0088c	b940ae69	 ldr         w9,[x19,#0xAC]
  00890	2a1603e1	 mov         w1,w22
  00894	aa1303e0	 mov         x0,x19
  00898	35000009	 cbnz        w9,|$LN110@deflate|
  0089c	94000000	 bl          deflate_stored
  008a0	1400000f	 b           |$LN107@deflate|
  008a4		 |$LN110@deflate|
  008a4	b940b268	 ldr         w8,[x19,#0xB0]
  008a8	7100091f	 cmp         w8,#2
  008ac	54000001	 bne         |$LN108@deflate|
  008b0	94000000	 bl          deflate_huff
  008b4	1400000a	 b           |$LN107@deflate|
  008b8		 |$LN108@deflate|
  008b8	71000d1f	 cmp         w8,#3
  008bc	54000001	 bne         |$LN106@deflate|
  008c0	94000000	 bl          deflate_rle
  008c4	14000006	 b           |$LN107@deflate|
  008c8		 |$LN106@deflate|
  008c8	90000048	 adrp        x8,configuration_table+#8
  008cc	91002108	 add         x8,x8,PageOffset(configuration_table)+#8
  008d0	937c7d29	 sbfiz       x9,x9,#4,#0x20
  008d4	f8686928	 ldr         x8,[x9,x8]
  008d8	d63f0100	 blr         x8
  008dc		 |$LN107@deflate|

; 1001 :                  s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
; 1002 :                  s->strategy == Z_RLE ? deflate_rle(s, flush) :
; 1003 :                  (*(configuration_table[s->level].func))(s, flush);
; 1004 : 
; 1005 :         if (bstate == finish_started || bstate == finish_done) {

  008dc	51000808	 sub         w8,w0,#2
  008e0	7100051f	 cmp         w8,#1
  008e4	54000008	 bhi         |$LN80@deflate|

; 1006 :             s->status = FINISH_STATE;

  008e8	52805348	 mov         w8,#0x29A
  008ec	b9000a68	 str         w8,[x19,#8]
  008f0		 |$LN80@deflate|

; 1007 :         }
; 1008 :         if (bstate == need_more || bstate == finish_started) {

  008f0	721e781f	 tst         w0,#0xFFFFFFFD
  008f4	54000000	 beq         |$LN83@deflate|

; 1010 :                 s->last_flush = -1; /* avoid BUF_ERROR next call, see above */
; 1011 :             }
; 1012 :             return Z_OK;
; 1013 :             /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
; 1014 :              * of deflate should use the same flush parameter to make sure
; 1015 :              * that the flush is complete. So we don't have to output an
; 1016 :              * empty block here, this will be done at next call. This also
; 1017 :              * ensures that for a very small output buffer, we emit at most
; 1018 :              * one empty block.
; 1019 :              */
; 1020 :         }
; 1021 :         if (bstate == block_done) {

  008f8	7100041f	 cmp         w0,#1
  008fc	54000001	 bne         |$LN91@deflate|

; 1022 :             if (flush == Z_PARTIAL_FLUSH) {

  00900	710006df	 cmp         w22,#1
  00904	54000001	 bne         |$LN86@deflate|

; 1023 :                 _tr_align(s);

  00908	aa1303e0	 mov         x0,x19
  0090c	94000000	 bl          _tr_align
  00910	14000019	 b           |$LN90@deflate|
  00914		 |$LN86@deflate|

; 1024 :             } else if (flush != Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

  00914	710016df	 cmp         w22,#5
  00918	54000000	 beq         |$LN90@deflate|

; 1025 :                 _tr_stored_block(s, (char*)0, 0L, 0);

  0091c	52800003	 mov         w3,#0
  00920	52800002	 mov         w2,#0
  00924	d2800001	 mov         x1,#0
  00928	aa1303e0	 mov         x0,x19
  0092c	94000000	 bl          _tr_stored_block

; 1026 :                 /* For a full flush, this empty block will be recognized
; 1027 :                  * as a special marker by inflate_sync().
; 1028 :                  */
; 1029 :                 if (flush == Z_FULL_FLUSH) {

  00930	71000edf	 cmp         w22,#3
  00934	54000001	 bne         |$LN90@deflate|

; 1030 :                     CLEAR_HASH(s);             /* forget history */

  00938	b9407668	 ldr         w8,[x19,#0x74]
  0093c	52800001	 mov         w1,#0
  00940	f9403669	 ldr         x9,[x19,#0x68]
  00944	5100050a	 sub         w10,w8,#1
  00948	782a593f	 strh        wzr,[x9,w10 uxtw #1]
  0094c	b9407668	 ldr         w8,[x19,#0x74]
  00950	f9403660	 ldr         x0,[x19,#0x68]
  00954	5100050a	 sub         w10,w8,#1
  00958	d37f7d42	 ubfiz       x2,x10,#1,#0x20
  0095c	94000000	 bl          memset

; 1031 :                     if (s->lookahead == 0) {

  00960	b9409e68	 ldr         w8,[x19,#0x9C]
  00964	35000008	 cbnz        w8,|$LN90@deflate|

; 1032 :                         s->strstart = 0;

  00968	b900967f	 str         wzr,[x19,#0x94]

; 1033 :                         s->block_start = 0L;

  0096c	b900867f	 str         wzr,[x19,#0x84]

; 1034 :                         s->insert = 0;

  00970	b9170e7f	 str         wzr,[x19,#0x170C]
  00974		 |$LN90@deflate|

; 1035 :                     }
; 1036 :                 }
; 1037 :             }
; 1038 :             flush_pending(strm);

  00974	aa1403e0	 mov         x0,x20
  00978	94000000	 bl          flush_pending

; 1039 :             if (strm->avail_out == 0) {

  0097c	b9401a88	 ldr         w8,[x20,#0x18]
  00980	34000008	 cbz         w8,|$LN144@deflate|
  00984		 |$LN91@deflate|

; 1040 :               s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */
; 1041 :               return Z_OK;
; 1042 :             }
; 1043 :         }
; 1044 :     }
; 1045 : 
; 1046 :     if (flush != Z_FINISH) return Z_OK;

  00984	710012df	 cmp         w22,#4
  00988	54000001	 bne         |$LN84@deflate|

; 1047 :     if (s->wrap <= 0) return Z_STREAM_END;

  0098c	b9402e68	 ldr         w8,[x19,#0x2C]
  00990	7100011f	 cmp         w8,#0
  00994	5400000c	 bgt         |$LN93@deflate|
  00998	52800020	 mov         w0,#1
  0099c	1400004f	 b           |$LN1@deflate|
  009a0		 |$LN93@deflate|

; 1048 : 
; 1049 :     /* Write the trailer */
; 1050 : #ifdef GZIP
; 1051 :     if (s->wrap == 2) {

  009a0	b9404e8a	 ldr         w10,[x20,#0x4C]
  009a4	7100091f	 cmp         w8,#2
  009a8	54000001	 bne         |$LN94@deflate|

; 1052 :         put_byte(s, (Byte)(strm->adler & 0xff));

  009ac	b9402a69	 ldr         w9,[x19,#0x28]
  009b0	f9400a68	 ldr         x8,[x19,#0x10]
  009b4	3829490a	 strb        w10,[x8,w9 uxtw #0]
  009b8	b9402a69	 ldr         w9,[x19,#0x28]

; 1053 :         put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

  009bc	f9400a6a	 ldr         x10,[x19,#0x10]
  009c0	1100052b	 add         w11,w9,#1
  009c4	b9002a6b	 str         w11,[x19,#0x28]
  009c8	39413688	 ldrb        w8,[x20,#0x4D]
  009cc	382b4948	 strb        w8,[x10,w11 uxtw #0]
  009d0	b9402a69	 ldr         w9,[x19,#0x28]

; 1054 :         put_byte(s, (Byte)((strm->adler >> 16) & 0xff));

  009d4	f9400a6a	 ldr         x10,[x19,#0x10]
  009d8	1100052c	 add         w12,w9,#1
  009dc	b9002a6c	 str         w12,[x19,#0x28]
  009e0	39413a88	 ldrb        w8,[x20,#0x4E]
  009e4	382c4948	 strb        w8,[x10,w12 uxtw #0]
  009e8	b9402a69	 ldr         w9,[x19,#0x28]

; 1055 :         put_byte(s, (Byte)((strm->adler >> 24) & 0xff));

  009ec	f9400a6a	 ldr         x10,[x19,#0x10]
  009f0	1100052b	 add         w11,w9,#1
  009f4	b9002a6b	 str         w11,[x19,#0x28]
  009f8	39413e88	 ldrb        w8,[x20,#0x4F]
  009fc	382b4948	 strb        w8,[x10,w11 uxtw #0]
  00a00	b9402a69	 ldr         w9,[x19,#0x28]

; 1056 :         put_byte(s, (Byte)(strm->total_in & 0xff));

  00a04	f9400a68	 ldr         x8,[x19,#0x10]
  00a08	1100052c	 add         w12,w9,#1
  00a0c	b9002a6c	 str         w12,[x19,#0x28]
  00a10	3940328a	 ldrb        w10,[x20,#0xC]
  00a14	382c490a	 strb        w10,[x8,w12 uxtw #0]
  00a18	b9402a69	 ldr         w9,[x19,#0x28]

; 1057 :         put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));

  00a1c	f9400a6a	 ldr         x10,[x19,#0x10]
  00a20	1100052b	 add         w11,w9,#1
  00a24	b9002a6b	 str         w11,[x19,#0x28]
  00a28	39403688	 ldrb        w8,[x20,#0xD]
  00a2c	382b4948	 strb        w8,[x10,w11 uxtw #0]
  00a30	b9402a69	 ldr         w9,[x19,#0x28]

; 1058 :         put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));

  00a34	f9400a6a	 ldr         x10,[x19,#0x10]
  00a38	1100052c	 add         w12,w9,#1
  00a3c	b9002a6c	 str         w12,[x19,#0x28]
  00a40	39403a88	 ldrb        w8,[x20,#0xE]
  00a44	382c4948	 strb        w8,[x10,w12 uxtw #0]
  00a48	b9402a69	 ldr         w9,[x19,#0x28]

; 1059 :         put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));

  00a4c	f9400a6a	 ldr         x10,[x19,#0x10]
  00a50	1100052b	 add         w11,w9,#1
  00a54	b9002a6b	 str         w11,[x19,#0x28]
  00a58	39403e88	 ldrb        w8,[x20,#0xF]
  00a5c	382b4948	 strb        w8,[x10,w11 uxtw #0]
  00a60	b9402a69	 ldr         w9,[x19,#0x28]
  00a64	1100052a	 add         w10,w9,#1
  00a68	b9002a6a	 str         w10,[x19,#0x28]

; 1060 :     }

  00a6c	14000006	 b           |$LN95@deflate|
  00a70		 |$LN94@deflate|

; 1061 :     else
; 1062 : #endif
; 1063 :     {
; 1064 :         putShortMSB(s, (uInt)(strm->adler >> 16));

  00a70	53107d41	 lsr         w1,w10,#0x10
  00a74	aa1303e0	 mov         x0,x19
  00a78	94000000	 bl          putShortMSB

; 1065 :         putShortMSB(s, (uInt)(strm->adler & 0xffff));

  00a7c	79409a81	 ldrh        w1,[x20,#0x4C]
  00a80	94000000	 bl          putShortMSB
  00a84		 |$LN95@deflate|

; 1066 :     }
; 1067 :     flush_pending(strm);

  00a84	aa1403e0	 mov         x0,x20
  00a88	94000000	 bl          flush_pending

; 1068 :     /* If avail_out is zero, the application will call deflate again
; 1069 :      * to flush the rest.
; 1070 :      */
; 1071 :     if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */

  00a8c	b9402e68	 ldr         w8,[x19,#0x2C]
  00a90	7100011f	 cmp         w8,#0
  00a94	5400000d	 ble         |$LN96@deflate|
  00a98	4b0803e8	 neg         w8,w8
  00a9c	b9002e68	 str         w8,[x19,#0x2C]
  00aa0		 |$LN96@deflate|

; 1072 :     return s->pending != 0 ? Z_OK : Z_STREAM_END;

  00aa0	b9402a68	 ldr         w8,[x19,#0x28]
  00aa4	7100011f	 cmp         w8,#0
  00aa8	1a9f17e0	 cseteq      w0
  00aac	1400000b	 b           |$LN1@deflate|
  00ab0		 |$LN83@deflate|

; 1009 :             if (strm->avail_out == 0) {

  00ab0	b9401a88	 ldr         w8,[x20,#0x18]
  00ab4	35000008	 cbnz        w8,|$LN84@deflate|
  00ab8		 |$LN144@deflate|

; 1073 : }

  00ab8	12800008	 mov         w8,#-1
  00abc	b9004268	 str         w8,[x19,#0x40]
  00ac0		 |$LN84@deflate|
  00ac0	52800000	 mov         w0,#0
  00ac4	14000005	 b           |$LN1@deflate|
  00ac8		 |$LN31@deflate|

; 777  :         (s->status == FINISH_STATE && flush != Z_FINISH)) {
; 778  :         ERR_RETURN(strm, Z_STREAM_ERROR);

  00ac8	90000008	 adrp        x8,|??_C@_0N@MKKNPMJD@stream?5error@|
  00acc	91000108	 add         x8,x8,PageOffset(|??_C@_0N@MKKNPMJD@stream?5error@|)
  00ad0	f9001288	 str         x8,[x20,#0x20]
  00ad4		 |$LN29@deflate|

; 1073 : }

  00ad4	12800020	 mov         w0,#-2
  00ad8		 |$LN1@deflate|
  00ad8	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00adc	f9401bf9	 ldr         x25,[sp,#0x30]
  00ae0	a94263f7	 ldp         x23,x24,[sp,#0x20]
  00ae4	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00ae8	a8c453f3	 ldp         x19,x20,[sp],#0x40
  00aec	d65f03c0	 ret

			 ENDP  ; |deflate|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |deflateEnd| PROC

; 1078 : {

  00000		 |$LN9|
  00000	a9bf53f3	 stp         x19,x20,[sp,#-0x10]!
  00004	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00008	910003fd	 mov         fp,sp
  0000c	aa0003f3	 mov         x19,x0

; 1079 :     int status;
; 1080 : 
; 1081 :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00010	94000000	 bl          deflateStateCheck
  00014	34000000	 cbz         w0,|$LN2@deflateEnd|
  00018	12800020	 mov         w0,#-2
  0001c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00020	a8c153f3	 ldp         x19,x20,[sp],#0x10
  00024	d65f03c0	 ret
  00028		 |$LN2@deflateEnd|

; 1082 : 
; 1083 :     status = strm->state->status;

  00028	f9401661	 ldr         x1,[x19,#0x28]
  0002c	b9400834	 ldr         w20,[x1,#8]

; 1084 : 
; 1085 :     /* Deallocate in reverse order of allocations: */
; 1086 :     TRY_FREE(strm, strm->state->pending_buf);

  00030	f9400828	 ldr         x8,[x1,#0x10]
  00034	b4000008	 cbz         x8,|$LN3@deflateEnd|
  00038	aa0803e1	 mov         x1,x8
  0003c	a9438268	 ldp         x8,x0,[x19,#0x38]
  00040	d63f0100	 blr         x8
  00044	f9401661	 ldr         x1,[x19,#0x28]
  00048		 |$LN3@deflateEnd|

; 1087 :     TRY_FREE(strm, strm->state->head);

  00048	f9403428	 ldr         x8,[x1,#0x68]
  0004c	b4000008	 cbz         x8,|$LN4@deflateEnd|
  00050	aa0803e1	 mov         x1,x8
  00054	a9438268	 ldp         x8,x0,[x19,#0x38]
  00058	d63f0100	 blr         x8
  0005c	f9401661	 ldr         x1,[x19,#0x28]
  00060		 |$LN4@deflateEnd|

; 1088 :     TRY_FREE(strm, strm->state->prev);

  00060	f9403028	 ldr         x8,[x1,#0x60]
  00064	b4000008	 cbz         x8,|$LN5@deflateEnd|
  00068	aa0803e1	 mov         x1,x8
  0006c	a9438268	 ldp         x8,x0,[x19,#0x38]
  00070	d63f0100	 blr         x8
  00074	f9401661	 ldr         x1,[x19,#0x28]
  00078		 |$LN5@deflateEnd|

; 1089 :     TRY_FREE(strm, strm->state->window);

  00078	f9402828	 ldr         x8,[x1,#0x50]
  0007c	b4000008	 cbz         x8,|$LN6@deflateEnd|
  00080	aa0803e1	 mov         x1,x8
  00084	a9438268	 ldp         x8,x0,[x19,#0x38]
  00088	d63f0100	 blr         x8
  0008c	f9401661	 ldr         x1,[x19,#0x28]
  00090		 |$LN6@deflateEnd|

; 1090 : 
; 1091 :     ZFREE(strm, strm->state);

  00090	a9438268	 ldp         x8,x0,[x19,#0x38]
  00094	d63f0100	 blr         x8

; 1092 :     strm->state = Z_NULL;
; 1093 : 
; 1094 :     return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;

  00098	7101c69f	 cmp         w20,#0x71
  0009c	f900167f	 str         xzr,[x19,#0x28]
  000a0	12800048	 mov         w8,#-3
  000a4	1a9f0100	 cseleq      w0,w8,wzr
  000a8	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000ac	a8c153f3	 ldp         x19,x20,[sp],#0x10
  000b0	d65f03c0	 ret

			 ENDP  ; |deflateEnd|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |deflateInit_| PROC

; 234  :     return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,

  00000	2a0303e7	 mov         w7,w3
  00004	aa0203e6	 mov         x6,x2
  00008	528001e3	 mov         w3,#0xF
  0000c	52800102	 mov         w2,#8
  00010	52800005	 mov         w5,#0
  00014	52800104	 mov         w4,#8
  00018	14000000	 b           deflateInit2_

			 ENDP  ; |deflateInit_|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |slide_hash| PROC

; 204  :     unsigned n, m;
; 205  :     Posf *p;
; 206  :     uInt wsize = s->w_size;
; 207  : 
; 208  :     n = s->hash_size;

  00000	b940740c	 ldr         w12,[x0,#0x74]

; 209  :     p = &s->head[n];

  00004	f9403408	 ldr         x8,[x0,#0x68]
  00008	b940440b	 ldr         w11,[x0,#0x44]
  0000c	8b2c450d	 add         x13,x8,w12,uxtw #1
  00010		 |$LL4@slide_hash|

; 210  :     do {
; 211  :         m = *--p;

  00010	785fedaa	 ldrh        w10,[x13,#-2]!

; 212  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);
; 213  :     } while (--n);

  00014	5100058c	 sub         w12,w12,#1
  00018	4b0b0148	 sub         w8,w10,w11
  0001c	53003d09	 uxth        w9,w8
  00020	6b0b015f	 cmp         w10,w11
  00024	1a9f2129	 cselhs      w9,w9,wzr
  00028	790001a9	 strh        w9,[x13]
  0002c	3500000c	 cbnz        w12,|$LL4@slide_hash|

; 214  :     n = wsize;
; 215  : #ifndef FASTEST
; 216  :     p = &s->prev[n];

  00030	f9403008	 ldr         x8,[x0,#0x60]
  00034	2a0b03ec	 mov         w12,w11
  00038	8b2b450d	 add         x13,x8,w11,uxtw #1
  0003c		 |$LL7@slide_hash|

; 217  :     do {
; 218  :         m = *--p;

  0003c	785fedaa	 ldrh        w10,[x13,#-2]!

; 219  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);
; 220  :         /* If n is not on any hash chain, prev[n] is garbage but
; 221  :          * its value will never be used.
; 222  :          */
; 223  :     } while (--n);

  00040	5100058c	 sub         w12,w12,#1
  00044	4b0b0148	 sub         w8,w10,w11
  00048	53003d09	 uxth        w9,w8
  0004c	6b0b015f	 cmp         w10,w11
  00050	1a9f2129	 cselhs      w9,w9,wzr
  00054	790001a9	 strh        w9,[x13]
  00058	3500000c	 cbnz        w12,|$LL7@slide_hash|
  0005c	d65f03c0	 ret

			 ENDP  ; |slide_hash|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |deflateInit2_| PROC

; 250  : {

  00000		 |$LN21|
  00000	a9bc53f3	 stp         x19,x20,[sp,#-0x40]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	a90263f7	 stp         x23,x24,[sp,#0x20]
  0000c	f9001bf9	 str         x25,[sp,#0x30]
  00010	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00014	910003fd	 mov         fp,sp
  00018	aa0003f3	 mov         x19,x0
  0001c	2a0303f4	 mov         w20,w3
  00020	2a0403f9	 mov         w25,w4
  00024	2a0503f8	 mov         w24,w5

; 251  :     deflate_state *s;
; 252  :     int wrap = 1;

  00028	52800036	 mov         w22,#1

; 253  :     static const char my_version[] = ZLIB_VERSION;
; 254  : 
; 255  :     ushf *overlay;
; 256  :     /* We overlay pending_buf and d_buf+l_buf. This works since the average
; 257  :      * output size for (length,distance) codes is <= 24 bits.
; 258  :      */
; 259  : 
; 260  :     if (version == Z_NULL || version[0] != my_version[0] ||

  0002c	b4000006	 cbz         x6,|$LN3@deflateIni|
  00030	39c000c8	 ldrsb       w8,[x6]
  00034	7100c51f	 cmp         w8,#0x31
  00038	54000001	 bne         |$LN3@deflateIni|
  0003c	710160ff	 cmp         w7,#0x58
  00040	54000001	 bne         |$LN3@deflateIni|

; 263  :     }
; 264  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

  00044	b4000013	 cbz         x19,|$LN12@deflateIni|

; 265  : 
; 266  :     strm->msg = Z_NULL;
; 267  :     if (strm->zalloc == (alloc_func)0) {

  00048	f9401a68	 ldr         x8,[x19,#0x30]
  0004c	f900127f	 str         xzr,[x19,#0x20]
  00050	b5000008	 cbnz        x8,|$LN5@deflateIni|

; 268  : #ifdef Z_SOLO
; 269  :         return Z_STREAM_ERROR;
; 270  : #else
; 271  :         strm->zalloc = zcalloc;

  00054	90000008	 adrp        x8,zcalloc
  00058	91000108	 add         x8,x8,PageOffset(zcalloc)

; 272  :         strm->opaque = (voidpf)0;

  0005c	f900227f	 str         xzr,[x19,#0x40]
  00060	f9001a68	 str         x8,[x19,#0x30]
  00064		 |$LN5@deflateIni|

; 273  : #endif
; 274  :     }
; 275  :     if (strm->zfree == (free_func)0)

  00064	f9401e68	 ldr         x8,[x19,#0x38]
  00068	b5000008	 cbnz        x8,|$LN6@deflateIni|

; 276  : #ifdef Z_SOLO
; 277  :         return Z_STREAM_ERROR;
; 278  : #else
; 279  :         strm->zfree = zcfree;

  0006c	90000008	 adrp        x8,zcfree
  00070	91000108	 add         x8,x8,PageOffset(zcfree)
  00074	f9001e68	 str         x8,[x19,#0x38]
  00078		 |$LN6@deflateIni|

; 280  : #endif
; 281  : 
; 282  : #ifdef FASTEST
; 283  :     if (level != 0) level = 1;
; 284  : #else
; 285  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;
; 286  : #endif
; 287  : 
; 288  :     if (windowBits < 0) { /* suppress zlib wrapper */

  00078	3100043f	 cmn         w1,#1
  0007c	528000c8	 mov         w8,#6
  00080	1a881037	 cselne      w23,w1,w8
  00084	36f80014	 tbz         x20,#0x1F,|$LN8@deflateIni|

; 289  :         wrap = 0;

  00088	52800016	 mov         w22,#0

; 290  :         windowBits = -windowBits;

  0008c	4b1403f4	 neg         w20,w20

; 291  :     }

  00090	14000005	 b           |$LN10@deflateIni|
  00094		 |$LN8@deflateIni|

; 292  : #ifdef GZIP
; 293  :     else if (windowBits > 15) {

  00094	71003e9f	 cmp         w20,#0xF
  00098	5400000d	 ble         |$LN10@deflateIni|

; 294  :         wrap = 2;       /* write gzip wrapper instead */

  0009c	52800056	 mov         w22,#2

; 295  :         windowBits -= 16;

  000a0	51004294	 sub         w20,w20,#0x10
  000a4		 |$LN10@deflateIni|

; 296  :     }
; 297  : #endif
; 298  :     if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
; 299  :         windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
; 300  :         strategy < 0 || strategy > Z_FIXED || (windowBits == 8 && wrap != 1)) {

  000a4	51000728	 sub         w8,w25,#1
  000a8	7100211f	 cmp         w8,#8
  000ac	7a489840	 ccmpls      w2,#8,#0
  000b0	54000001	 bne         |$LN12@deflateIni|
  000b4	51002288	 sub         w8,w20,#8
  000b8	71001d1f	 cmp         w8,#7
  000bc	7a499aea	 ccmpls      w23,#9,#0xA
  000c0	7a449b0a	 ccmpls      w24,#4,#0xA
  000c4	54000008	 bhi         |$LN12@deflateIni|
  000c8	7100229f	 cmp         w20,#8
  000cc	54000001	 bne         |$LN13@deflateIni|
  000d0	710006df	 cmp         w22,#1
  000d4	54000001	 bne         |$LN12@deflateIni|

; 302  :     }
; 303  :     if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */

  000d8	52800134	 mov         w20,#9
  000dc		 |$LN13@deflateIni|

; 304  :     s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));

  000dc	f9402260	 ldr         x0,[x19,#0x40]
  000e0	5282e402	 mov         w2,#0x1720
  000e4	f9401a68	 ldr         x8,[x19,#0x30]
  000e8	52800021	 mov         w1,#1
  000ec	d63f0100	 blr         x8
  000f0	aa0003f5	 mov         x21,x0

; 305  :     if (s == Z_NULL) return Z_MEM_ERROR;

  000f4	b4000015	 cbz         x21,|$LN19@deflateIni|

; 306  :     strm->state = (struct internal_state FAR *)s;

  000f8	f9001675	 str         x21,[x19,#0x28]

; 307  :     s->strm = strm;
; 308  :     s->status = INIT_STATE;     /* to pass state test in deflateReset() */

  000fc	52800548	 mov         w8,#0x2A
  00100	b9000aa8	 str         w8,[x21,#8]

; 309  : 
; 310  :     s->wrap = wrap;
; 311  :     s->gzhead = Z_NULL;
; 312  :     s->w_bits = (uInt)windowBits;
; 313  :     s->w_size = 1 << s->w_bits;

  00104	52800028	 mov         w8,#1
  00108	1ad42101	 lsl         w1,w8,w20
  0010c	f90002b3	 str         x19,[x21]

; 314  :     s->w_mask = s->w_size - 1;

  00110	51000428	 sub         w8,w1,#1
  00114	b9002eb6	 str         w22,[x21,#0x2C]
  00118	290922b4	 stp         w20,w8,[x21,#0x48]

; 315  : 
; 316  :     s->hash_bits = (uInt)memLevel + 7;

  0011c	11001f29	 add         w9,w25,#7

; 317  :     s->hash_size = 1 << s->hash_bits;

  00120	52800028	 mov         w8,#1
  00124	b9007aa9	 str         w9,[x21,#0x78]
  00128	1ac92108	 lsl         w8,w8,w9
  0012c	f9001abf	 str         xzr,[x21,#0x30]
  00130	b90076a8	 str         w8,[x21,#0x74]

; 318  :     s->hash_mask = s->hash_size - 1;

  00134	51000508	 sub         w8,w8,#1

; 319  :     s->hash_shift =  ((s->hash_bits+MIN_MATCH-1)/MIN_MATCH);

  00138	11000929	 add         w9,w9,#2
  0013c	b9007ea8	 str         w8,[x21,#0x7C]
  00140	5295556a	 mov         w10,#0xAAAB
  00144	72b5554a	 movk        w10,#0xAAAA,lsl #0x10
  00148	b90046a1	 str         w1,[x21,#0x44]
  0014c	9baa7d28	 umull       x8,w9,w10

; 320  : 
; 321  :     s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));

  00150	52800042	 mov         w2,#2
  00154	d360fd09	 lsr         x9,x8,#0x20
  00158	53017d2b	 lsr         w11,w9,#1
  0015c	b90082ab	 str         w11,[x21,#0x80]
  00160	f9402260	 ldr         x0,[x19,#0x40]
  00164	f9401a68	 ldr         x8,[x19,#0x30]
  00168	d63f0100	 blr         x8

; 322  :     s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));

  0016c	b94046a1	 ldr         w1,[x21,#0x44]
  00170	52800042	 mov         w2,#2
  00174	f9002aa0	 str         x0,[x21,#0x50]
  00178	f9402260	 ldr         x0,[x19,#0x40]
  0017c	f9401a68	 ldr         x8,[x19,#0x30]
  00180	d63f0100	 blr         x8

; 323  :     s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));

  00184	b94076a1	 ldr         w1,[x21,#0x74]
  00188	52800042	 mov         w2,#2
  0018c	f90032a0	 str         x0,[x21,#0x60]
  00190	f9402260	 ldr         x0,[x19,#0x40]
  00194	f9401a68	 ldr         x8,[x19,#0x30]
  00198	d63f0100	 blr         x8

; 324  : 
; 325  :     s->high_water = 0;      /* nothing written to s->window yet */
; 326  : 
; 327  :     s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  0019c	11001b28	 add         w8,w25,#6
  001a0	b9171abf	 str         wzr,[x21,#0x1718]
  001a4	52800029	 mov         w9,#1
  001a8	1ac82121	 lsl         w1,w9,w8
  001ac	f90036a0	 str         x0,[x21,#0x68]
  001b0	b916f2a1	 str         w1,[x21,#0x16F0]

; 328  : 
; 329  :     overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);

  001b4	f9402260	 ldr         x0,[x19,#0x40]
  001b8	52800082	 mov         w2,#4
  001bc	f9401a68	 ldr         x8,[x19,#0x30]
  001c0	d63f0100	 blr         x8

; 330  :     s->pending_buf = (uchf *) overlay;
; 331  :     s->pending_buf_size = (ulg)s->lit_bufsize * (sizeof(ush)+2L);

  001c4	b956f2ab	 ldr         w11,[x21,#0x16F0]

; 332  : 
; 333  :     if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||

  001c8	f9402aa9	 ldr         x9,[x21,#0x50]
  001cc	f9000aa0	 str         x0,[x21,#0x10]
  001d0	531e7568	 lsl         w8,w11,#2
  001d4	b9001aa8	 str         w8,[x21,#0x18]
  001d8	b4000009	 cbz         x9,|$LN16@deflateIni|
  001dc	f94032a8	 ldr         x8,[x21,#0x60]
  001e0	b4000008	 cbz         x8,|$LN16@deflateIni|
  001e4	f94036a8	 ldr         x8,[x21,#0x68]
  001e8	b4000008	 cbz         x8,|$LN16@deflateIni|
  001ec	b4000000	 cbz         x0,|$LN16@deflateIni|

; 338  :         return Z_MEM_ERROR;
; 339  :     }
; 340  :     s->d_buf = overlay + s->lit_bufsize/sizeof(ush);

  001f0	d341fd69	 lsr         x9,x11,#1

; 341  :     s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
; 342  : 
; 343  :     s->level = level;

  001f4	2915e2b7	 stp         w23,w24,[x21,#0xAC]
  001f8	8b09040a	 add         x10,x0,x9,lsl #1

; 344  :     s->strategy = strategy;
; 345  :     s->method = (Byte)method;

  001fc	52800108	 mov         w8,#8
  00200	8b0b0569	 add         x9,x11,x11,lsl #1
  00204	3900f2a8	 strb        w8,[x21,#0x3C]
  00208	f90b7eaa	 str         x10,[x21,#0x16F8]
  0020c	8b00012a	 add         x10,x9,x0

; 346  : 
; 347  :     return deflateReset(strm);

  00210	aa1303e0	 mov         x0,x19
  00214	f90b76aa	 str         x10,[x21,#0x16E8]
  00218	94000000	 bl          deflateReset
  0021c	1400000d	 b           |$LN1@deflateIni|
  00220		 |$LN16@deflateIni|

; 334  :         s->pending_buf == Z_NULL) {
; 335  :         s->status = FINISH_STATE;

  00220	52805348	 mov         w8,#0x29A
  00224	b9000aa8	 str         w8,[x21,#8]

; 336  :         strm->msg = ERR_MSG(Z_MEM_ERROR);

  00228	90000009	 adrp        x9,|??_C@_0BE@OGGJBMCE@insufficient?5memory@|
  0022c	91000128	 add         x8,x9,PageOffset(|??_C@_0BE@OGGJBMCE@insufficient?5memory@|)

; 337  :         deflateEnd (strm);

  00230	aa1303e0	 mov         x0,x19
  00234	f9001268	 str         x8,[x19,#0x20]
  00238	94000000	 bl          deflateEnd
  0023c		 |$LN19@deflateIni|

; 348  : }

  0023c	12800060	 mov         w0,#-4
  00240	14000004	 b           |$LN1@deflateIni|
  00244		 |$LN12@deflateIni|

; 301  :         return Z_STREAM_ERROR;

  00244	12800020	 mov         w0,#-2
  00248	14000002	 b           |$LN1@deflateIni|
  0024c		 |$LN3@deflateIni|

; 261  :         stream_size != sizeof(z_stream)) {
; 262  :         return Z_VERSION_ERROR;

  0024c	128000a0	 mov         w0,#-6
  00250		 |$LN1@deflateIni|
  00250	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00254	f9401bf9	 ldr         x25,[sp,#0x30]
  00258	a94263f7	 ldp         x23,x24,[sp,#0x20]
  0025c	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00260	a8c453f3	 ldp         x19,x20,[sp],#0x40
  00264	d65f03c0	 ret

			 ENDP  ; |deflateInit2_|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |deflateStateCheck| PROC

; 356  :     deflate_state *s;
; 357  :     if (strm == Z_NULL ||
; 358  :         strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0)

  00000	b4000000	 cbz         x0,|$LN3@deflateSta|
  00004	f9401808	 ldr         x8,[x0,#0x30]
  00008	b4000008	 cbz         x8,|$LN3@deflateSta|
  0000c	f9401c08	 ldr         x8,[x0,#0x38]
  00010	b4000008	 cbz         x8,|$LN3@deflateSta|

; 360  :     s = strm->state;

  00014	f9401409	 ldr         x9,[x0,#0x28]

; 361  :     if (s == Z_NULL || s->strm != strm || (s->status != INIT_STATE &&

  00018	b4000009	 cbz         x9,|$LN3@deflateSta|
  0001c	f9400128	 ldr         x8,[x9]
  00020	eb00011f	 cmp         x8,x0
  00024	54000001	 bne         |$LN3@deflateSta|
  00028	b9400929	 ldr         w9,[x9,#8]
  0002c	5100a928	 sub         w8,w9,#0x2A
  00030	7100f51f	 cmp         w8,#0x3D
  00034	54000008	 bhi         |$LN7@deflateSta|
  00038	5800000a	 ldr         x10,|$LN10@deflateSta|
  0003c	9ac82548	 lsr         x8,x10,x8
  00040	37000008	 tbnz        x8,#0,|$LN4@deflateSta|
  00044		 |$LN7@deflateSta|
  00044	7101c53f	 cmp         w9,#0x71
  00048	54000000	 beq         |$LN4@deflateSta|
  0004c	710a693f	 cmp         w9,#0x29A
  00050	54000001	 bne         |$LN3@deflateSta|
  00054		 |$LN4@deflateSta|

; 362  : #ifdef GZIP
; 363  :                                            s->status != GZIP_STATE &&
; 364  : #endif
; 365  :                                            s->status != EXTRA_STATE &&
; 366  :                                            s->status != NAME_STATE &&
; 367  :                                            s->status != COMMENT_STATE &&
; 368  :                                            s->status != HCRC_STATE &&
; 369  :                                            s->status != BUSY_STATE &&
; 370  :                                            s->status != FINISH_STATE))
; 371  :         return 1;
; 372  :     return 0;

  00054	52800000	 mov         w0,#0
  00058	d65f03c0	 ret
  0005c		 |$LN3@deflateSta|

; 359  :         return 1;

  0005c	52800020	 mov         w0,#1
  00060	d65f03c0	 ret
  00064	d503201f	 nop
  00068		 |$LN10@deflateSta|
  00068	2002000088008001  DCQ         0x2002000088008001

			 ENDP  ; |deflateStateCheck|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |deflateSetDictionary| PROC

; 380  : {

  00000		 |$LN29|
  00000	a9bc53f3	 stp         x19,x20,[sp,#-0x40]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	a90263f7	 stp         x23,x24,[sp,#0x20]
  0000c	f9001bf9	 str         x25,[sp,#0x30]
  00010	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00014	910003fd	 mov         fp,sp
  00018	aa0003f6	 mov         x22,x0
  0001c	aa0103f4	 mov         x20,x1
  00020	2a0203f5	 mov         w21,w2

; 381  :     deflate_state *s;
; 382  :     uInt str, n;
; 383  :     int wrap;
; 384  :     unsigned avail;
; 385  :     z_const unsigned char *next;
; 386  : 
; 387  :     if (deflateStateCheck(strm) || dictionary == Z_NULL)

  00024	94000000	 bl          deflateStateCheck
  00028	35000000	 cbnz        w0,|$LN8@deflateSet|
  0002c	b4000014	 cbz         x20,|$LN8@deflateSet|

; 389  :     s = strm->state;

  00030	f94016d3	 ldr         x19,[x22,#0x28]

; 390  :     wrap = s->wrap;

  00034	b9402e77	 ldr         w23,[x19,#0x2C]

; 391  :     if (wrap == 2 || (wrap == 1 && s->status != INIT_STATE) || s->lookahead)

  00038	71000aff	 cmp         w23,#2
  0003c	54000000	 beq         |$LN8@deflateSet|
  00040	710006ff	 cmp         w23,#1
  00044	54000001	 bne         |$LN11@deflateSet|
  00048	b9400a68	 ldr         w8,[x19,#8]
  0004c	7100a91f	 cmp         w8,#0x2A
  00050	54000001	 bne         |$LN8@deflateSet|
  00054		 |$LN11@deflateSet|
  00054	b9409e68	 ldr         w8,[x19,#0x9C]
  00058	35000008	 cbnz        w8,|$LN8@deflateSet|

; 392  :         return Z_STREAM_ERROR;
; 393  : 
; 394  :     /* when using zlib wrappers, compute Adler-32 for provided dictionary */
; 395  :     if (wrap == 1)

  0005c	710006ff	 cmp         w23,#1
  00060	54000001	 bne         |$LN12@deflateSet|

; 396  :         strm->adler = adler32(strm->adler, dictionary, dictLength);

  00064	b9404ec0	 ldr         w0,[x22,#0x4C]
  00068	2a1503e2	 mov         w2,w21
  0006c	aa1403e1	 mov         x1,x20
  00070	94000000	 bl          adler32
  00074	b9004ec0	 str         w0,[x22,#0x4C]
  00078		 |$LN12@deflateSet|

; 397  :     s->wrap = 0;                    /* avoid computing Adler-32 in read_buf */
; 398  : 
; 399  :     /* if dictionary would fill window, just replace the history */
; 400  :     if (dictLength >= s->w_size) {

  00078	b9404669	 ldr         w9,[x19,#0x44]
  0007c	b9002e7f	 str         wzr,[x19,#0x2C]
  00080	6b0902bf	 cmp         w21,w9
  00084	54000003	 blo         |$LN27@deflateSet|

; 401  :         if (wrap == 0) {            /* already empty otherwise */

  00088	35000017	 cbnz        w23,|$LN26@deflateSet|

; 402  :             CLEAR_HASH(s);

  0008c	b9407668	 ldr         w8,[x19,#0x74]
  00090	52800001	 mov         w1,#0
  00094	f9403669	 ldr         x9,[x19,#0x68]
  00098	5100050a	 sub         w10,w8,#1
  0009c	782a593f	 strh        wzr,[x9,w10 uxtw #1]
  000a0	b9407668	 ldr         w8,[x19,#0x74]
  000a4	f9403660	 ldr         x0,[x19,#0x68]
  000a8	5100050a	 sub         w10,w8,#1
  000ac	d37f7d42	 ubfiz       x2,x10,#1,#0x20
  000b0	94000000	 bl          memset

; 403  :             s->strstart = 0;
; 404  :             s->block_start = 0L;
; 405  :             s->insert = 0;

  000b4	b9404669	 ldr         w9,[x19,#0x44]
  000b8	b900967f	 str         wzr,[x19,#0x94]
  000bc	b900867f	 str         wzr,[x19,#0x84]
  000c0	b9170e7f	 str         wzr,[x19,#0x170C]
  000c4		 |$LN26@deflateSet|

; 406  :         }
; 407  :         dictionary += dictLength - s->w_size;  /* use the tail */

  000c4	4b0902a8	 sub         w8,w21,w9
  000c8	8b284294	 add         x20,x20,w8,uxtw #0

; 408  :         dictLength = s->w_size;

  000cc	2a0903f5	 mov         w21,w9
  000d0		 |$LN27@deflateSet|

; 409  :     }
; 410  : 
; 411  :     /* insert dictionary into window and hash */
; 412  :     avail = strm->avail_in;

  000d0	b9400ad8	 ldr         w24,[x22,#8]

; 413  :     next = strm->next_in;
; 414  :     strm->avail_in = dictLength;
; 415  :     strm->next_in = (z_const Bytef *)dictionary;
; 416  :     fill_window(s);

  000d4	aa1303e0	 mov         x0,x19
  000d8	b9000ad5	 str         w21,[x22,#8]
  000dc	f94002d9	 ldr         x25,[x22]
  000e0	f90002d4	 str         x20,[x22]
  000e4	94000000	 bl          fill_window

; 417  :     while (s->lookahead >= MIN_MATCH) {

  000e8	b9409e6a	 ldr         w10,[x19,#0x9C]
  000ec	52800054	 mov         w20,#2
  000f0	71000d5f	 cmp         w10,#3
  000f4	54000003	 blo         |$LN3@deflateSet|
  000f8		 |$LL2@deflateSet|

; 418  :         str = s->strstart;

  000f8	b940966e	 ldr         w14,[x19,#0x94]

; 419  :         n = s->lookahead - (MIN_MATCH-1);

  000fc	5100094f	 sub         w15,w10,#2
  00100	110009c7	 add         w7,w14,#2
  00104		 |$LL6@deflateSet|

; 420  :         do {
; 421  :             UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  00104	f9402a68	 ldr         x8,[x19,#0x50]

; 422  : #ifndef FASTEST
; 423  :             s->prev[str & s->w_mask] = s->head[s->ins_h];
; 424  : #endif
; 425  :             s->head[s->ins_h] = (Pos)str;
; 426  :             str++;
; 427  :         } while (--n);

  00108	510005ef	 sub         w15,w15,#1
  0010c	b9407269	 ldr         w9,[x19,#0x70]
  00110	f940366c	 ldr         x12,[x19,#0x68]
  00114	3867490a	 ldrb        w10,[x8,w7 uxtw #0]
  00118	110004e7	 add         w7,w7,#1
  0011c	b9408268	 ldr         w8,[x19,#0x80]
  00120	1ac82129	 lsl         w9,w9,w8
  00124	4a09014b	 eor         w11,w10,w9
  00128	b9407e6a	 ldr         w10,[x19,#0x7C]
  0012c	b9404e69	 ldr         w9,[x19,#0x4C]
  00130	d3407dc8	 uxtw        x8,w14
  00134	0a0a016d	 and         w13,w11,w10
  00138	f940326a	 ldr         x10,[x19,#0x60]
  0013c	b900726d	 str         w13,[x19,#0x70]
  00140	8a08012b	 and         x11,x9,x8
  00144	786d5989	 ldrh        w9,[x12,w13 uxtw #1]
  00148	782b7949	 strh        w9,[x10,x11 lsl #1]
  0014c	b940726b	 ldr         w11,[x19,#0x70]
  00150	f9403668	 ldr         x8,[x19,#0x68]
  00154	782b590e	 strh        w14,[x8,w11 uxtw #1]
  00158	110005ce	 add         w14,w14,#1
  0015c	3500000f	 cbnz        w15,|$LL6@deflateSet|

; 428  :         s->strstart = str;
; 429  :         s->lookahead = MIN_MATCH-1;
; 430  :         fill_window(s);

  00160	aa1303e0	 mov         x0,x19
  00164	b900966e	 str         w14,[x19,#0x94]
  00168	b9009e74	 str         w20,[x19,#0x9C]
  0016c	94000000	 bl          fill_window
  00170	b9409e6a	 ldr         w10,[x19,#0x9C]
  00174	71000d5f	 cmp         w10,#3
  00178	54000002	 bhs         |$LL2@deflateSet|
  0017c		 |$LN3@deflateSet|

; 431  :     }
; 432  :     s->strstart += s->lookahead;

  0017c	b9409668	 ldr         w8,[x19,#0x94]

; 433  :     s->block_start = (long)s->strstart;
; 434  :     s->insert = s->lookahead;

  00180	b9170e6a	 str         w10,[x19,#0x170C]

; 435  :     s->lookahead = 0;
; 436  :     s->match_length = s->prev_length = MIN_MATCH-1;
; 437  :     s->match_available = 0;
; 438  :     strm->next_in = next;
; 439  :     strm->avail_in = avail;
; 440  :     s->wrap = wrap;
; 441  :     return Z_OK;

  00184	52800000	 mov         w0,#0
  00188	2913d27f	 stp         wzr,w20,[x19,#0x9C]
  0018c	b9008a74	 str         w20,[x19,#0x88]
  00190	b900927f	 str         wzr,[x19,#0x90]
  00194	0b0a0109	 add         w9,w8,w10
  00198	b9009669	 str         w9,[x19,#0x94]
  0019c	b9008669	 str         w9,[x19,#0x84]
  001a0	f90002d9	 str         x25,[x22]
  001a4	b9000ad8	 str         w24,[x22,#8]
  001a8	b9002e77	 str         w23,[x19,#0x2C]
  001ac	14000002	 b           |$LN1@deflateSet|
  001b0		 |$LN8@deflateSet|

; 388  :         return Z_STREAM_ERROR;

  001b0	12800020	 mov         w0,#-2
  001b4		 |$LN1@deflateSet|
  001b4	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  001b8	f9401bf9	 ldr         x25,[sp,#0x30]
  001bc	a94263f7	 ldp         x23,x24,[sp,#0x20]
  001c0	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  001c4	a8c453f3	 ldp         x19,x20,[sp],#0x40
  001c8	d65f03c0	 ret

			 ENDP  ; |deflateSetDictionary|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |deflateGetDictionary| PROC

; 449  : {

  00000		 |$LN8|
  00000	a9bf53f3	 stp         x19,x20,[sp,#-0x10]!
  00004	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00008	910003fd	 mov         fp,sp
  0000c	aa0003eb	 mov         x11,x0
  00010	aa0103ec	 mov         x12,x1
  00014	aa0203f4	 mov         x20,x2

; 450  :     deflate_state *s;
; 451  :     uInt len;
; 452  : 
; 453  :     if (deflateStateCheck(strm))

  00018	94000000	 bl          deflateStateCheck
  0001c	34000000	 cbz         w0,|$LN2@deflateGet|

; 454  :         return Z_STREAM_ERROR;

  00020	12800020	 mov         w0,#-2
  00024	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00028	a8c153f3	 ldp         x19,x20,[sp],#0x10
  0002c	d65f03c0	 ret
  00030		 |$LN2@deflateGet|

; 455  :     s = strm->state;

  00030	f940156a	 ldr         x10,[x11,#0x28]

; 456  :     len = s->strstart + s->lookahead;

  00034	b9409d4d	 ldr         w13,[x10,#0x9C]
  00038	b940954b	 ldr         w11,[x10,#0x94]

; 457  :     if (len > s->w_size)

  0003c	b9404548	 ldr         w8,[x10,#0x44]
  00040	0b0d0169	 add         w9,w11,w13

; 458  :         len = s->w_size;
; 459  :     if (dictionary != Z_NULL && len)

  00044	6b08013f	 cmp         w9,w8
  00048	1a889133	 csells      w19,w9,w8
  0004c	b400000c	 cbz         x12,|$LN4@deflateGet|
  00050	34000013	 cbz         w19,|$LN4@deflateGet|

; 460  :         zmemcpy(dictionary, s->window + s->strstart + s->lookahead - len, len);

  00054	f9402948	 ldr         x8,[x10,#0x50]
  00058	aa1303e2	 mov         x2,x19
  0005c	aa0c03e0	 mov         x0,x12
  00060	cb334109	 sub         x9,x8,w19,uxtw #0
  00064	8b2b412a	 add         x10,x9,w11,uxtw #0
  00068	8b2d4141	 add         x1,x10,w13,uxtw #0
  0006c	94000000	 bl          memcpy
  00070		 |$LN4@deflateGet|

; 461  :     if (dictLength != Z_NULL)

  00070	b4000014	 cbz         x20,|$LN5@deflateGet|

; 462  :         *dictLength = len;

  00074	b9000293	 str         w19,[x20]
  00078		 |$LN5@deflateGet|

; 463  :     return Z_OK;

  00078	52800000	 mov         w0,#0
  0007c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00080	a8c153f3	 ldp         x19,x20,[sp],#0x10
  00084	d65f03c0	 ret

			 ENDP  ; |deflateGetDictionary|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |deflateResetKeep| PROC

; 469  : {

  00000		 |$LN11|
  00000	a9bf53f3	 stp         x19,x20,[sp,#-0x10]!
  00004	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00008	910003fd	 mov         fp,sp
  0000c	aa0003f4	 mov         x20,x0

; 470  :     deflate_state *s;
; 471  : 
; 472  :     if (deflateStateCheck(strm)) {

  00010	94000000	 bl          deflateStateCheck
  00014	34000000	 cbz         w0,|$LN2@deflateRes|

; 473  :         return Z_STREAM_ERROR;

  00018	12800020	 mov         w0,#-2
  0001c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00020	a8c153f3	 ldp         x19,x20,[sp],#0x10
  00024	d65f03c0	 ret
  00028		 |$LN2@deflateRes|

; 474  :     }
; 475  : 
; 476  :     strm->total_in = strm->total_out = 0;
; 477  :     strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */
; 478  :     strm->data_type = Z_UNKNOWN;
; 479  : 
; 480  :     s = (deflate_state *)strm->state;

  00028	f9401693	 ldr         x19,[x20,#0x28]
  0002c	52800048	 mov         w8,#2
  00030	b9001e9f	 str         wzr,[x20,#0x1C]
  00034	b9000e9f	 str         wzr,[x20,#0xC]
  00038	f900129f	 str         xzr,[x20,#0x20]
  0003c	b9004a88	 str         w8,[x20,#0x48]

; 481  :     s->pending = 0;
; 482  :     s->pending_out = s->pending_buf;

  00040	f9400a68	 ldr         x8,[x19,#0x10]
  00044	b9002a7f	 str         wzr,[x19,#0x28]

; 483  : 
; 484  :     if (s->wrap < 0) {

  00048	b9402e69	 ldr         w9,[x19,#0x2C]
  0004c	f9001268	 str         x8,[x19,#0x20]
  00050	36f80009	 tbz         x9,#0x1F,|$LN3@deflateRes|

; 485  :         s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */

  00054	4b0903e9	 neg         w9,w9
  00058	b9002e69	 str         w9,[x19,#0x2C]
  0005c		 |$LN3@deflateRes|

; 486  :     }
; 487  :     s->status =

  0005c	7100093f	 cmp         w9,#2
  00060	52800002	 mov         w2,#0
  00064	d2800001	 mov         x1,#0
  00068	52800000	 mov         w0,#0
  0006c	54000001	 bne         |$LN5@deflateRes|
  00070	52800728	 mov         w8,#0x39
  00074	b9000a68	 str         w8,[x19,#8]

; 488  : #ifdef GZIP
; 489  :         s->wrap == 2 ? GZIP_STATE :
; 490  : #endif
; 491  :         s->wrap ? INIT_STATE : BUSY_STATE;
; 492  :     strm->adler =

  00078	94000000	 bl          crc32
  0007c	14000007	 b           |$LN8@deflateRes|
  00080		 |$LN5@deflateRes|

; 486  :     }
; 487  :     s->status =

  00080	7100013f	 cmp         w9,#0
  00084	5280054a	 mov         w10,#0x2A
  00088	52800e28	 mov         w8,#0x71
  0008c	1a881148	 cselne      w8,w10,w8
  00090	b9000a68	 str         w8,[x19,#8]

; 488  : #ifdef GZIP
; 489  :         s->wrap == 2 ? GZIP_STATE :
; 490  : #endif
; 491  :         s->wrap ? INIT_STATE : BUSY_STATE;
; 492  :     strm->adler =

  00094	94000000	 bl          adler32
  00098		 |$LN8@deflateRes|
  00098	b9004e80	 str         w0,[x20,#0x4C]

; 493  : #ifdef GZIP
; 494  :         s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
; 495  : #endif
; 496  :         adler32(0L, Z_NULL, 0);
; 497  :     s->last_flush = Z_NO_FLUSH;
; 498  : 
; 499  :     _tr_init(s);

  0009c	aa1303e0	 mov         x0,x19
  000a0	b900427f	 str         wzr,[x19,#0x40]
  000a4	94000000	 bl          _tr_init

; 500  : 
; 501  :     return Z_OK;

  000a8	52800000	 mov         w0,#0
  000ac	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000b0	a8c153f3	 ldp         x19,x20,[sp],#0x10
  000b4	d65f03c0	 ret

			 ENDP  ; |deflateResetKeep|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |deflateReset| PROC

; 507  : {

  00000		 |$LN5|
  00000	a9bf53f3	 stp         x19,x20,[sp,#-0x10]!
  00004	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00008	910003fd	 mov         fp,sp
  0000c	aa0003f4	 mov         x20,x0

; 508  :     int ret;
; 509  : 
; 510  :     ret = deflateResetKeep(strm);

  00010	94000000	 bl          deflateResetKeep
  00014	2a0003f3	 mov         w19,w0

; 511  :     if (ret == Z_OK)

  00018	35000013	 cbnz        w19,|$LN2@deflateRes|

; 512  :         lm_init(strm->state);

  0001c	f9401680	 ldr         x0,[x20,#0x28]
  00020	94000000	 bl          lm_init
  00024		 |$LN2@deflateRes|

; 513  :     return ret;

  00024	2a1303e0	 mov         w0,w19
  00028	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0002c	a8c153f3	 ldp         x19,x20,[sp],#0x10
  00030	d65f03c0	 ret

			 ENDP  ; |deflateReset|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |deflateSetHeader| PROC

; 520  : {

  00000		 |$LN6|
  00000	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00004	910003fd	 mov         fp,sp
  00008	aa0003eb	 mov         x11,x0

; 521  :     if (deflateStateCheck(strm) || strm->state->wrap != 2)

  0000c	94000000	 bl          deflateStateCheck
  00010	35000000	 cbnz        w0,|$LN3@deflateSet|
  00014	f9401569	 ldr         x9,[x11,#0x28]
  00018	b9402d28	 ldr         w8,[x9,#0x2C]
  0001c	7100091f	 cmp         w8,#2
  00020	54000001	 bne         |$LN3@deflateSet|

; 523  :     strm->state->gzhead = head;

  00024	f9001921	 str         x1,[x9,#0x30]

; 524  :     return Z_OK;

  00028	52800000	 mov         w0,#0
  0002c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00030	d65f03c0	 ret
  00034		 |$LN3@deflateSet|

; 522  :         return Z_STREAM_ERROR;

  00034	12800020	 mov         w0,#-2
  00038	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0003c	d65f03c0	 ret

			 ENDP  ; |deflateSetHeader|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |deflatePending| PROC

; 532  : {

  00000		 |$LN7|
  00000	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00004	910003fd	 mov         fp,sp
  00008	aa0003eb	 mov         x11,x0

; 533  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  0000c	94000000	 bl          deflateStateCheck
  00010	34000000	 cbz         w0,|$LN2@deflatePen|
  00014	12800020	 mov         w0,#-2
  00018	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0001c	d65f03c0	 ret
  00020		 |$LN2@deflatePen|

; 534  :     if (pending != Z_NULL)

  00020	b4000001	 cbz         x1,|$LN3@deflatePen|

; 535  :         *pending = strm->state->pending;

  00024	f9401568	 ldr         x8,[x11,#0x28]
  00028	b9402909	 ldr         w9,[x8,#0x28]
  0002c	b9000029	 str         w9,[x1]
  00030		 |$LN3@deflatePen|

; 536  :     if (bits != Z_NULL)

  00030	b4000002	 cbz         x2,|$LN4@deflatePen|

; 537  :         *bits = strm->state->bi_valid;

  00034	f9401568	 ldr         x8,[x11,#0x28]
  00038	b9571509	 ldr         w9,[x8,#0x1714]
  0003c	b9000049	 str         w9,[x2]
  00040		 |$LN4@deflatePen|

; 538  :     return Z_OK;

  00040	52800000	 mov         w0,#0
  00044	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00048	d65f03c0	 ret

			 ENDP  ; |deflatePending|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |deflatePrime| PROC

; 546  : {

  00000		 |$LN15|
  00000	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00004	910003fd	 mov         fp,sp
  00008	aa0003eb	 mov         x11,x0

; 547  :     deflate_state *s;
; 548  :     int put;
; 549  : 
; 550  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  0000c	94000000	 bl          deflateStateCheck
  00010	34000000	 cbz         w0,|$LN5@deflatePri|
  00014	12800020	 mov         w0,#-2
  00018	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0001c	d65f03c0	 ret
  00020		 |$LN5@deflatePri|

; 551  :     s = strm->state;

  00020	f9401560	 ldr         x0,[x11,#0x28]

; 552  :     if ((Bytef *)(s->d_buf) < s->pending_out + ((Buf_size + 7) >> 3))

  00024	f9401008	 ldr         x8,[x0,#0x20]
  00028	f94b7c09	 ldr         x9,[x0,#0x16F8]
  0002c	9100090a	 add         x10,x8,#2
  00030	eb0a013f	 cmp         x9,x10
  00034	54000002	 bhs         |$LN11@deflatePri|

; 553  :         return Z_BUF_ERROR;

  00038	12800080	 mov         w0,#-5
  0003c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00040	d65f03c0	 ret
  00044		 |$LN11@deflatePri|
  00044	5280020e	 mov         w14,#0x10
  00048	5280002f	 mov         w15,#1
  0004c	529fffe7	 mov         w7,#0xFFFF
  00050		 |$LL4@deflatePri|

; 554  :     do {
; 555  :         put = Buf_size - s->bi_valid;

  00050	b957140c	 ldr         w12,[x0,#0x1714]
  00054	4b0c01c8	 sub         w8,w14,w12

; 556  :         if (put > bits)
; 557  :             put = bits;
; 558  :         s->bi_buf |= (ush)((value & ((1 << put) - 1)) << s->bi_valid);

  00058	6b01011f	 cmp         w8,w1
  0005c	1a81d10d	 cselle      w13,w8,w1
  00060	1acd21e8	 lsl         w8,w15,w13
  00064	0b070109	 add         w9,w8,w7
  00068	796e2008	 ldrh        w8,[x0,#0x1710]
  0006c	0a02012a	 and         w10,w9,w2
  00070	1acc214b	 lsl         w11,w10,w12

; 559  :         s->bi_valid += put;

  00074	0b0c01aa	 add         w10,w13,w12
  00078	2a080168	 orr         w8,w11,w8
  0007c	b917140a	 str         w10,[x0,#0x1714]
  00080	792e2008	 strh        w8,[x0,#0x1710]

; 560  :         _tr_flush_bits(s);

  00084	94000000	 bl          _tr_flush_bits

; 561  :         value >>= put;

  00088	1acd2842	 asr         w2,w2,w13

; 562  :         bits -= put;

  0008c	4b0d0021	 sub         w1,w1,w13

; 563  :     } while (bits);

  00090	35000001	 cbnz        w1,|$LL4@deflatePri|

; 564  :     return Z_OK;

  00094	52800000	 mov         w0,#0
  00098	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0009c	d65f03c0	 ret

			 ENDP  ; |deflatePrime|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |deflateParams| PROC

; 572  : {

  00000		 |$LN18|
  00000	a9bd53f3	 stp         x19,x20,[sp,#-0x30]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	f90013f7	 str         x23,[sp,#0x20]
  0000c	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00010	910003fd	 mov         fp,sp
  00014	aa0003f4	 mov         x20,x0
  00018	2a0203f5	 mov         w21,w2

; 573  :     deflate_state *s;
; 574  :     compress_func func;
; 575  : 
; 576  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  0001c	94000000	 bl          deflateStateCheck
  00020	35000000	 cbnz        w0,|$LN5@deflatePar|

; 577  :     s = strm->state;
; 578  : 
; 579  : #ifdef FASTEST
; 580  :     if (level != 0) level = 1;
; 581  : #else
; 582  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;
; 583  : #endif
; 584  :     if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {

  00024	3100043f	 cmn         w1,#1
  00028	f9401693	 ldr         x19,[x20,#0x28]
  0002c	528000c8	 mov         w8,#6
  00030	1a881036	 cselne      w22,w1,w8
  00034	710026df	 cmp         w22,#9
  00038	7a449aaa	 ccmpls      w21,#4,#0xA
  0003c	54000008	 bhi         |$LN5@deflatePar|

; 586  :     }
; 587  :     func = configuration_table[s->level].func;
; 588  : 
; 589  :     if ((strategy != s->strategy || func != configuration_table[level].func) &&

  00040	b940b268	 ldr         w8,[x19,#0xB0]
  00044	90000009	 adrp        x9,configuration_table
  00048	91000137	 add         x23,x9,PageOffset(configuration_table)
  0004c	6b0802bf	 cmp         w21,w8
  00050	54000001	 bne         |$LN16@deflatePar|
  00054	b940ae68	 ldr         w8,[x19,#0xAC]
  00058	937c7ec9	 sbfiz       x9,x22,#4,#0x20
  0005c	910022eb	 add         x11,x23,#8
  00060	937c7d0c	 sbfiz       x12,x8,#4,#0x20
  00064	910022e8	 add         x8,x23,#8
  00068	f868692a	 ldr         x10,[x9,x8]
  0006c	f86b6989	 ldr         x9,[x12,x11]
  00070	eb0a013f	 cmp         x9,x10
  00074	54000000	 beq         |$LN9@deflatePar|
  00078		 |$LN16@deflatePar|
  00078	b9571a68	 ldr         w8,[x19,#0x1718]
  0007c	34000008	 cbz         w8,|$LN9@deflatePar|

; 590  :         s->high_water) {
; 591  :         /* Flush the last buffer: */
; 592  :         int err = deflate(strm, Z_BLOCK);

  00080	528000a1	 mov         w1,#5
  00084	aa1403e0	 mov         x0,x20
  00088	94000000	 bl          deflate

; 593  :         if (err == Z_STREAM_ERROR)

  0008c	3100081f	 cmn         w0,#2
  00090	54000000	 beq         |$LN5@deflatePar|

; 594  :             return err;
; 595  :         if (strm->avail_out == 0)

  00094	b9401a88	 ldr         w8,[x20,#0x18]
  00098	35000008	 cbnz        w8,|$LN9@deflatePar|

; 596  :             return Z_BUF_ERROR;

  0009c	12800080	 mov         w0,#-5
  000a0	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000a4	f94013f7	 ldr         x23,[sp,#0x20]
  000a8	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  000ac	a8c353f3	 ldp         x19,x20,[sp],#0x30
  000b0	d65f03c0	 ret
  000b4		 |$LN9@deflatePar|

; 597  :     }
; 598  :     if (s->level != level) {

  000b4	b940ae68	 ldr         w8,[x19,#0xAC]
  000b8	6b16011f	 cmp         w8,w22
  000bc	54000000	 beq         |$LN10@deflatePar|

; 599  :         if (s->level == 0 && s->matches != 0) {

  000c0	35000008	 cbnz        w8,|$LN11@deflatePar|
  000c4	b9570a68	 ldr         w8,[x19,#0x1708]
  000c8	34000008	 cbz         w8,|$LN11@deflatePar|

; 600  :             if (s->matches == 1)

  000cc	7100051f	 cmp         w8,#1
  000d0	54000001	 bne         |$LN12@deflatePar|

; 601  :                 slide_hash(s);

  000d4	aa1303e0	 mov         x0,x19
  000d8	94000000	 bl          slide_hash
  000dc	14000005	 b           |$LN13@deflatePar|
  000e0		 |$LN12@deflatePar|

; 602  :             else
; 603  :                 CLEAR_HASH(s);

  000e0	b9407668	 ldr         w8,[x19,#0x74]
  000e4	f9403669	 ldr         x9,[x19,#0x68]
  000e8	5100050a	 sub         w10,w8,#1
  000ec	782a593f	 strh        wzr,[x9,w10 uxtw #1]
  000f0		 |$LN13@deflatePar|
  000f0	b9407668	 ldr         w8,[x19,#0x74]
  000f4	52800001	 mov         w1,#0
  000f8	f9403660	 ldr         x0,[x19,#0x68]
  000fc	51000509	 sub         w9,w8,#1
  00100	d37f7d22	 ubfiz       x2,x9,#1,#0x20
  00104	94000000	 bl          memset

; 604  :             s->matches = 0;

  00108	b9170a7f	 str         wzr,[x19,#0x1708]
  0010c		 |$LN11@deflatePar|

; 605  :         }
; 606  :         s->level = level;
; 607  :         s->max_lazy_match   = configuration_table[level].max_lazy;

  0010c	937c7eca	 sbfiz       x10,x22,#4,#0x20
  00110	b900ae76	 str         w22,[x19,#0xAC]
  00114	91000ae8	 add         x8,x23,#2
  00118	78686949	 ldrh        w9,[x10,x8]
  0011c	b900aa69	 str         w9,[x19,#0xA8]

; 608  :         s->good_match       = configuration_table[level].good_length;

  00120	78776948	 ldrh        w8,[x10,x23]
  00124	b900b668	 str         w8,[x19,#0xB4]

; 609  :         s->nice_match       = configuration_table[level].nice_length;

  00128	910012e8	 add         x8,x23,#4
  0012c	78686949	 ldrh        w9,[x10,x8]

; 610  :         s->max_chain_length = configuration_table[level].max_chain;

  00130	91001ae8	 add         x8,x23,#6
  00134	b900ba69	 str         w9,[x19,#0xB8]
  00138	7868694a	 ldrh        w10,[x10,x8]
  0013c	b900a66a	 str         w10,[x19,#0xA4]
  00140		 |$LN10@deflatePar|

; 611  :     }
; 612  :     s->strategy = strategy;

  00140	b900b275	 str         w21,[x19,#0xB0]

; 613  :     return Z_OK;

  00144	52800000	 mov         w0,#0
  00148	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0014c	f94013f7	 ldr         x23,[sp,#0x20]
  00150	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00154	a8c353f3	 ldp         x19,x20,[sp],#0x30
  00158	d65f03c0	 ret
  0015c		 |$LN5@deflatePar|

; 585  :         return Z_STREAM_ERROR;

  0015c	12800020	 mov         w0,#-2
  00160	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00164	f94013f7	 ldr         x23,[sp,#0x20]
  00168	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  0016c	a8c353f3	 ldp         x19,x20,[sp],#0x30
  00170	d65f03c0	 ret

			 ENDP  ; |deflateParams|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |deflateTune| PROC

; 623  : {

  00000		 |$LN5|
  00000	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00004	910003fd	 mov         fp,sp
  00008	aa0003eb	 mov         x11,x0

; 624  :     deflate_state *s;
; 625  : 
; 626  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  0000c	94000000	 bl          deflateStateCheck
  00010	34000000	 cbz         w0,|$LN2@deflateTun|
  00014	12800020	 mov         w0,#-2
  00018	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0001c	d65f03c0	 ret
  00020		 |$LN2@deflateTun|

; 627  :     s = strm->state;

  00020	f9401568	 ldr         x8,[x11,#0x28]

; 628  :     s->good_match = (uInt)good_length;
; 629  :     s->max_lazy_match = (uInt)max_lazy;
; 630  :     s->nice_match = nice_length;
; 631  :     s->max_chain_length = (uInt)max_chain;
; 632  :     return Z_OK;

  00024	52800000	 mov         w0,#0
  00028	29168d01	 stp         w1,w3,[x8,#0xB4]
  0002c	29148904	 stp         w4,w2,[x8,#0xA4]
  00030	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00034	d65f03c0	 ret

			 ENDP  ; |deflateTune|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |deflateBound| PROC

; 655  : {

  00000		 |$LN30|
  00000	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00004	910003fd	 mov         fp,sp

; 656  :     deflate_state *s;
; 657  :     uLong complen, wraplen;
; 658  : 
; 659  :     /* conservative upper bound for compressed data */
; 660  :     complen = sourceLen +

  00008	11001c28	 add         w8,w1,#7
  0000c	53037d09	 lsr         w9,w8,#3
  00010	1100fc2a	 add         w10,w1,#0x3F
  00014	0b4a192a	 add         w10,w9,w10,lsr #6
  00018	aa0003ec	 mov         x12,x0
  0001c	0b01014b	 add         w11,w10,w1
  00020	1100156d	 add         w13,w11,#5

; 661  :               ((sourceLen + 7) >> 3) + ((sourceLen + 63) >> 6) + 5;
; 662  : 
; 663  :     /* if can't get parameters, return conservative bound plus zlib wrapper */
; 664  :     if (deflateStateCheck(strm))

  00024	94000000	 bl          deflateStateCheck
  00028	34000000	 cbz         w0,|$LN10@deflateBou|

; 665  :         return complen + 6;

  0002c	110019a0	 add         w0,w13,#6
  00030	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00034	d65f03c0	 ret
  00038		 |$LN10@deflateBou|

; 666  : 
; 667  :     /* compute wrapper length */
; 668  :     s = strm->state;

  00038	f940158c	 ldr         x12,[x12,#0x28]

; 669  :     switch (s->wrap) {

  0003c	b9402d88	 ldr         w8,[x12,#0x2C]
  00040	34000008	 cbz         w8,|$LN11@deflateBou|
  00044	7100051f	 cmp         w8,#1
  00048	54000000	 beq         |$LN12@deflateBou|
  0004c	7100091f	 cmp         w8,#2
  00050	54000000	 beq         |$LN13@deflateBou|

; 697  : #endif
; 698  :     default:                                /* for compiler happiness */
; 699  :         wraplen = 6;

  00054	528000ca	 mov         w10,#6
  00058	1400001f	 b           |$LN2@deflateBou|
  0005c		 |$LN13@deflateBou|

; 676  : #ifdef GZIP
; 677  :     case 2:                                 /* gzip wrapper */
; 678  :         wraplen = 18;
; 679  :         if (s->gzhead != Z_NULL) {          /* user-supplied gzip header */

  0005c	f9401989	 ldr         x9,[x12,#0x30]
  00060	5280024a	 mov         w10,#0x12
  00064	b4000009	 cbz         x9,|$LN2@deflateBou|

; 680  :             Bytef *str;
; 681  :             if (s->gzhead->extra != Z_NULL)

  00068	f9400928	 ldr         x8,[x9,#0x10]
  0006c	b4000008	 cbz         x8,|$LN15@deflateBou|

; 682  :                 wraplen += 2 + s->gzhead->extra_len;

  00070	b9401928	 ldr         w8,[x9,#0x18]
  00074	1100510a	 add         w10,w8,#0x14
  00078		 |$LN15@deflateBou|

; 683  :             str = s->gzhead->name;

  00078	f940112b	 ldr         x11,[x9,#0x20]

; 684  :             if (str != Z_NULL)

  0007c	b400000b	 cbz         x11,|$LN5@deflateBou|
  00080		 |$LL6@deflateBou|

; 685  :                 do {
; 686  :                     wraplen++;
; 687  :                 } while (*str++);

  00080	38401568	 ldrb        w8,[x11],#1
  00084	1100054a	 add         w10,w10,#1
  00088	35000008	 cbnz        w8,|$LL6@deflateBou|
  0008c	f9401989	 ldr         x9,[x12,#0x30]
  00090		 |$LN5@deflateBou|

; 688  :             str = s->gzhead->comment;

  00090	f940192b	 ldr         x11,[x9,#0x30]

; 689  :             if (str != Z_NULL)

  00094	b400000b	 cbz         x11,|$LN8@deflateBou|
  00098		 |$LL9@deflateBou|

; 690  :                 do {
; 691  :                     wraplen++;
; 692  :                 } while (*str++);

  00098	38401568	 ldrb        w8,[x11],#1
  0009c	1100054a	 add         w10,w10,#1
  000a0	35000008	 cbnz        w8,|$LL9@deflateBou|
  000a4	f9401989	 ldr         x9,[x12,#0x30]
  000a8		 |$LN8@deflateBou|

; 693  :             if (s->gzhead->hcrc)

  000a8	b9403d28	 ldr         w8,[x9,#0x3C]
  000ac	34000008	 cbz         w8,|$LN2@deflateBou|

; 694  :                 wraplen += 2;

  000b0	1100094a	 add         w10,w10,#2

; 695  :         }
; 696  :         break;

  000b4	14000008	 b           |$LN2@deflateBou|
  000b8		 |$LN12@deflateBou|

; 672  :         break;
; 673  :     case 1:                                 /* zlib wrapper */
; 674  :         wraplen = 6 + (s->strstart ? 4 : 0);

  000b8	b9409588	 ldr         w8,[x12,#0x94]
  000bc	5280014a	 mov         w10,#0xA
  000c0	528000c9	 mov         w9,#6
  000c4	7100011f	 cmp         w8,#0
  000c8	1a89114a	 cselne      w10,w10,w9

; 675  :         break;

  000cc	14000002	 b           |$LN2@deflateBou|
  000d0		 |$LN11@deflateBou|

; 670  :     case 0:                                 /* raw deflate */
; 671  :         wraplen = 0;

  000d0	5280000a	 mov         w10,#0
  000d4		 |$LN2@deflateBou|

; 700  :     }
; 701  : 
; 702  :     /* if not default parameters, return conservative bound */
; 703  :     if (s->w_bits != 15 || s->hash_bits != 8 + 7)

  000d4	b9404988	 ldr         w8,[x12,#0x48]
  000d8	71003d1f	 cmp         w8,#0xF
  000dc	54000001	 bne         |$LN21@deflateBou|
  000e0	b9407988	 ldr         w8,[x12,#0x78]
  000e4	71003d1f	 cmp         w8,#0xF
  000e8	54000001	 bne         |$LN21@deflateBou|

; 705  : 
; 706  :     /* default settings: return tight bound for that case */
; 707  :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +

  000ec	530e7c28	 lsr         w8,w1,#0xE
  000f0	0b416509	 add         w9,w8,w1,lsr #0x19
  000f4	0b413129	 add         w9,w9,w1,lsr #0xC
  000f8	0b0a0128	 add         w8,w9,w10
  000fc	0b01010a	 add         w10,w8,w1
  00100	11001d40	 add         w0,w10,#7
  00104	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00108	d65f03c0	 ret
  0010c		 |$LN21@deflateBou|

; 704  :         return complen + wraplen;

  0010c	0b0d0140	 add         w0,w10,w13
  00110	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00114	d65f03c0	 ret

			 ENDP  ; |deflateBound|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |putShortMSB| PROC

; 720  :     put_byte(s, (Byte)(b >> 8));

  00000	b9402809	 ldr         w9,[x0,#0x28]
  00004	53087c2a	 lsr         w10,w1,#8
  00008	f9400808	 ldr         x8,[x0,#0x10]
  0000c	3829490a	 strb        w10,[x8,w9 uxtw #0]
  00010	b9402809	 ldr         w9,[x0,#0x28]

; 721  :     put_byte(s, (Byte)(b & 0xff));

  00014	f9400808	 ldr         x8,[x0,#0x10]
  00018	1100052b	 add         w11,w9,#1
  0001c	b900280b	 str         w11,[x0,#0x28]
  00020	382b4901	 strb        w1,[x8,w11 uxtw #0]
  00024	b9402809	 ldr         w9,[x0,#0x28]
  00028	1100052a	 add         w10,w9,#1
  0002c	b900280a	 str         w10,[x0,#0x28]
  00030	d65f03c0	 ret

			 ENDP  ; |putShortMSB|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |flush_pending| PROC

; 732  : {

  00000	a9be53f3	 stp         x19,x20,[sp,#-0x20]!
  00004	f9000bf5	 str         x21,[sp,#0x10]
  00008	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  0000c	910003fd	 mov         fp,sp
  00010	aa0003f4	 mov         x20,x0

; 733  :     unsigned len;
; 734  :     deflate_state *s = strm->state;

  00014	f9401693	 ldr         x19,[x20,#0x28]

; 735  : 
; 736  :     _tr_flush_bits(s);

  00018	aa1303e0	 mov         x0,x19
  0001c	94000000	 bl          _tr_flush_bits

; 737  :     len = s->pending;

  00020	b9402a6e	 ldr         w14,[x19,#0x28]

; 738  :     if (len > strm->avail_out) len = strm->avail_out;

  00024	b9401a8d	 ldr         w13,[x20,#0x18]

; 739  :     if (len == 0) return;

  00028	6b0d01df	 cmp         w14,w13
  0002c	1a8d91d5	 csells      w21,w14,w13
  00030	34000015	 cbz         w21,|$LN4@flush_pend|

; 740  : 
; 741  :     zmemcpy(strm->next_out, s->pending_out, len);

  00034	f9401261	 ldr         x1,[x19,#0x20]
  00038	aa1503e2	 mov         x2,x21
  0003c	f9400a80	 ldr         x0,[x20,#0x10]
  00040	94000000	 bl          memcpy

; 742  :     strm->next_out  += len;

  00044	f9400a88	 ldr         x8,[x20,#0x10]
  00048	8b354109	 add         x9,x8,w21,uxtw #0
  0004c	f9000a89	 str         x9,[x20,#0x10]

; 743  :     s->pending_out  += len;

  00050	f940126a	 ldr         x10,[x19,#0x20]
  00054	8b354148	 add         x8,x10,w21,uxtw #0
  00058	f9001268	 str         x8,[x19,#0x20]

; 744  :     strm->total_out += len;
; 745  :     strm->avail_out -= len;

  0005c	29432688	 ldp         w8,w9,[x20,#0x18]
  00060	0b15012a	 add         w10,w9,w21
  00064	4b150109	 sub         w9,w8,w21
  00068	29032a89	 stp         w9,w10,[x20,#0x18]

; 746  :     s->pending      -= len;

  0006c	b9402a6a	 ldr         w10,[x19,#0x28]
  00070	4b150148	 sub         w8,w10,w21
  00074	b9002a68	 str         w8,[x19,#0x28]

; 747  :     if (s->pending == 0) {

  00078	35000008	 cbnz        w8,|$LN4@flush_pend|

; 748  :         s->pending_out = s->pending_buf;

  0007c	f9400a68	 ldr         x8,[x19,#0x10]
  00080	f9001268	 str         x8,[x19,#0x20]
  00084		 |$LN4@flush_pend|
  00084	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00088	f9400bf5	 ldr         x21,[sp,#0x10]
  0008c	a8c253f3	 ldp         x19,x20,[sp],#0x20
  00090	d65f03c0	 ret

			 ENDP  ; |flush_pending|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |deflateCopy| PROC

; 1105 : {

  00000		 |$LN10|
  00000	a9be53f3	 stp         x19,x20,[sp,#-0x20]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  0000c	910003fd	 mov         fp,sp
  00010	aa0003f3	 mov         x19,x0

; 1106 : #ifdef MAXSEG_64K
; 1107 :     return Z_STREAM_ERROR;
; 1108 : #else
; 1109 :     deflate_state *ds;
; 1110 :     deflate_state *ss;
; 1111 :     ushf *overlay;
; 1112 : 
; 1113 : 
; 1114 :     if (deflateStateCheck(source) || dest == Z_NULL) {

  00014	aa0103e0	 mov         x0,x1
  00018	94000000	 bl          deflateStateCheck
  0001c	35000000	 cbnz        w0,|$LN3@deflateCop|
  00020	b4000013	 cbz         x19,|$LN3@deflateCop|

; 1116 :     }
; 1117 : 
; 1118 :     ss = source->state;
; 1119 : 
; 1120 :     zmemcpy((voidpf)dest, (voidpf)source, sizeof(z_stream));

  00024	a9402428	 ldp         x8,x9,[x1]

; 1121 : 
; 1122 :     ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));

  00028	5282e402	 mov         w2,#0x1720
  0002c	f9401436	 ldr         x22,[x1,#0x28]
  00030	a9002668	 stp         x8,x9,[x19]
  00034	a9412c2a	 ldp         x10,x11,[x1,#0x10]
  00038	a9012e6a	 stp         x10,x11,[x19,#0x10]
  0003c	a9422428	 ldp         x8,x9,[x1,#0x20]
  00040	a9022668	 stp         x8,x9,[x19,#0x20]
  00044	a9432c2a	 ldp         x10,x11,[x1,#0x30]
  00048	a9032e6a	 stp         x10,x11,[x19,#0x30]
  0004c	a9442428	 ldp         x8,x9,[x1,#0x40]
  00050	a9042668	 stp         x8,x9,[x19,#0x40]
  00054	f940282a	 ldr         x10,[x1,#0x50]
  00058	52800021	 mov         w1,#1
  0005c	f9002a6a	 str         x10,[x19,#0x50]
  00060	f9402260	 ldr         x0,[x19,#0x40]
  00064	f9401a68	 ldr         x8,[x19,#0x30]
  00068	d63f0100	 blr         x8
  0006c	aa0003f4	 mov         x20,x0

; 1123 :     if (ds == Z_NULL) return Z_MEM_ERROR;

  00070	b4000014	 cbz         x20,|$LN8@deflateCop|

; 1124 :     dest->state = (struct internal_state FAR *) ds;
; 1125 :     zmemcpy((voidpf)ds, (voidpf)ss, sizeof(deflate_state));

  00074	d282e402	 mov         x2,#0x1720
  00078	f9001674	 str         x20,[x19,#0x28]
  0007c	aa1603e1	 mov         x1,x22
  00080	94000000	 bl          memcpy

; 1126 :     ds->strm = dest;

  00084	f9000293	 str         x19,[x20]

; 1127 : 
; 1128 :     ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));

  00088	f9402260	 ldr         x0,[x19,#0x40]
  0008c	f9401a68	 ldr         x8,[x19,#0x30]
  00090	52800042	 mov         w2,#2
  00094	b9404681	 ldr         w1,[x20,#0x44]
  00098	d63f0100	 blr         x8

; 1129 :     ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));

  0009c	b9404681	 ldr         w1,[x20,#0x44]
  000a0	52800042	 mov         w2,#2
  000a4	f9002a80	 str         x0,[x20,#0x50]
  000a8	f9402260	 ldr         x0,[x19,#0x40]
  000ac	f9401a68	 ldr         x8,[x19,#0x30]
  000b0	d63f0100	 blr         x8

; 1130 :     ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));

  000b4	b9407681	 ldr         w1,[x20,#0x74]
  000b8	52800042	 mov         w2,#2
  000bc	f9003280	 str         x0,[x20,#0x60]
  000c0	f9402260	 ldr         x0,[x19,#0x40]
  000c4	f9401a68	 ldr         x8,[x19,#0x30]
  000c8	d63f0100	 blr         x8

; 1131 :     overlay = (ushf *) ZALLOC(dest, ds->lit_bufsize, sizeof(ush)+2);

  000cc	b956f281	 ldr         w1,[x20,#0x16F0]
  000d0	52800082	 mov         w2,#4
  000d4	f9003680	 str         x0,[x20,#0x68]
  000d8	f9402260	 ldr         x0,[x19,#0x40]
  000dc	f9401a68	 ldr         x8,[x19,#0x30]
  000e0	d63f0100	 blr         x8
  000e4	aa0003f5	 mov         x21,x0

; 1132 :     ds->pending_buf = (uchf *) overlay;
; 1133 : 
; 1134 :     if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||

  000e8	f9402a80	 ldr         x0,[x20,#0x50]
  000ec	f9000a95	 str         x21,[x20,#0x10]
  000f0	b4000000	 cbz         x0,|$LN6@deflateCop|
  000f4	f9403288	 ldr         x8,[x20,#0x60]
  000f8	b4000008	 cbz         x8,|$LN6@deflateCop|
  000fc	f9403688	 ldr         x8,[x20,#0x68]
  00100	b4000008	 cbz         x8,|$LN6@deflateCop|
  00104	b4000015	 cbz         x21,|$LN6@deflateCop|

; 1137 :         return Z_MEM_ERROR;
; 1138 :     }
; 1139 :     /* following zmemcpy do not work for 16-bit MSDOS */
; 1140 :     zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));

  00108	b9404688	 ldr         w8,[x20,#0x44]
  0010c	f9402ac1	 ldr         x1,[x22,#0x50]
  00110	531f7902	 lsl         w2,w8,#1
  00114	94000000	 bl          memcpy

; 1141 :     zmemcpy((voidpf)ds->prev, (voidpf)ss->prev, ds->w_size * sizeof(Pos));

  00118	b9404688	 ldr         w8,[x20,#0x44]
  0011c	f94032c1	 ldr         x1,[x22,#0x60]
  00120	f9403280	 ldr         x0,[x20,#0x60]
  00124	d37f7d02	 ubfiz       x2,x8,#1,#0x20
  00128	94000000	 bl          memcpy

; 1142 :     zmemcpy((voidpf)ds->head, (voidpf)ss->head, ds->hash_size * sizeof(Pos));

  0012c	b9407688	 ldr         w8,[x20,#0x74]
  00130	f94036c1	 ldr         x1,[x22,#0x68]
  00134	f9403680	 ldr         x0,[x20,#0x68]
  00138	d37f7d02	 ubfiz       x2,x8,#1,#0x20
  0013c	94000000	 bl          memcpy

; 1143 :     zmemcpy(ds->pending_buf, ss->pending_buf, (uInt)ds->pending_buf_size);

  00140	b9401a82	 ldr         w2,[x20,#0x18]
  00144	f9400ac1	 ldr         x1,[x22,#0x10]
  00148	f9400a80	 ldr         x0,[x20,#0x10]
  0014c	94000000	 bl          memcpy

; 1144 : 
; 1145 :     ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);

  00150	f9400ac8	 ldr         x8,[x22,#0x10]

; 1146 :     ds->d_buf = overlay + ds->lit_bufsize/sizeof(ush);
; 1147 :     ds->l_buf = ds->pending_buf + (1+sizeof(ush))*ds->lit_bufsize;
; 1148 : 
; 1149 :     ds->l_desc.dyn_tree = ds->dyn_ltree;
; 1150 :     ds->d_desc.dyn_tree = ds->dyn_dtree;
; 1151 :     ds->bl_desc.dyn_tree = ds->bl_tree;
; 1152 : 
; 1153 :     return Z_OK;

  00154	52800000	 mov         w0,#0
  00158	f94012c9	 ldr         x9,[x22,#0x20]
  0015c	f9400a8c	 ldr         x12,[x20,#0x10]
  00160	b956f28b	 ldr         w11,[x20,#0x16F0]
  00164	cb080129	 sub         x9,x9,x8
  00168	8b0c012a	 add         x10,x9,x12
  0016c	d341fd69	 lsr         x9,x11,#1
  00170	f900128a	 str         x10,[x20,#0x20]
  00174	8b0906aa	 add         x10,x21,x9,lsl #1
  00178	9102f288	 add         x8,x20,#0xBC
  0017c	8b0b0569	 add         x9,x11,x11,lsl #1
  00180	f905a288	 str         x8,[x20,#0xB40]
  00184	912a9288	 add         x8,x20,#0xAA4
  00188	f90b7e8a	 str         x10,[x20,#0x16F8]
  0018c	8b0c012a	 add         x10,x9,x12
  00190	f905ba88	 str         x8,[x20,#0xB70]
  00194	9126c289	 add         x9,x20,#0x9B0
  00198	f90b768a	 str         x10,[x20,#0x16E8]
  0019c	f905ae89	 str         x9,[x20,#0xB58]
  001a0	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  001a4	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  001a8	a8c253f3	 ldp         x19,x20,[sp],#0x20
  001ac	d65f03c0	 ret
  001b0		 |$LN6@deflateCop|

; 1135 :         ds->pending_buf == Z_NULL) {
; 1136 :         deflateEnd (dest);

  001b0	aa1303e0	 mov         x0,x19
  001b4	94000000	 bl          deflateEnd
  001b8		 |$LN8@deflateCop|

; 1154 : #endif /* MAXSEG_64K */
; 1155 : }

  001b8	12800060	 mov         w0,#-4
  001bc	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  001c0	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  001c4	a8c253f3	 ldp         x19,x20,[sp],#0x20
  001c8	d65f03c0	 ret
  001cc		 |$LN3@deflateCop|

; 1115 :         return Z_STREAM_ERROR;

  001cc	12800020	 mov         w0,#-2
  001d0	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  001d4	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  001d8	a8c253f3	 ldp         x19,x20,[sp],#0x20
  001dc	d65f03c0	 ret

			 ENDP  ; |deflateCopy|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |read_buf| PROC

; 1168 : {

  00000	a9be53f3	 stp         x19,x20,[sp,#-0x20]!
  00004	f9000bf5	 str         x21,[sp,#0x10]
  00008	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  0000c	910003fd	 mov         fp,sp
  00010	aa0003f3	 mov         x19,x0

; 1169 :     unsigned len = strm->avail_in;

  00014	b9400a68	 ldr         w8,[x19,#8]
  00018	aa0103f5	 mov         x21,x1

; 1170 : 
; 1171 :     if (len > size) len = size;

  0001c	6b02011f	 cmp         w8,w2
  00020	1a888054	 cselhi      w20,w2,w8

; 1172 :     if (len == 0) return 0;

  00024	35000014	 cbnz        w20,|$LN3@read_buf|
  00028	52800000	 mov         w0,#0
  0002c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00030	f9400bf5	 ldr         x21,[sp,#0x10]
  00034	a8c253f3	 ldp         x19,x20,[sp],#0x20
  00038	d65f03c0	 ret
  0003c		 |$LN3@read_buf|

; 1173 : 
; 1174 :     strm->avail_in  -= len;
; 1175 : 
; 1176 :     zmemcpy(buf, strm->next_in, len);

  0003c	f9400261	 ldr         x1,[x19]
  00040	4b140108	 sub         w8,w8,w20
  00044	aa1403e2	 mov         x2,x20
  00048	b9000a68	 str         w8,[x19,#8]
  0004c	aa1503e0	 mov         x0,x21
  00050	94000000	 bl          memcpy

; 1177 :     if (strm->state->wrap == 1) {

  00054	f9401668	 ldr         x8,[x19,#0x28]
  00058	b9402d09	 ldr         w9,[x8,#0x2C]
  0005c	7100053f	 cmp         w9,#1
  00060	54000001	 bne         |$LN4@read_buf|

; 1178 :         strm->adler = adler32(strm->adler, buf, len);

  00064	b9404e60	 ldr         w0,[x19,#0x4C]
  00068	2a1403e2	 mov         w2,w20
  0006c	aa1503e1	 mov         x1,x21
  00070	94000000	 bl          adler32

; 1179 :     }

  00074	14000007	 b           |$LN8@read_buf|
  00078		 |$LN4@read_buf|

; 1180 : #ifdef GZIP
; 1181 :     else if (strm->state->wrap == 2) {

  00078	7100093f	 cmp         w9,#2
  0007c	54000001	 bne         |$LN6@read_buf|

; 1182 :         strm->adler = crc32(strm->adler, buf, len);

  00080	b9404e60	 ldr         w0,[x19,#0x4C]
  00084	2a1403e2	 mov         w2,w20
  00088	aa1503e1	 mov         x1,x21
  0008c	94000000	 bl          crc32
  00090		 |$LN8@read_buf|

; 1183 :     }
; 1184 : #endif
; 1185 :     strm->next_in  += len;

  00090	b9004e60	 str         w0,[x19,#0x4C]
  00094		 |$LN6@read_buf|
  00094	f9400268	 ldr         x8,[x19]

; 1186 :     strm->total_in += len;
; 1187 : 
; 1188 :     return len;

  00098	2a1403e0	 mov         w0,w20
  0009c	b9400e6a	 ldr         w10,[x19,#0xC]
  000a0	8b344109	 add         x9,x8,w20,uxtw #0
  000a4	0b140148	 add         w8,w10,w20
  000a8	f9000269	 str         x9,[x19]
  000ac	b9000e68	 str         w8,[x19,#0xC]
  000b0	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000b4	f9400bf5	 ldr         x21,[sp,#0x10]
  000b8	a8c253f3	 ldp         x19,x20,[sp],#0x20
  000bc	d65f03c0	 ret

			 ENDP  ; |read_buf|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |lm_init| PROC

; 1196 : {

  00000	f81f0ff3	 str         x19,[sp,#-0x10]!
  00004	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00008	910003fd	 mov         fp,sp
  0000c	aa0003f3	 mov         x19,x0

; 1197 :     s->window_size = (ulg)2L*s->w_size;

  00010	b9404668	 ldr         w8,[x19,#0x44]

; 1198 : 
; 1199 :     CLEAR_HASH(s);

  00014	52800001	 mov         w1,#0
  00018	b940766a	 ldr         w10,[x19,#0x74]
  0001c	531f7909	 lsl         w9,w8,#1
  00020	f9403668	 ldr         x8,[x19,#0x68]
  00024	5100054b	 sub         w11,w10,#1
  00028	b9005a69	 str         w9,[x19,#0x58]
  0002c	782b591f	 strh        wzr,[x8,w11 uxtw #1]
  00030	b9407669	 ldr         w9,[x19,#0x74]
  00034	f9403660	 ldr         x0,[x19,#0x68]
  00038	5100052a	 sub         w10,w9,#1
  0003c	d37f7d42	 ubfiz       x2,x10,#1,#0x20
  00040	94000000	 bl          memset

; 1200 : 
; 1201 :     /* Set the default configuration parameters:
; 1202 :      */
; 1203 :     s->max_lazy_match   = configuration_table[s->level].max_lazy;

  00044	b940ae68	 ldr         w8,[x19,#0xAC]
  00048	90000009	 adrp        x9,configuration_table
  0004c	9100012a	 add         x10,x9,PageOffset(configuration_table)
  00050	937c7d0b	 sbfiz       x11,x8,#4,#0x20
  00054	91000948	 add         x8,x10,#2
  00058	78686969	 ldrh        w9,[x11,x8]
  0005c	b900aa69	 str         w9,[x19,#0xA8]

; 1204 :     s->good_match       = configuration_table[s->level].good_length;

  00060	786a6968	 ldrh        w8,[x11,x10]
  00064	b900b668	 str         w8,[x19,#0xB4]

; 1205 :     s->nice_match       = configuration_table[s->level].nice_length;

  00068	91001148	 add         x8,x10,#4
  0006c	78686969	 ldrh        w9,[x11,x8]

; 1206 :     s->max_chain_length = configuration_table[s->level].max_chain;

  00070	91001948	 add         x8,x10,#6
  00074	b900ba69	 str         w9,[x19,#0xB8]
  00078	7868696a	 ldrh        w10,[x11,x8]

; 1207 : 
; 1208 :     s->strstart = 0;
; 1209 :     s->block_start = 0L;
; 1210 :     s->lookahead = 0;
; 1211 :     s->insert = 0;
; 1212 :     s->match_length = s->prev_length = MIN_MATCH-1;

  0007c	52800048	 mov         w8,#2

; 1213 :     s->match_available = 0;

  00080	29127e7f	 stp         wzr,wzr,[x19,#0x90]
  00084	2910a27f	 stp         wzr,w8,[x19,#0x84]
  00088	2913a27f	 stp         wzr,w8,[x19,#0x9C]
  0008c	b900a66a	 str         w10,[x19,#0xA4]
  00090	b9170e7f	 str         wzr,[x19,#0x170C]

; 1214 :     s->ins_h = 0;

  00094	b900727f	 str         wzr,[x19,#0x70]
  00098	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0009c	f84107f3	 ldr         x19,[sp],#0x10
  000a0	d65f03c0	 ret

			 ENDP  ; |lm_init|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |longest_match| PROC

; 1239 : {

  00000	a9be53f3	 stp         x19,x20,[sp,#-0x20]!
  00004	f9000bf5	 str         x21,[sp,#0x10]
  00008	aa0003e4	 mov         x4,x0

; 1240 :     unsigned chain_length = s->max_chain_length;/* max hash chain length */
; 1241 :     register Bytef *scan = s->window + s->strstart; /* current string */
; 1242 :     register Bytef *match;                      /* matched string */
; 1243 :     register int len;                           /* length of current match */
; 1244 :     int best_len = (int)s->prev_length;         /* best match length so far */
; 1245 :     int nice_match = s->nice_match;             /* stop if match long enough */
; 1246 :     IPos limit = s->strstart > (IPos)MAX_DIST(s) ?

  0000c	b9404488	 ldr         w8,[x4,#0x44]
  00010	b940948b	 ldr         w11,[x4,#0x94]
  00014	f9402882	 ldr         x2,[x4,#0x50]
  00018	29543480	 ldp         w0,w13,[x4,#0xA0]
  0001c	5104190a	 sub         w10,w8,#0x106
  00020	b940b88c	 ldr         w12,[x4,#0xB8]
  00024	4b080168	 sub         w8,w11,w8

; 1247 :         s->strstart - (IPos)MAX_DIST(s) : NIL;
; 1248 :     /* Stop when cur_match becomes <= limit. To simplify the code,
; 1249 :      * we prevent matches with the string of window index 0.
; 1250 :      */
; 1251 :     Posf *prev = s->prev;
; 1252 :     uInt wmask = s->w_mask;
; 1253 : 
; 1254 : #ifdef UNALIGNED_OK
; 1255 :     /* Compare two bytes at a time. Note: this is not always beneficial.
; 1256 :      * Try with and without -DUNALIGNED_OK to check.
; 1257 :      */
; 1258 :     register Bytef *strend = s->window + s->strstart + MAX_MATCH - 1;
; 1259 :     register ush scan_start = *(ushf*)scan;
; 1260 :     register ush scan_end   = *(ushf*)(scan+best_len-1);
; 1261 : #else
; 1262 :     register Bytef *strend = s->window + s->strstart + MAX_MATCH;
; 1263 :     register Byte scan_end1  = scan[best_len-1];
; 1264 :     register Byte scan_end   = scan[best_len];
; 1265 : #endif
; 1266 : 
; 1267 :     /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
; 1268 :      * It is easy to get rid of this optimization if necessary.
; 1269 :      */
; 1270 :     Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
; 1271 : 
; 1272 :     /* Do not waste too much time if we already have a good match: */
; 1273 :     if (s->prev_length >= s->good_match) {
; 1274 :         chain_length >>= 2;
; 1275 :     }
; 1276 :     /* Do not look for matches beyond the end of the input. This is necessary
; 1277 :      * to make deflate deterministic.
; 1278 :      */
; 1279 :     if ((uInt)nice_match > s->lookahead) nice_match = (int)s->lookahead;

  00028	b9409c83	 ldr         w3,[x4,#0x9C]
  0002c	11041909	 add         w9,w8,#0x106
  00030	8b2b404e	 add         x14,x2,w11,uxtw #0
  00034	f9403094	 ldr         x20,[x4,#0x60]
  00038	6b0a017f	 cmp         w11,w10
  0003c	b9404c95	 ldr         w21,[x4,#0x4C]
  00040	1a8993f3	 csells      w19,wzr,w9
  00044	b940b489	 ldr         w9,[x4,#0xB4]
  00048	8b20c1c8	 add         x8,x14,w0,sxtw #0
  0004c	3860c9c6	 ldrb        w6,[x14,w0 sxtw #0]
  00050	910409cf	 add         x15,x14,#0x102
  00054	385ff105	 ldurb       w5,[x8,#-1]
  00058	53027da8	 lsr         w8,w13,#2
  0005c	6b09001f	 cmp         w0,w9
  00060	1a8831a7	 csello      w7,w13,w8
  00064	6b03019f	 cmp         w12,w3
  00068	1a8c806d	 cselhi      w13,w3,w12
  0006c		 |$LL4@longest_ma|

; 1280 : 
; 1281 :     Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");
; 1282 : 
; 1283 :     do {
; 1284 :         Assert(cur_match < s->strstart, "no future");
; 1285 :         match = s->window + cur_match;

  0006c	8b21404a	 add         x10,x2,w1,uxtw #0

; 1286 : 
; 1287 :         /* Skip to next match if the match length cannot increase
; 1288 :          * or if the match length is less than 2.  Note that the checks below
; 1289 :          * for insufficient lookahead only occur occasionally for performance
; 1290 :          * reasons.  Therefore uninitialized memory will be accessed, and
; 1291 :          * conditional jumps will be made that depend on those values.
; 1292 :          * However the length of the match is limited to the lookahead, so
; 1293 :          * the output of deflate is not affected by the uninitialized values.
; 1294 :          */
; 1295 : #if (defined(UNALIGNED_OK) && MAX_MATCH == 258)
; 1296 :         /* This code assumes sizeof(unsigned short) == 2. Do not use
; 1297 :          * UNALIGNED_OK if your compiler uses a different size.
; 1298 :          */
; 1299 :         if (*(ushf*)(match+best_len-1) != scan_end ||
; 1300 :             *(ushf*)match != scan_start) continue;
; 1301 : 
; 1302 :         /* It is not necessary to compare scan[2] and match[2] since they are
; 1303 :          * always equal when the other bytes match, given that the hash keys
; 1304 :          * are equal and that HASH_BITS >= 8. Compare 2 bytes at a time at
; 1305 :          * strstart+3, +5, ... up to strstart+257. We check for insufficient
; 1306 :          * lookahead only every 4th comparison; the 128th check will be made
; 1307 :          * at strstart+257. If MAX_MATCH-2 is not a multiple of 8, it is
; 1308 :          * necessary to put more guard bytes at the end of the window, or
; 1309 :          * to check more often for insufficient lookahead.
; 1310 :          */
; 1311 :         Assert(scan[2] == match[2], "scan[2]?");
; 1312 :         scan++, match++;
; 1313 :         do {
; 1314 :         } while (*(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
; 1315 :                  *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
; 1316 :                  *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
; 1317 :                  *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
; 1318 :                  scan < strend);
; 1319 :         /* The funny "do {}" generates better code on most compilers */
; 1320 : 
; 1321 :         /* Here, scan <= window+strstart+257 */
; 1322 :         Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
; 1323 :         if (*scan == *match) scan++;
; 1324 : 
; 1325 :         len = (MAX_MATCH - 1) - (int)(strend-scan);
; 1326 :         scan = strend - (MAX_MATCH-1);
; 1327 : 
; 1328 : #else /* UNALIGNED_OK */
; 1329 : 
; 1330 :         if (match[best_len]   != scan_end  ||
; 1331 :             match[best_len-1] != scan_end1 ||
; 1332 :             *match            != *scan     ||

  00070	3860c948	 ldrb        w8,[x10,w0 sxtw #0]
  00074	6b06011f	 cmp         w8,w6
  00078	54000001	 bne         |$LN2@longest_ma|
  0007c	8b20c148	 add         x8,x10,w0,sxtw #0
  00080	385ff109	 ldurb       w9,[x8,#-1]
  00084	6b05013f	 cmp         w9,w5
  00088	54000001	 bne         |$LN2@longest_ma|
  0008c	394001c9	 ldrb        w9,[x14]
  00090	39400148	 ldrb        w8,[x10]
  00094	6b09011f	 cmp         w8,w9
  00098	54000001	 bne         |$LN2@longest_ma|
  0009c	9100054b	 add         x11,x10,#1
  000a0	394005c9	 ldrb        w9,[x14,#1]
  000a4	38401568	 ldrb        w8,[x11],#1
  000a8	6b09011f	 cmp         w8,w9
  000ac	54000001	 bne         |$LN2@longest_ma|

; 1333 :             *++match          != scan[1])      continue;
; 1334 : 
; 1335 :         /* The check at best_len-1 can be removed because it will be made
; 1336 :          * again later. (This heuristic is not always a win.)
; 1337 :          * It is not necessary to compare scan[2] and match[2] since they
; 1338 :          * are always equal when the other bytes match, given that
; 1339 :          * the hash keys are equal and that HASH_BITS >= 8.
; 1340 :          */
; 1341 :         scan += 2, match++;

  000b0	910009ca	 add         x10,x14,#2
  000b4		 |$LL7@longest_ma|

; 1342 :         Assert(*scan == *match, "match[2]?");
; 1343 : 
; 1344 :         /* We check for insufficient lookahead only every 8th comparison;
; 1345 :          * the 256th check will be made at strstart+258.
; 1346 :          */
; 1347 :         do {
; 1348 :         } while (*++scan == *++match && *++scan == *++match &&
; 1349 :                  *++scan == *++match && *++scan == *++match &&
; 1350 :                  *++scan == *++match && *++scan == *++match &&
; 1351 :                  *++scan == *++match && *++scan == *++match &&

  000b4	39400569	 ldrb        w9,[x11,#1]
  000b8	38401d48	 ldrb        w8,[x10,#1]!
  000bc	6b09011f	 cmp         w8,w9
  000c0	54000001	 bne         |$LN12@longest_ma|
  000c4	39400969	 ldrb        w9,[x11,#2]
  000c8	38401d48	 ldrb        w8,[x10,#1]!
  000cc	6b09011f	 cmp         w8,w9
  000d0	54000001	 bne         |$LN12@longest_ma|
  000d4	39400d69	 ldrb        w9,[x11,#3]
  000d8	38401d48	 ldrb        w8,[x10,#1]!
  000dc	6b09011f	 cmp         w8,w9
  000e0	54000001	 bne         |$LN12@longest_ma|
  000e4	39401169	 ldrb        w9,[x11,#4]
  000e8	38401d48	 ldrb        w8,[x10,#1]!
  000ec	6b09011f	 cmp         w8,w9
  000f0	54000001	 bne         |$LN12@longest_ma|
  000f4	39401569	 ldrb        w9,[x11,#5]
  000f8	38401d48	 ldrb        w8,[x10,#1]!
  000fc	6b09011f	 cmp         w8,w9
  00100	54000001	 bne         |$LN12@longest_ma|
  00104	39401969	 ldrb        w9,[x11,#6]
  00108	38401d48	 ldrb        w8,[x10,#1]!
  0010c	6b09011f	 cmp         w8,w9
  00110	54000001	 bne         |$LN12@longest_ma|
  00114	39401d69	 ldrb        w9,[x11,#7]
  00118	38401d48	 ldrb        w8,[x10,#1]!
  0011c	6b09011f	 cmp         w8,w9
  00120	54000001	 bne         |$LN12@longest_ma|
  00124	38401d48	 ldrb        w8,[x10,#1]!
  00128	38408d69	 ldrb        w9,[x11,#8]!
  0012c	6b09011f	 cmp         w8,w9
  00130	fa4f014e	 ccmpeq      x10,x15,#0xE
  00134	54000003	 blo         |$LL7@longest_ma|
  00138		 |$LN12@longest_ma|

; 1352 :                  scan < strend);
; 1353 : 
; 1354 :         Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
; 1355 : 
; 1356 :         len = MAX_MATCH - (int)(strend - scan);

  00138	4b0f014c	 sub         w12,w10,w15
  0013c	1104098b	 add         w11,w12,#0x102

; 1357 :         scan = strend - MAX_MATCH;
; 1358 : 
; 1359 : #endif /* UNALIGNED_OK */
; 1360 : 
; 1361 :         if (len > best_len) {

  00140	6b00017f	 cmp         w11,w0
  00144	5400000d	 ble         |$LN2@longest_ma|

; 1362 :             s->match_start = cur_match;

  00148	b9009881	 str         w1,[x4,#0x98]

; 1363 :             best_len = len;

  0014c	2a0b03e0	 mov         w0,w11

; 1364 :             if (len >= nice_match) break;

  00150	6b0d017f	 cmp         w11,w13
  00154	5400000a	 bge         |$LN3@longest_ma|

; 1365 : #ifdef UNALIGNED_OK
; 1366 :             scan_end = *(ushf*)(scan+best_len-1);
; 1367 : #else
; 1368 :             scan_end1  = scan[best_len-1];

  00158	8b2cc1c8	 add         x8,x14,w12,sxtw #0

; 1369 :             scan_end   = scan[best_len];

  0015c	386bc9c6	 ldrb        w6,[x14,w11 sxtw #0]
  00160	39440505	 ldrb        w5,[x8,#0x101]
  00164		 |$LN2@longest_ma|

; 1370 : #endif
; 1371 :         }
; 1372 :     } while ((cur_match = prev[cur_match & wmask]) > limit
; 1373 :              && --chain_length != 0);

  00164	d3407c28	 uxtw        x8,w1
  00168	8a0802a9	 and         x9,x21,x8
  0016c	78697a81	 ldrh        w1,[x20,x9 lsl #1]
  00170	6b13003f	 cmp         w1,w19
  00174	54000009	 bls         |$LN3@longest_ma|
  00178	510004e7	 sub         w7,w7,#1
  0017c	35000007	 cbnz        w7,|$LL4@longest_ma|
  00180		 |$LN3@longest_ma|

; 1374 : 
; 1375 :     if ((uInt)best_len <= s->lookahead) return (uInt)best_len;

  00180	6b03001f	 cmp         w0,w3
  00184	54000008	 bhi         |$LN16@longest_ma|
  00188	6b03001f	 cmp         w0,w3
  0018c	1a9f9000	 csells      w0,w0,wzr
  00190	d503229f	 csdb
  00194	f9400bf5	 ldr         x21,[sp,#0x10]
  00198	a8c253f3	 ldp         x19,x20,[sp],#0x20
  0019c	d65f03c0	 ret
  001a0		 |$LN16@longest_ma|

; 1376 :     return s->lookahead;

  001a0	2a0303e0	 mov         w0,w3
  001a4	f9400bf5	 ldr         x21,[sp,#0x10]
  001a8	a8c253f3	 ldp         x19,x20,[sp],#0x20
  001ac	d65f03c0	 ret

			 ENDP  ; |longest_match|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |fill_window| PROC

; 1484 : {

  00000	a9be53f3	 stp         x19,x20,[sp,#-0x20]!
  00004	f9000bf5	 str         x21,[sp,#0x10]
  00008	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  0000c	910003fd	 mov         fp,sp
  00010	aa0003f4	 mov         x20,x0

; 1485 :     unsigned n;
; 1486 :     unsigned more;    /* Amount of free space at the end of the window. */
; 1487 :     uInt wsize = s->w_size;

  00014	b9404693	 ldr         w19,[x20,#0x44]
  00018	b9409e8c	 ldr         w12,[x20,#0x9C]
  0001c		 |$LL4@fill_windo|

; 1488 : 
; 1489 :     Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
; 1490 : 
; 1491 :     do {
; 1492 :         more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);

  0001c	b940968a	 ldr         w10,[x20,#0x94]
  00020	b9405a88	 ldr         w8,[x20,#0x58]
  00024	4b0a0109	 sub         w9,w8,w10

; 1493 : 
; 1494 :         /* Deal with !@#$% 64K limit: */
; 1495 :         if (sizeof(int) <= 2) {
; 1496 :             if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
; 1497 :                 more = wsize;
; 1498 : 
; 1499 :             } else if (more == (unsigned)(-1)) {
; 1500 :                 /* Very unlikely, but possible on 16 bit machine if
; 1501 :                  * strstart == 0 && lookahead == 1 (input done a byte at time)
; 1502 :                  */
; 1503 :                 more--;
; 1504 :             }
; 1505 :         }
; 1506 : 
; 1507 :         /* If the window is almost full and there is insufficient lookahead,
; 1508 :          * move the upper half to the lower one to make room in the upper half.
; 1509 :          */
; 1510 :         if (s->strstart >= wsize+MAX_DIST(s)) {

  00028	b9404688	 ldr         w8,[x20,#0x44]
  0002c	4b0c0135	 sub         w21,w9,w12
  00030	0b080269	 add         w9,w19,w8
  00034	5104192b	 sub         w11,w9,#0x106
  00038	6b0b015f	 cmp         w10,w11
  0003c	54000003	 blo         |$LN11@fill_windo|

; 1511 : 
; 1512 :             zmemcpy(s->window, s->window+wsize, (unsigned)wsize - more);

  00040	6b0b015f	 cmp         w10,w11
  00044	1a9f216b	 cselhs      w11,w11,wzr
  00048	d503229f	 csdb
  0004c	f9402a80	 ldr         x0,[x20,#0x50]
  00050	4b150262	 sub         w2,w19,w21
  00054	8b334001	 add         x1,x0,w19,uxtw #0
  00058	94000000	 bl          memcpy

; 1513 :             s->match_start -= wsize;
; 1514 :             s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */

  0005c	2952a28a	 ldp         w10,w8,[x20,#0x94]

; 1515 :             s->block_start -= (long) wsize;
; 1516 :             slide_hash(s);

  00060	aa1403e0	 mov         x0,x20
  00064	4b130109	 sub         w9,w8,w19
  00068	b9009a89	 str         w9,[x20,#0x98]
  0006c	b9408689	 ldr         w9,[x20,#0x84]
  00070	4b130148	 sub         w8,w10,w19
  00074	b9009688	 str         w8,[x20,#0x94]
  00078	4b13012a	 sub         w10,w9,w19
  0007c	b900868a	 str         w10,[x20,#0x84]
  00080	94000000	 bl          slide_hash

; 1517 :             more += wsize;

  00084	0b1302b5	 add         w21,w21,w19
  00088		 |$LN11@fill_windo|

; 1518 :         }
; 1519 :         if (s->strm->avail_in == 0) break;

  00088	f9400280	 ldr         x0,[x20]
  0008c	b9400808	 ldr         w8,[x0,#8]
  00090	34000008	 cbz         w8,|$LN3@fill_windo|

; 1520 : 
; 1521 :         /* If there was no sliding:
; 1522 :          *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
; 1523 :          *    more == window_size - lookahead - strstart
; 1524 :          * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
; 1525 :          * => more >= window_size - 2*WSIZE + 2
; 1526 :          * In the BIG_MEM or MMAP case (not yet supported),
; 1527 :          *   window_size == input_size + MIN_LOOKAHEAD  &&
; 1528 :          *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
; 1529 :          * Otherwise, window_size == 2*WSIZE so more >= 2.
; 1530 :          * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
; 1531 :          */
; 1532 :         Assert(more >= 2, "more < 2");
; 1533 : 
; 1534 :         n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);

  00094	b9409e89	 ldr         w9,[x20,#0x9C]
  00098	2a1503e2	 mov         w2,w21
  0009c	b9409688	 ldr         w8,[x20,#0x94]
  000a0	8b29410a	 add         x10,x8,w9,uxtw #0
  000a4	f9402a89	 ldr         x9,[x20,#0x50]
  000a8	8b090141	 add         x1,x10,x9
  000ac	94000000	 bl          read_buf

; 1535 :         s->lookahead += n;

  000b0	b9409e88	 ldr         w8,[x20,#0x9C]

; 1536 : 
; 1537 :         /* Initialize the hash value now that we have some input: */
; 1538 :         if (s->lookahead + s->insert >= MIN_MATCH) {

  000b4	b9570e8d	 ldr         w13,[x20,#0x170C]
  000b8	0b00010c	 add         w12,w8,w0
  000bc	0b0d0188	 add         w8,w12,w13
  000c0	b9009e8c	 str         w12,[x20,#0x9C]
  000c4	71000d1f	 cmp         w8,#3
  000c8	54000003	 blo         |$LN2@fill_windo|

; 1539 :             uInt str = s->strstart - s->insert;

  000cc	b9409688	 ldr         w8,[x20,#0x94]

; 1540 :             s->ins_h = s->window[str];

  000d0	f9402a89	 ldr         x9,[x20,#0x50]
  000d4	4b0d010e	 sub         w14,w8,w13
  000d8	386e492b	 ldrb        w11,[x9,w14 uxtw #0]

; 1541 :             UPDATE_HASH(s, s->ins_h, s->window[str + 1]);

  000dc	110005c8	 add         w8,w14,#1
  000e0	b900728b	 str         w11,[x20,#0x70]
  000e4	3868492a	 ldrb        w10,[x9,w8 uxtw #0]
  000e8	b9408289	 ldr         w9,[x20,#0x80]
  000ec	1ac92168	 lsl         w8,w11,w9
  000f0	4a08014b	 eor         w11,w10,w8
  000f4	b9407e8a	 ldr         w10,[x20,#0x7C]
  000f8	0a0a0169	 and         w9,w11,w10
  000fc	b9007289	 str         w9,[x20,#0x70]

; 1542 : #if MIN_MATCH != 3
; 1543 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1544 : #endif
; 1545 :             while (s->insert) {

  00100	3400000d	 cbz         w13,|$LN2@fill_windo|

; 1539 :             uInt str = s->strstart - s->insert;

  00104	110009cf	 add         w15,w14,#2
  00108		 |$LL5@fill_windo|

; 1546 :                 UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  00108	f9402a88	 ldr         x8,[x20,#0x50]
  0010c	b9407289	 ldr         w9,[x20,#0x70]

; 1547 : #ifndef FASTEST
; 1548 :                 s->prev[str & s->w_mask] = s->head[s->ins_h];

  00110	f940368c	 ldr         x12,[x20,#0x68]
  00114	386f490a	 ldrb        w10,[x8,w15 uxtw #0]

; 1549 : #endif
; 1550 :                 s->head[s->ins_h] = (Pos)str;
; 1551 :                 str++;

  00118	110005ef	 add         w15,w15,#1
  0011c	b9408288	 ldr         w8,[x20,#0x80]
  00120	1ac82129	 lsl         w9,w9,w8
  00124	4a09014b	 eor         w11,w10,w9
  00128	b9407e8a	 ldr         w10,[x20,#0x7C]
  0012c	b9404e89	 ldr         w9,[x20,#0x4C]
  00130	d3407dc8	 uxtw        x8,w14
  00134	0a0a016d	 and         w13,w11,w10
  00138	f940328a	 ldr         x10,[x20,#0x60]
  0013c	8a08012b	 and         x11,x9,x8
  00140	b900728d	 str         w13,[x20,#0x70]
  00144	786d5989	 ldrh        w9,[x12,w13 uxtw #1]
  00148	782b7949	 strh        w9,[x10,x11 lsl #1]
  0014c	f9403688	 ldr         x8,[x20,#0x68]
  00150	b940728b	 ldr         w11,[x20,#0x70]
  00154	782b590e	 strh        w14,[x8,w11 uxtw #1]

; 1552 :                 s->insert--;

  00158	b9570e88	 ldr         w8,[x20,#0x170C]
  0015c	110005ce	 add         w14,w14,#1

; 1553 :                 if (s->lookahead + s->insert < MIN_MATCH)

  00160	b9409e8c	 ldr         w12,[x20,#0x9C]
  00164	51000509	 sub         w9,w8,#1
  00168	0b0c0128	 add         w8,w9,w12
  0016c	b9170e89	 str         w9,[x20,#0x170C]
  00170	71000d1f	 cmp         w8,#3
  00174	54000003	 blo         |$LN2@fill_windo|

; 1542 : #if MIN_MATCH != 3
; 1543 :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 1544 : #endif
; 1545 :             while (s->insert) {

  00178	35000009	 cbnz        w9,|$LL5@fill_windo|
  0017c		 |$LN2@fill_windo|

; 1554 :                     break;
; 1555 :             }
; 1556 :         }
; 1557 :         /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
; 1558 :          * but this is not important since only literal bytes will be emitted.
; 1559 :          */
; 1560 : 
; 1561 :     } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);

  0017c	7104199f	 cmp         w12,#0x106
  00180	54000002	 bhs         |$LN3@fill_windo|
  00184	f9400288	 ldr         x8,[x20]
  00188	b9400909	 ldr         w9,[x8,#8]
  0018c	35000009	 cbnz        w9,|$LL4@fill_windo|
  00190		 |$LN3@fill_windo|

; 1562 : 
; 1563 :     /* If the WIN_INIT bytes after the end of the current data have never been
; 1564 :      * written, then zero those bytes in order to avoid memory check reports of
; 1565 :      * the use of uninitialized (or uninitialised as Julian writes) bytes by
; 1566 :      * the longest match routines.  Update the high water mark for the next
; 1567 :      * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
; 1568 :      * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
; 1569 :      */
; 1570 :     if (s->high_water < s->window_size) {

  00190	b9571a8b	 ldr         w11,[x20,#0x1718]
  00194	b9405a8c	 ldr         w12,[x20,#0x58]
  00198	6b0c017f	 cmp         w11,w12
  0019c	54000002	 bhs         |$LN20@fill_windo|

; 1571 :         ulg curr = s->strstart + (ulg)(s->lookahead);

  001a0	b9409e89	 ldr         w9,[x20,#0x9C]
  001a4	b9409688	 ldr         w8,[x20,#0x94]
  001a8	0b080135	 add         w21,w9,w8

; 1572 :         ulg init;
; 1573 : 
; 1574 :         if (s->high_water < curr) {

  001ac	6b15017f	 cmp         w11,w21
  001b0	54000002	 bhs         |$LN17@fill_windo|

; 1575 :             /* Previous high water mark below current data -- zero WIN_INIT
; 1576 :              * bytes or up to end of window, whichever is less.
; 1577 :              */
; 1578 :             init = s->window_size - curr;

  001b4	4b150188	 sub         w8,w12,w21

; 1579 :             if (init > WIN_INIT)

  001b8	7104091f	 cmp         w8,#0x102
  001bc	52802049	 mov         w9,#0x102
  001c0	1a888133	 cselhi      w19,w9,w8

; 1580 :                 init = WIN_INIT;
; 1581 :             zmemzero(s->window + curr, (unsigned)init);

  001c4	f9402a88	 ldr         x8,[x20,#0x50]
  001c8	aa1303e2	 mov         x2,x19
  001cc	52800001	 mov         w1,#0
  001d0	8b354100	 add         x0,x8,w21,uxtw #0
  001d4	94000000	 bl          memset

; 1582 :             s->high_water = curr + init;

  001d8	0b150268	 add         w8,w19,w21
  001dc	b9171a88	 str         w8,[x20,#0x1718]
  001e0	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  001e4	f9400bf5	 ldr         x21,[sp,#0x10]
  001e8	a8c253f3	 ldp         x19,x20,[sp],#0x20
  001ec	d65f03c0	 ret
  001f0		 |$LN17@fill_windo|

; 1583 :         }
; 1584 :         else if (s->high_water < (ulg)curr + WIN_INIT) {

  001f0	11040aa8	 add         w8,w21,#0x102
  001f4	6b08017f	 cmp         w11,w8
  001f8	54000002	 bhs         |$LN20@fill_windo|

; 1585 :             /* High water mark at or above current data, but below current data
; 1586 :              * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
; 1587 :              * to end of window, whichever is less.
; 1588 :              */
; 1589 :             init = (ulg)curr + WIN_INIT - s->high_water;

  001fc	4b0b02a8	 sub         w8,w21,w11
  00200	1104090a	 add         w10,w8,#0x102

; 1590 :             if (init > s->window_size - s->high_water)
; 1591 :                 init = s->window_size - s->high_water;
; 1592 :             zmemzero(s->window + s->high_water, (unsigned)init);

  00204	f9402a88	 ldr         x8,[x20,#0x50]
  00208	4b0b0189	 sub         w9,w12,w11
  0020c	6b09015f	 cmp         w10,w9
  00210	1a899153	 csells      w19,w10,w9
  00214	8b2b4100	 add         x0,x8,w11,uxtw #0
  00218	aa1303e2	 mov         x2,x19
  0021c	52800001	 mov         w1,#0
  00220	94000000	 bl          memset

; 1593 :             s->high_water += init;

  00224	b9571a88	 ldr         w8,[x20,#0x1718]
  00228	0b080269	 add         w9,w19,w8
  0022c	b9171a89	 str         w9,[x20,#0x1718]
  00230		 |$LN20@fill_windo|
  00230	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00234	f9400bf5	 ldr         x21,[sp,#0x10]
  00238	a8c253f3	 ldp         x19,x20,[sp],#0x20
  0023c	d65f03c0	 ret

			 ENDP  ; |fill_window|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |deflate_stored| PROC

; 1646 : {

  00000	a9bc53f3	 stp         x19,x20,[sp,#-0x40]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	a90263f7	 stp         x23,x24,[sp,#0x20]
  0000c	f9001bf9	 str         x25,[sp,#0x30]
  00010	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00014	910003fd	 mov         fp,sp
  00018	aa0003f4	 mov         x20,x0

; 1647 :     /* Smallest worthy block size when not flushing or finishing. By default
; 1648 :      * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
; 1649 :      * large input and output buffers, the stored block size will be larger.
; 1650 :      */
; 1651 :     unsigned min_block = MIN(s->pending_buf_size - 5, s->w_size);

  0001c	b9401a88	 ldr         w8,[x20,#0x18]
  00020	2a0103f6	 mov         w22,w1
  00024	b9404689	 ldr         w9,[x20,#0x44]

; 1652 : 
; 1653 :     /* Copy as many min_block or larger stored blocks directly to next_out as
; 1654 :      * possible. If flushing, copy the remaining available input to next_out as
; 1655 :      * stored blocks, if there is enough space.
; 1656 :      */
; 1657 :     unsigned len, left, have, last = 0;

  00028	52800017	 mov         w23,#0
  0002c	5100150a	 sub         w10,w8,#5

; 1658 :     unsigned used = s->strm->avail_in;

  00030	f9400288	 ldr         x8,[x20]
  00034	6b09015f	 cmp         w10,w9
  00038	1a899158	 csells      w24,w10,w9
  0003c	b9400919	 ldr         w25,[x8,#8]
  00040		 |$LL4@deflate_st|

; 1659 :     do {
; 1660 :         /* Set len to the maximum size block that we can copy directly with the
; 1661 :          * available input data and output space. Set left to how much of that
; 1662 :          * would be copied from what's left in the window.
; 1663 :          */
; 1664 :         len = MAX_STORED;       /* maximum deflate stored block length */
; 1665 :         have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  00040	b9571688	 ldr         w8,[x20,#0x1714]
  00044	529fffed	 mov         w13,#0xFFFF

; 1666 :         if (s->strm->avail_out < have)          /* need room for header */

  00048	f940028a	 ldr         x10,[x20]
  0004c	1100a909	 add         w9,w8,#0x2A
  00050	b9401948	 ldr         w8,[x10,#0x18]
  00054	13037d2c	 asr         w12,w9,#3
  00058	6b0c011f	 cmp         w8,w12
  0005c	54000003	 blo         |$LN3@deflate_st|

; 1667 :             break;
; 1668 :             /* maximum stored block length that will fit in avail_out: */
; 1669 :         have = s->strm->avail_out - have;

  00060	6b0c011f	 cmp         w8,w12
  00064	1a9f218c	 cselhs      w12,w12,wzr
  00068	d503229f	 csdb
  0006c	f940028b	 ldr         x11,[x20]

; 1670 :         left = s->strstart - s->block_start;    /* bytes left in window */

  00070	b940968a	 ldr         w10,[x20,#0x94]
  00074	b9408689	 ldr         w9,[x20,#0x84]
  00078	b9401968	 ldr         w8,[x11,#0x18]
  0007c	4b090153	 sub         w19,w10,w9

; 1671 :         if (len > (ulg)left + s->strm->avail_in)

  00080	529fffea	 mov         w10,#0xFFFF
  00084	4b0c010c	 sub         w12,w8,w12
  00088	b9400968	 ldr         w8,[x11,#8]
  0008c	0b130109	 add         w9,w8,w19
  00090	6b09015f	 cmp         w10,w9
  00094	1a8d8128	 cselhi      w8,w9,w13

; 1672 :             len = left + s->strm->avail_in;     /* limit len to the input */
; 1673 :         if (len > have)
; 1674 :             len = have;                         /* limit len to the output */
; 1675 : 
; 1676 :         /* If the stored block would be less than min_block in length, or if
; 1677 :          * unable to copy all of the available input when flushing, then try
; 1678 :          * copying to the window and the pending buffer instead. Also don't
; 1679 :          * write an empty block when flushing -- deflate() does that.
; 1680 :          */
; 1681 :         if (len < min_block && ((len == 0 && flush != Z_FINISH) ||

  00098	6b0c011f	 cmp         w8,w12
  0009c	1a8c9115	 csells      w21,w8,w12
  000a0	6b1802bf	 cmp         w21,w24
  000a4	54000002	 bhs         |$LN47@deflate_st|
  000a8	710002bf	 cmp         w21,#0
  000ac	7a440ac4	 ccmpeq      w22,#4,#4
  000b0	7a400ac4	 ccmpeq      w22,#0,#4
  000b4	7a4912a0	 ccmpne      w21,w9,#0
  000b8	54000001	 bne         |$LN3@deflate_st|
  000bc		 |$LN47@deflate_st|

; 1682 :                                 flush == Z_NO_FLUSH ||
; 1683 :                                 len != left + s->strm->avail_in))
; 1684 :             break;
; 1685 : 
; 1686 :         /* Make a dummy stored block in pending to get the header bytes,
; 1687 :          * including any pending bits. This also updates the debugging counts.
; 1688 :          */
; 1689 :         last = flush == Z_FINISH && len == left + s->strm->avail_in ? 1 : 0;

  000bc	710012df	 cmp         w22,#4
  000c0	7a4902a0	 ccmpeq      w21,w9,#0
  000c4	1a9f17f7	 cseteq      w23

; 1690 :         _tr_stored_block(s, (char *)0, 0L, last);

  000c8	2a1703e3	 mov         w3,w23
  000cc	52800002	 mov         w2,#0
  000d0	d2800001	 mov         x1,#0
  000d4	aa1403e0	 mov         x0,x20
  000d8	94000000	 bl          _tr_stored_block

; 1691 : 
; 1692 :         /* Replace the lengths in the dummy stored block with len. */
; 1693 :         s->pending_buf[s->pending - 4] = len;

  000dc	b9402a88	 ldr         w8,[x20,#0x28]

; 1694 :         s->pending_buf[s->pending - 3] = len >> 8;

  000e0	53087eab	 lsr         w11,w21,#8
  000e4	f9400a89	 ldr         x9,[x20,#0x10]

; 1695 :         s->pending_buf[s->pending - 2] = ~len;

  000e8	2a3503ec	 mvn         w12,w21
  000ec	5100110a	 sub         w10,w8,#4
  000f0	382a4935	 strb        w21,[x9,w10 uxtw #0]
  000f4	b9402a88	 ldr         w8,[x20,#0x28]
  000f8	f9400a89	 ldr         x9,[x20,#0x10]
  000fc	51000d0a	 sub         w10,w8,#3
  00100	382a492b	 strb        w11,[x9,w10 uxtw #0]
  00104	b9402a88	 ldr         w8,[x20,#0x28]

; 1696 :         s->pending_buf[s->pending - 1] = ~len >> 8;

  00108	53087d8b	 lsr         w11,w12,#8
  0010c	f9400a89	 ldr         x9,[x20,#0x10]
  00110	5100090a	 sub         w10,w8,#2
  00114	382a492c	 strb        w12,[x9,w10 uxtw #0]
  00118	b9402a88	 ldr         w8,[x20,#0x28]
  0011c	f9400a89	 ldr         x9,[x20,#0x10]
  00120	5100050a	 sub         w10,w8,#1
  00124	382a492b	 strb        w11,[x9,w10 uxtw #0]

; 1697 : 
; 1698 :         /* Write the stored block header bytes. */
; 1699 :         flush_pending(s->strm);

  00128	f9400280	 ldr         x0,[x20]
  0012c	94000000	 bl          flush_pending

; 1700 : 
; 1701 : #ifdef ZLIB_DEBUG
; 1702 :         /* Update debugging counts for the data about to be copied. */
; 1703 :         s->compressed_len += len << 3;
; 1704 :         s->bits_sent += len << 3;
; 1705 : #endif
; 1706 : 
; 1707 :         /* Copy uncompressed bytes from the window to next_out. */
; 1708 :         if (left) {

  00130	34000013	 cbz         w19,|$LN11@deflate_st|

; 1709 :             if (left > len)
; 1710 :                 left = len;
; 1711 :             zmemcpy(s->strm->next_out, s->window + s->block_start, left);

  00134	f9400289	 ldr         x9,[x20]
  00138	6b15027f	 cmp         w19,w21
  0013c	b940868a	 ldr         w10,[x20,#0x84]
  00140	1a9382b3	 cselhi      w19,w21,w19
  00144	f9402a88	 ldr         x8,[x20,#0x50]
  00148	aa1303e2	 mov         x2,x19
  0014c	f9400920	 ldr         x0,[x9,#0x10]
  00150	8b2ac101	 add         x1,x8,w10,sxtw #0
  00154	94000000	 bl          memcpy

; 1712 :             s->strm->next_out += left;

  00158	f940028a	 ldr         x10,[x20]

; 1713 :             s->strm->avail_out -= left;
; 1714 :             s->strm->total_out += left;
; 1715 :             s->block_start += left;
; 1716 :             len -= left;

  0015c	4b1302b5	 sub         w21,w21,w19
  00160	f9400948	 ldr         x8,[x10,#0x10]
  00164	8b334109	 add         x9,x8,w19,uxtw #0
  00168	f9000949	 str         x9,[x10,#0x10]
  0016c	f940028b	 ldr         x11,[x20]
  00170	b9401968	 ldr         w8,[x11,#0x18]
  00174	4b130109	 sub         w9,w8,w19
  00178	b9001969	 str         w9,[x11,#0x18]
  0017c	f940028a	 ldr         x10,[x20]
  00180	b9401d48	 ldr         w8,[x10,#0x1C]
  00184	0b130109	 add         w9,w8,w19
  00188	b9001d49	 str         w9,[x10,#0x1C]
  0018c	b940868a	 ldr         w10,[x20,#0x84]
  00190	0b130148	 add         w8,w10,w19
  00194	b9008688	 str         w8,[x20,#0x84]
  00198		 |$LN11@deflate_st|

; 1717 :         }
; 1718 : 
; 1719 :         /* Copy uncompressed bytes directly from next_in to next_out, updating
; 1720 :          * the check value.
; 1721 :          */
; 1722 :         if (len) {

  00198	34000015	 cbz         w21,|$LN2@deflate_st|

; 1723 :             read_buf(s->strm, s->strm->next_out, len);

  0019c	f9400280	 ldr         x0,[x20]
  001a0	2a1503e2	 mov         w2,w21
  001a4	f9400801	 ldr         x1,[x0,#0x10]
  001a8	94000000	 bl          read_buf

; 1724 :             s->strm->next_out += len;

  001ac	f940028a	 ldr         x10,[x20]
  001b0	f9400948	 ldr         x8,[x10,#0x10]
  001b4	8b354109	 add         x9,x8,w21,uxtw #0
  001b8	f9000949	 str         x9,[x10,#0x10]

; 1725 :             s->strm->avail_out -= len;

  001bc	f940028b	 ldr         x11,[x20]
  001c0	b9401968	 ldr         w8,[x11,#0x18]
  001c4	4b150109	 sub         w9,w8,w21
  001c8	b9001969	 str         w9,[x11,#0x18]

; 1726 :             s->strm->total_out += len;

  001cc	f940028a	 ldr         x10,[x20]
  001d0	b9401d48	 ldr         w8,[x10,#0x1C]
  001d4	0b150109	 add         w9,w8,w21
  001d8	b9001d49	 str         w9,[x10,#0x1C]
  001dc		 |$LN2@deflate_st|

; 1727 :         }
; 1728 :     } while (last == 0);

  001dc	34000017	 cbz         w23,|$LL4@deflate_st|
  001e0		 |$LN3@deflate_st|

; 1729 : 
; 1730 :     /* Update the sliding window with the last s->w_size bytes of the copied
; 1731 :      * data, or append all of the copied data to the existing window if less
; 1732 :      * than s->w_size bytes were copied. Also update the number of bytes to
; 1733 :      * insert in the hash tables, in the event that deflateParams() switches to
; 1734 :      * a non-zero compression level.
; 1735 :      */
; 1736 :     used -= s->strm->avail_in;      /* number of input bytes directly copied */

  001e0	f940028a	 ldr         x10,[x20]
  001e4	b9400948	 ldr         w8,[x10,#8]
  001e8	4b080333	 sub         w19,w25,w8

; 1737 :     if (used) {

  001ec	34000013	 cbz         w19,|$LN52@deflate_st|

; 1738 :         /* If any input was used, then no unused input remains in the window,
; 1739 :          * therefore s->block_start == s->strstart.
; 1740 :          */
; 1741 :         if (used >= s->w_size) {    /* supplant the previous history */

  001f0	b9404689	 ldr         w9,[x20,#0x44]
  001f4	6b09027f	 cmp         w19,w9
  001f8	54000003	 blo         |$LN15@deflate_st|

; 1742 :             s->matches = 2;         /* clear hash */

  001fc	52800048	 mov         w8,#2

; 1743 :             zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);

  00200	f9402a80	 ldr         x0,[x20,#0x50]
  00204	b9170a88	 str         w8,[x20,#0x1708]
  00208	f9400148	 ldr         x8,[x10]
  0020c	aa0903e2	 mov         x2,x9
  00210	cb294101	 sub         x1,x8,w9,uxtw #0
  00214	94000000	 bl          memcpy

; 1744 :             s->strstart = s->w_size;

  00218	b9404688	 ldr         w8,[x20,#0x44]
  0021c	2a0803eb	 mov         w11,w8

; 1745 :         }

  00220	14000020	 b           |$LN55@deflate_st|
  00224		 |$LN15@deflate_st|

; 1746 :         else {
; 1747 :             if (s->window_size - s->strstart <= used) {

  00224	6b09027f	 cmp         w19,w9
  00228	1a9f3273	 csello      w19,w19,wzr
  0022c	d503229f	 csdb
  00230	b940968a	 ldr         w10,[x20,#0x94]
  00234	b9405a88	 ldr         w8,[x20,#0x58]
  00238	4b0a0109	 sub         w9,w8,w10
  0023c	6b13013f	 cmp         w9,w19
  00240	54000008	 bhi         |$LN18@deflate_st|

; 1748 :                 /* Slide the window down. */
; 1749 :                 s->strstart -= s->w_size;

  00244	b9404689	 ldr         w9,[x20,#0x44]

; 1750 :                 zmemcpy(s->window, s->window + s->w_size, s->strstart);

  00248	f9402a80	 ldr         x0,[x20,#0x50]
  0024c	4b090148	 sub         w8,w10,w9
  00250	8b294001	 add         x1,x0,w9,uxtw #0
  00254	aa0803e2	 mov         x2,x8
  00258	b9009688	 str         w8,[x20,#0x94]
  0025c	94000000	 bl          memcpy

; 1751 :                 if (s->matches < 2)

  00260	b9570a88	 ldr         w8,[x20,#0x1708]
  00264	7100091f	 cmp         w8,#2
  00268	54000002	 bhs         |$LN18@deflate_st|

; 1752 :                     s->matches++;   /* add a pending slide_hash() */

  0026c	11000508	 add         w8,w8,#1
  00270	b9170a88	 str         w8,[x20,#0x1708]
  00274		 |$LN18@deflate_st|

; 1753 :             }
; 1754 :             zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);

  00274	f9400288	 ldr         x8,[x20]
  00278	aa1303e2	 mov         x2,x19
  0027c	b940968a	 ldr         w10,[x20,#0x94]
  00280	f9400109	 ldr         x9,[x8]
  00284	f9402a88	 ldr         x8,[x20,#0x50]
  00288	cb334121	 sub         x1,x9,w19,uxtw #0
  0028c	8b2a4100	 add         x0,x8,w10,uxtw #0
  00290	94000000	 bl          memcpy

; 1755 :             s->strstart += used;

  00294	b9409688	 ldr         w8,[x20,#0x94]
  00298	b940468b	 ldr         w11,[x20,#0x44]
  0029c	0b130108	 add         w8,w8,w19
  002a0		 |$LN55@deflate_st|

; 1756 :         }
; 1757 :         s->block_start = s->strstart;
; 1758 :         s->insert += MIN(used, s->w_size - s->insert);

  002a0	b9570e89	 ldr         w9,[x20,#0x170C]
  002a4	2a0803ea	 mov         w10,w8
  002a8	b9009688	 str         w8,[x20,#0x94]
  002ac	b9008688	 str         w8,[x20,#0x84]
  002b0	4b090168	 sub         w8,w11,w9
  002b4	6b08027f	 cmp         w19,w8
  002b8	1a889268	 csells      w8,w19,w8
  002bc	0b090109	 add         w9,w8,w9
  002c0	b9170e89	 str         w9,[x20,#0x170C]
  002c4	14000002	 b           |$LN49@deflate_st|
  002c8		 |$LN52@deflate_st|
  002c8	b940968a	 ldr         w10,[x20,#0x94]
  002cc		 |$LN49@deflate_st|

; 1759 :     }
; 1760 :     if (s->high_water < s->strstart)

  002cc	b9571a88	 ldr         w8,[x20,#0x1718]
  002d0	6b0a011f	 cmp         w8,w10
  002d4	54000002	 bhs         |$LN19@deflate_st|

; 1761 :         s->high_water = s->strstart;

  002d8	b9171a8a	 str         w10,[x20,#0x1718]
  002dc		 |$LN19@deflate_st|

; 1762 : 
; 1763 :     /* If the last block was written to next_out, then done. */
; 1764 :     if (last)

  002dc	34000017	 cbz         w23,|$LN20@deflate_st|

; 1765 :         return finish_done;

  002e0	52800060	 mov         w0,#3
  002e4	1400006a	 b           |$LN1@deflate_st|
  002e8		 |$LN20@deflate_st|

; 1766 : 
; 1767 :     /* If flushing and all input has been consumed, then done. */
; 1768 :     if (flush != Z_NO_FLUSH && flush != Z_FINISH &&
; 1769 :         s->strm->avail_in == 0 && (long)s->strstart == s->block_start)

  002e8	721d7adf	 tst         w22,#0xFFFFFFFB
  002ec	54000000	 beq         |$LN21@deflate_st|
  002f0	f9400288	 ldr         x8,[x20]
  002f4	b9400909	 ldr         w9,[x8,#8]
  002f8	35000009	 cbnz        w9,|$LN21@deflate_st|
  002fc	b9408688	 ldr         w8,[x20,#0x84]
  00300	6b08015f	 cmp         w10,w8
  00304	54000001	 bne         |$LN21@deflate_st|

; 1770 :         return block_done;

  00308	52800020	 mov         w0,#1
  0030c	14000060	 b           |$LN1@deflate_st|
  00310		 |$LN21@deflate_st|

; 1771 : 
; 1772 :     /* Fill the window with any remaining input. */
; 1773 :     have = s->window_size - s->strstart - 1;

  00310	b9405a88	 ldr         w8,[x20,#0x58]

; 1774 :     if (s->strm->avail_in > have && s->block_start >= (long)s->w_size) {

  00314	2a0a03ec	 mov         w12,w10
  00318	f9400280	 ldr         x0,[x20]
  0031c	4b0a0109	 sub         w9,w8,w10
  00320	b9400808	 ldr         w8,[x0,#8]
  00324	51000533	 sub         w19,w9,#1
  00328	2a0a03e9	 mov         w9,w10
  0032c	6b13011f	 cmp         w8,w19
  00330	54000009	 bls         |$LN22@deflate_st|
  00334	b9408688	 ldr         w8,[x20,#0x84]
  00338	b940468b	 ldr         w11,[x20,#0x44]
  0033c	6b0b011f	 cmp         w8,w11
  00340	5400000b	 blt         |$LN22@deflate_st|

; 1775 :         /* Slide the window down. */
; 1776 :         s->block_start -= s->w_size;
; 1777 :         s->strstart -= s->w_size;
; 1778 :         zmemcpy(s->window, s->window + s->w_size, s->strstart);

  00344	f9402a80	 ldr         x0,[x20,#0x50]
  00348	4b0b0149	 sub         w9,w10,w11
  0034c	4b0b0108	 sub         w8,w8,w11
  00350	b9009689	 str         w9,[x20,#0x94]
  00354	aa0903e2	 mov         x2,x9
  00358	b9008688	 str         w8,[x20,#0x84]
  0035c	8b2b4001	 add         x1,x0,w11,uxtw #0
  00360	94000000	 bl          memcpy

; 1779 :         if (s->matches < 2)

  00364	b9570a88	 ldr         w8,[x20,#0x1708]
  00368	7100091f	 cmp         w8,#2
  0036c	54000002	 bhs         |$LN23@deflate_st|

; 1780 :             s->matches++;           /* add a pending slide_hash() */

  00370	11000508	 add         w8,w8,#1
  00374	b9170a88	 str         w8,[x20,#0x1708]
  00378		 |$LN23@deflate_st|

; 1781 :         have += s->w_size;          /* more space now */

  00378	b9404688	 ldr         w8,[x20,#0x44]
  0037c	b9409689	 ldr         w9,[x20,#0x94]
  00380	f9400280	 ldr         x0,[x20]
  00384	0b080273	 add         w19,w19,w8
  00388	2a0903ec	 mov         w12,w9
  0038c		 |$LN22@deflate_st|

; 1782 :     }
; 1783 :     if (have > s->strm->avail_in)

  0038c	b9400808	 ldr         w8,[x0,#8]

; 1784 :         have = s->strm->avail_in;
; 1785 :     if (have) {

  00390	6b08027f	 cmp         w19,w8
  00394	1a889273	 csells      w19,w19,w8
  00398	34000013	 cbz         w19,|$LN25@deflate_st|

; 1786 :         read_buf(s->strm, s->window + s->strstart, have);

  0039c	f9402a88	 ldr         x8,[x20,#0x50]
  003a0	2a1303e2	 mov         w2,w19
  003a4	8b294101	 add         x1,x8,w9,uxtw #0
  003a8	94000000	 bl          read_buf

; 1787 :         s->strstart += have;

  003ac	b9409688	 ldr         w8,[x20,#0x94]
  003b0	0b08026c	 add         w12,w19,w8
  003b4	b900968c	 str         w12,[x20,#0x94]
  003b8		 |$LN25@deflate_st|

; 1788 :     }
; 1789 :     if (s->high_water < s->strstart)

  003b8	b9571a88	 ldr         w8,[x20,#0x1718]
  003bc	6b0c011f	 cmp         w8,w12
  003c0	54000002	 bhs         |$LN26@deflate_st|

; 1790 :         s->high_water = s->strstart;

  003c4	b9171a8c	 str         w12,[x20,#0x1718]
  003c8		 |$LN26@deflate_st|

; 1791 : 
; 1792 :     /* There was not enough avail_out to write a complete worthy or flushed
; 1793 :      * stored block to next_out. Write a stored block to pending instead, if we
; 1794 :      * have enough input for a worthy block, or if flushing and there is enough
; 1795 :      * room for the remaining input as a stored block in the pending buffer.
; 1796 :      */
; 1797 :     have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  003c8	b9571688	 ldr         w8,[x20,#0x1714]

; 1798 :         /* maximum stored block length that will fit in pending: */
; 1799 :     have = MIN(s->pending_buf_size - have, MAX_STORED);

  003cc	b9401a89	 ldr         w9,[x20,#0x18]
  003d0	1100a90a	 add         w10,w8,#0x2A
  003d4	4b8a0d2b	 sub         w11,w9,w10,asr #3
  003d8	529fffe8	 mov         w8,#0xFFFF
  003dc	529fffe9	 mov         w9,#0xFFFF
  003e0	6b08017f	 cmp         w11,w8

; 1800 :     min_block = MIN(have, s->w_size);

  003e4	b9404688	 ldr         w8,[x20,#0x44]
  003e8	1a8b812d	 cselhi      w13,w9,w11

; 1801 :     left = s->strstart - s->block_start;

  003ec	b940868b	 ldr         w11,[x20,#0x84]
  003f0	6b0801bf	 cmp         w13,w8
  003f4	4b0b018a	 sub         w10,w12,w11
  003f8	1a8891a8	 csells      w8,w13,w8

; 1802 :     if (left >= min_block ||

  003fc	6b08015f	 cmp         w10,w8
  00400	54000002	 bhs         |$LN53@deflate_st|
  00404	7100015f	 cmp         w10,#0
  00408	7a440ac4	 ccmpeq      w22,#4,#4
  0040c	7a400ac4	 ccmpeq      w22,#0,#4
  00410	54000000	 beq         |$LN27@deflate_st|
  00414	f9400288	 ldr         x8,[x20]
  00418	b9400909	 ldr         w9,[x8,#8]
  0041c	7100013f	 cmp         w9,#0
  00420	7a4d014a	 ccmpeq      w10,w13,#0xA
  00424	54000008	 bhi         |$LN27@deflate_st|
  00428		 |$LN53@deflate_st|

; 1803 :         ((left || flush == Z_FINISH) && flush != Z_NO_FLUSH &&
; 1804 :          s->strm->avail_in == 0 && left <= have)) {
; 1805 :         len = MIN(left, have);

  00428	6b0d015f	 cmp         w10,w13
  0042c	1a8a81b3	 cselhi      w19,w13,w10

; 1806 :         last = flush == Z_FINISH && s->strm->avail_in == 0 &&

  00430	710012df	 cmp         w22,#4
  00434	54000001	 bne         |$LN41@deflate_st|
  00438	f9400288	 ldr         x8,[x20]
  0043c	52800037	 mov         w23,#1
  00440	b9400909	 ldr         w9,[x8,#8]
  00444	7100013f	 cmp         w9,#0
  00448	7a4a0260	 ccmpeq      w19,w10,#0
  0044c	54000000	 beq         |$LN42@deflate_st|
  00450		 |$LN41@deflate_st|
  00450	52800017	 mov         w23,#0
  00454		 |$LN42@deflate_st|

; 1807 :                len == left ? 1 : 0;
; 1808 :         _tr_stored_block(s, (charf *)s->window + s->block_start, len, last);

  00454	f9402a88	 ldr         x8,[x20,#0x50]
  00458	2a1703e3	 mov         w3,w23
  0045c	2a1303e2	 mov         w2,w19
  00460	aa1403e0	 mov         x0,x20
  00464	8b2bc101	 add         x1,x8,w11,sxtw #0
  00468	94000000	 bl          _tr_stored_block

; 1809 :         s->block_start += len;

  0046c	b9408688	 ldr         w8,[x20,#0x84]

; 1810 :         flush_pending(s->strm);

  00470	f9400280	 ldr         x0,[x20]
  00474	0b130109	 add         w9,w8,w19
  00478	b9008689	 str         w9,[x20,#0x84]
  0047c	94000000	 bl          flush_pending
  00480		 |$LN27@deflate_st|

; 1811 :     }
; 1812 : 
; 1813 :     /* We've done all we can with the available input and output. */
; 1814 :     return last ? finish_started : need_more;

  00480	710002ff	 cmp         w23,#0
  00484	52800048	 mov         w8,#2
  00488	1a9f1100	 cselne      w0,w8,wzr
  0048c		 |$LN1@deflate_st|
  0048c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00490	f9401bf9	 ldr         x25,[sp,#0x30]
  00494	a94263f7	 ldp         x23,x24,[sp,#0x20]
  00498	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  0049c	a8c453f3	 ldp         x19,x20,[sp],#0x40
  004a0	d65f03c0	 ret

			 ENDP  ; |deflate_stored|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |deflate_fast| PROC

; 1827 : {

  00000	a9be53f3	 stp         x19,x20,[sp,#-0x20]!
  00004	f9000bf5	 str         x21,[sp,#0x10]
  00008	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  0000c	910003fd	 mov         fp,sp
  00010	90000008	 adrp        x8,_length_code
  00014	91000114	 add         x20,x8,PageOffset(_length_code)
  00018	aa0003f3	 mov         x19,x0
  0001c	2a0103f5	 mov         w21,w1
  00020		 |$LL2@deflate_fa|

; 1828 :     IPos hash_head;       /* head of the hash chain */
; 1829 :     int bflush;           /* set if current block must be flushed */
; 1830 : 
; 1831 :     for (;;) {
; 1832 :         /* Make sure that we always have enough lookahead, except
; 1833 :          * at the end of the input file. We need MAX_MATCH bytes
; 1834 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1835 :          * string following the next match.
; 1836 :          */
; 1837 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00020	b9409e68	 ldr         w8,[x19,#0x9C]
  00024	7104191f	 cmp         w8,#0x106
  00028	54000002	 bhs         |$LN10@deflate_fa|

; 1838 :             fill_window(s);

  0002c	aa1303e0	 mov         x0,x19
  00030	94000000	 bl          fill_window

; 1839 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00034	b9409e68	 ldr         w8,[x19,#0x9C]
  00038	7104191f	 cmp         w8,#0x106
  0003c	7a403aa0	 ccmplo      w21,#0,#0
  00040	54000000	 beq         |$LN39@deflate_fa|

; 1840 :                 return need_more;
; 1841 :             }
; 1842 :             if (s->lookahead == 0) break; /* flush the current block */

  00044	34000008	 cbz         w8,|$LN38@deflate_fa|
  00048		 |$LN10@deflate_fa|

; 1843 :         }
; 1844 : 
; 1845 :         /* Insert the string window[strstart .. strstart+2] in the
; 1846 :          * dictionary, and set hash_head to the head of the hash chain:
; 1847 :          */
; 1848 :         hash_head = NIL;
; 1849 :         if (s->lookahead >= MIN_MATCH) {

  00048	71000d1f	 cmp         w8,#3
  0004c	54000003	 blo         |$LN12@deflate_fa|

; 1850 :             INSERT_STRING(s, s->strstart, hash_head);

  00050	b940966e	 ldr         w14,[x19,#0x94]
  00054	f9402a68	 ldr         x8,[x19,#0x50]
  00058	b940726a	 ldr         w10,[x19,#0x70]
  0005c	f940366c	 ldr         x12,[x19,#0x68]
  00060	110009c9	 add         w9,w14,#2
  00064	3869490b	 ldrb        w11,[x8,w9 uxtw #0]
  00068	b9408268	 ldr         w8,[x19,#0x80]
  0006c	1ac82149	 lsl         w9,w10,w8
  00070	b9407e6a	 ldr         w10,[x19,#0x7C]
  00074	b9404e68	 ldr         w8,[x19,#0x4C]
  00078	4a09016b	 eor         w11,w11,w9
  0007c	f9403269	 ldr         x9,[x19,#0x60]
  00080	0a0a016d	 and         w13,w11,w10
  00084	b900726d	 str         w13,[x19,#0x70]
  00088	8a0801ca	 and         x10,x14,x8
  0008c	786d5988	 ldrh        w8,[x12,w13 uxtw #1]
  00090	782a7928	 strh        w8,[x9,x10 lsl #1]
  00094	b9404e68	 ldr         w8,[x19,#0x4C]
  00098	b940966b	 ldr         w11,[x19,#0x94]
  0009c	8a080169	 and         x9,x11,x8
  000a0	f9403268	 ldr         x8,[x19,#0x60]
  000a4	78697901	 ldrh        w1,[x8,x9 lsl #1]
  000a8	b9407269	 ldr         w9,[x19,#0x70]
  000ac	f9403668	 ldr         x8,[x19,#0x68]
  000b0	7829590b	 strh        w11,[x8,w9 uxtw #1]

; 1851 :         }
; 1852 : 
; 1853 :         /* Find the longest match, discarding those <= prev_length.
; 1854 :          * At this point we have always match_length < MIN_MATCH
; 1855 :          */
; 1856 :         if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {

  000b4	34000001	 cbz         w1,|$LN12@deflate_fa|
  000b8	b9409668	 ldr         w8,[x19,#0x94]
  000bc	b9404669	 ldr         w9,[x19,#0x44]
  000c0	4b01010a	 sub         w10,w8,w1
  000c4	5104192b	 sub         w11,w9,#0x106
  000c8	6b0b015f	 cmp         w10,w11
  000cc	54000008	 bhi         |$LN12@deflate_fa|

; 1857 :             /* To simplify the code, we prevent matches with the string
; 1858 :              * of window index 0 (in particular we have to avoid a match
; 1859 :              * of the string with itself at the start of the input file).
; 1860 :              */
; 1861 :             s->match_length = longest_match (s, hash_head);

  000d0	6b0b015f	 cmp         w10,w11
  000d4	1a9f914a	 csells      w10,w10,wzr
  000d8	d503229f	 csdb
  000dc	aa1303e0	 mov         x0,x19
  000e0	94000000	 bl          longest_match
  000e4	b9008a60	 str         w0,[x19,#0x88]
  000e8		 |$LN12@deflate_fa|

; 1862 :             /* longest_match() sets match_start */
; 1863 :         }
; 1864 :         if (s->match_length >= MIN_MATCH) {

  000e8	b9408a68	 ldr         w8,[x19,#0x88]
  000ec	b940966a	 ldr         w10,[x19,#0x94]
  000f0	71000d1f	 cmp         w8,#3
  000f4	54000003	 blo         |$LN13@deflate_fa|

; 1865 :             check_match(s, s->strstart, s->match_start, s->match_length);
; 1866 : 
; 1867 :             _tr_tally_dist(s, s->strstart - s->match_start,

  000f8	b9409a69	 ldr         w9,[x19,#0x98]
  000fc	1103f508	 add         w8,w8,#0xFD
  00100	53001d0d	 uxtb        w13,w8
  00104	b956f66b	 ldr         w11,[x19,#0x16F4]
  00108	f94b7e68	 ldr         x8,[x19,#0x16F8]
  0010c	4b09014a	 sub         w10,w10,w9
  00110	53003d4c	 uxth        w12,w10
  00114	782b590c	 strh        w12,[x8,w11 uxtw #1]
  00118	b956f66a	 ldr         w10,[x19,#0x16F4]
  0011c	f94b7669	 ldr         x9,[x19,#0x16E8]
  00120	382a492d	 strb        w13,[x9,w10 uxtw #0]
  00124	b956f668	 ldr         w8,[x19,#0x16F4]
  00128	1100050a	 add         w10,w8,#1
  0012c	529fffe8	 mov         w8,#0xFFFF
  00130	b916f66a	 str         w10,[x19,#0x16F4]
  00134	0b080188	 add         w8,w12,w8
  00138	53003d0b	 uxth        w11,w8
  0013c	387469a8	 ldrb        w8,[x13,x20]
  00140	7104017f	 cmp         w11,#0x100
  00144	9104c108	 add         x8,x8,#0x130
  00148	d37ef50a	 lsl         x10,x8,#2
  0014c	78736949	 ldrh        w9,[x10,x19]
  00150	11000528	 add         w8,w9,#1
  00154	78336948	 strh        w8,[x10,x19]
  00158	54000002	 bhs         |$LN24@deflate_fa|
  0015c	7104017f	 cmp         w11,#0x100
  00160	1a9f316b	 csello      w11,w11,wzr
  00164	d503229f	 csdb
  00168	91040288	 add         x8,x20,#0x100
  0016c	8b080169	 add         x9,x11,x8
  00170	14000006	 b           |$LN25@deflate_fa|
  00174		 |$LN24@deflate_fa|
  00174	7104017f	 cmp         w11,#0x100
  00178	1a9f216b	 cselhs      w11,w11,wzr
  0017c	d503229f	 csdb
  00180	91080288	 add         x8,x20,#0x200
  00184	8b4b1d09	 add         x9,x8,x11,lsr #7
  00188		 |$LN25@deflate_fa|
  00188	39400128	 ldrb        w8,[x9]

; 1868 :                            s->match_length - MIN_MATCH, bflush);
; 1869 : 
; 1870 :             s->lookahead -= s->match_length;
; 1871 : 
; 1872 :             /* Insert new strings in the hash table only if the match length
; 1873 :              * is not too large. This saves time but degrades compression.
; 1874 :              */
; 1875 : #ifndef FASTEST
; 1876 :             if (s->match_length <= s->max_insert_length &&

  0018c	9101426f	 add         x15,x19,#0x50
  00190	9109b108	 add         x8,x8,#0x26C
  00194	d37ef50a	 lsl         x10,x8,#2
  00198	78736949	 ldrh        w9,[x10,x19]
  0019c	11000528	 add         w8,w9,#1
  001a0	78336948	 strh        w8,[x10,x19]
  001a4	b956f26a	 ldr         w10,[x19,#0x16F0]
  001a8	b956f668	 ldr         w8,[x19,#0x16F4]
  001ac	5100054b	 sub         w11,w10,#1
  001b0	b9408a6a	 ldr         w10,[x19,#0x88]
  001b4	6b0b011f	 cmp         w8,w11
  001b8	b9409e68	 ldr         w8,[x19,#0x9C]
  001bc	1a9f17e7	 cseteq      w7
  001c0	4b0a0109	 sub         w9,w8,w10
  001c4	b940aa68	 ldr         w8,[x19,#0xA8]
  001c8	b9009e69	 str         w9,[x19,#0x9C]
  001cc	6b08015f	 cmp         w10,w8
  001d0	7a439920	 ccmpls      w9,#3,#0
  001d4	54000003	 blo         |$LN45@deflate_fa|

; 1877 :                 s->lookahead >= MIN_MATCH) {
; 1878 :                 s->match_length--; /* string at strstart already in table */

  001d8	51000548	 sub         w8,w10,#1
  001dc	b9008a68	 str         w8,[x19,#0x88]
  001e0		 |$LL7@deflate_fa|

; 1879 :                 do {
; 1880 :                     s->strstart++;

  001e0	b9409668	 ldr         w8,[x19,#0x94]

; 1881 :                     INSERT_STRING(s, s->strstart, hash_head);

  001e4	b940726a	 ldr         w10,[x19,#0x70]
  001e8	f940366c	 ldr         x12,[x19,#0x68]
  001ec	1100050e	 add         w14,w8,#1
  001f0	f94001e8	 ldr         x8,[x15]
  001f4	110009c9	 add         w9,w14,#2
  001f8	b900966e	 str         w14,[x19,#0x94]
  001fc	3869490b	 ldrb        w11,[x8,w9 uxtw #0]
  00200	b9408268	 ldr         w8,[x19,#0x80]
  00204	1ac82149	 lsl         w9,w10,w8
  00208	b9407e6a	 ldr         w10,[x19,#0x7C]
  0020c	4a09016b	 eor         w11,w11,w9
  00210	b9404e69	 ldr         w9,[x19,#0x4C]
  00214	0a0a016d	 and         w13,w11,w10
  00218	f940326a	 ldr         x10,[x19,#0x60]
  0021c	b900726d	 str         w13,[x19,#0x70]
  00220	8a0e012b	 and         x11,x9,x14
  00224	786d5989	 ldrh        w9,[x12,w13 uxtw #1]
  00228	782b7949	 strh        w9,[x10,x11 lsl #1]
  0022c	b9407269	 ldr         w9,[x19,#0x70]
  00230	79412a6c	 ldrh        w12,[x19,#0x94]
  00234	f9403668	 ldr         x8,[x19,#0x68]
  00238	7829590c	 strh        w12,[x8,w9 uxtw #1]

; 1882 :                     /* strstart never exceeds WSIZE-MAX_MATCH, so there are
; 1883 :                      * always MIN_MATCH bytes ahead.
; 1884 :                      */
; 1885 :                 } while (--s->match_length != 0);

  0023c	b9408a69	 ldr         w9,[x19,#0x88]
  00240	5100052a	 sub         w10,w9,#1
  00244	b9008a6a	 str         w10,[x19,#0x88]
  00248	3500000a	 cbnz        w10,|$LL7@deflate_fa|

; 1886 :                 s->strstart++;

  0024c	b9409668	 ldr         w8,[x19,#0x94]
  00250	1100050c	 add         w12,w8,#1

; 1887 :             } else

  00254	1400002c	 b           |$LN47@deflate_fa|
  00258		 |$LN45@deflate_fa|

; 1888 : #endif
; 1889 :             {
; 1890 :                 s->strstart += s->match_length;

  00258	b9409668	 ldr         w8,[x19,#0x94]

; 1891 :                 s->match_length = 0;

  0025c	b9008a7f	 str         wzr,[x19,#0x88]
  00260	0b08014c	 add         w12,w10,w8

; 1892 :                 s->ins_h = s->window[s->strstart];

  00264	f94001ea	 ldr         x10,[x15]
  00268	b900966c	 str         w12,[x19,#0x94]

; 1893 :                 UPDATE_HASH(s, s->ins_h, s->window[s->strstart+1]);

  0026c	b9408268	 ldr         w8,[x19,#0x80]
  00270	386c4949	 ldrb        w9,[x10,w12 uxtw #0]
  00274	b9007269	 str         w9,[x19,#0x70]
  00278	1ac8212b	 lsl         w11,w9,w8
  0027c	b9407e68	 ldr         w8,[x19,#0x7C]
  00280	11000589	 add         w9,w12,#1
  00284	3869494a	 ldrb        w10,[x10,w9 uxtw #0]
  00288	4a0a016b	 eor         w11,w11,w10
  0028c	0a080169	 and         w9,w11,w8
  00290	b9007269	 str         w9,[x19,#0x70]

; 1894 : #if MIN_MATCH != 3
; 1895 :                 Call UPDATE_HASH() MIN_MATCH-3 more times
; 1896 : #endif
; 1897 :                 /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
; 1898 :                  * matter since it will be recomputed at next deflate call.
; 1899 :                  */
; 1900 :             }
; 1901 :         } else {

  00294	1400001d	 b           |$LN14@deflate_fa|
  00298		 |$LN13@deflate_fa|

; 1902 :             /* No match, output a literal byte */
; 1903 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1904 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

  00298	9101426f	 add         x15,x19,#0x50
  0029c	b956f669	 ldr         w9,[x19,#0x16F4]
  002a0	f94001e8	 ldr         x8,[x15]
  002a4	386a490b	 ldrb        w11,[x8,w10 uxtw #0]
  002a8	f94b7e68	 ldr         x8,[x19,#0x16F8]
  002ac	7829591f	 strh        wzr,[x8,w9 uxtw #1]
  002b0	b956f66a	 ldr         w10,[x19,#0x16F4]
  002b4	f94b7669	 ldr         x9,[x19,#0x16E8]
  002b8	382a492b	 strb        w11,[x9,w10 uxtw #0]
  002bc	b956f668	 ldr         w8,[x19,#0x16F4]
  002c0	1100050a	 add         w10,w8,#1
  002c4	9100bd68	 add         x8,x11,#0x2F
  002c8	b916f66a	 str         w10,[x19,#0x16F4]
  002cc	d37ef50a	 lsl         x10,x8,#2
  002d0	78736949	 ldrh        w9,[x10,x19]
  002d4	11000528	 add         w8,w9,#1
  002d8	78336948	 strh        w8,[x10,x19]
  002dc	b956f26a	 ldr         w10,[x19,#0x16F0]
  002e0	b956f668	 ldr         w8,[x19,#0x16F4]
  002e4	5100054b	 sub         w11,w10,#1

; 1905 :             s->lookahead--;
; 1906 :             s->strstart++;

  002e8	b940966a	 ldr         w10,[x19,#0x94]
  002ec	6b0b011f	 cmp         w8,w11
  002f0	b9409e68	 ldr         w8,[x19,#0x9C]
  002f4	1a9f17e7	 cseteq      w7
  002f8	1100054c	 add         w12,w10,#1
  002fc	51000509	 sub         w9,w8,#1
  00300	b9009e69	 str         w9,[x19,#0x9C]
  00304		 |$LN47@deflate_fa|

; 1907 :         }
; 1908 :         if (bflush) FLUSH_BLOCK(s, 0);

  00304	b900966c	 str         w12,[x19,#0x94]
  00308		 |$LN14@deflate_fa|
  00308	34000007	 cbz         w7,|$LL2@deflate_fa|
  0030c	b9408669	 ldr         w9,[x19,#0x84]
  00310	37f80009	 tbnz        x9,#0x1F,|$LN26@deflate_fa|
  00314	f94001e8	 ldr         x8,[x15]
  00318	8b294101	 add         x1,x8,w9,uxtw #0
  0031c	14000002	 b           |$LN27@deflate_fa|
  00320		 |$LN26@deflate_fa|
  00320	d2800001	 mov         x1,#0
  00324		 |$LN27@deflate_fa|
  00324	4b090182	 sub         w2,w12,w9
  00328	52800003	 mov         w3,#0
  0032c	aa1303e0	 mov         x0,x19
  00330	94000000	 bl          _tr_flush_block
  00334	b9409668	 ldr         w8,[x19,#0x94]
  00338	f9400260	 ldr         x0,[x19]
  0033c	b9008668	 str         w8,[x19,#0x84]
  00340	94000000	 bl          flush_pending
  00344	f9400268	 ldr         x8,[x19]
  00348	b9401909	 ldr         w9,[x8,#0x18]
  0034c	35000009	 cbnz        w9,|$LL2@deflate_fa|
  00350		 |$LN39@deflate_fa|
  00350	52800000	 mov         w0,#0
  00354	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00358	f9400bf5	 ldr         x21,[sp,#0x10]
  0035c	a8c253f3	 ldp         x19,x20,[sp],#0x20
  00360	d65f03c0	 ret
  00364		 |$LN38@deflate_fa|

; 1909 :     }
; 1910 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  00364	b9409669	 ldr         w9,[x19,#0x94]
  00368	52800048	 mov         w8,#2
  0036c	7100093f	 cmp         w9,#2
  00370	1a883128	 csello      w8,w9,w8
  00374	b9170e68	 str         w8,[x19,#0x170C]

; 1911 :     if (flush == Z_FINISH) {

  00378	710012bf	 cmp         w21,#4
  0037c	54000001	 bne         |$LN19@deflate_fa|

; 1912 :         FLUSH_BLOCK(s, 1);

  00380	b940866a	 ldr         w10,[x19,#0x84]
  00384	37f8000a	 tbnz        x10,#0x1F,|$LN30@deflate_fa|
  00388	f9402a68	 ldr         x8,[x19,#0x50]
  0038c	8b2a4101	 add         x1,x8,w10,uxtw #0
  00390	14000002	 b           |$LN31@deflate_fa|
  00394		 |$LN30@deflate_fa|
  00394	d2800001	 mov         x1,#0
  00398		 |$LN31@deflate_fa|
  00398	4b0a0122	 sub         w2,w9,w10
  0039c	52800023	 mov         w3,#1
  003a0	aa1303e0	 mov         x0,x19
  003a4	94000000	 bl          _tr_flush_block
  003a8	b9409668	 ldr         w8,[x19,#0x94]
  003ac	f9400260	 ldr         x0,[x19]
  003b0	b9008668	 str         w8,[x19,#0x84]
  003b4	94000000	 bl          flush_pending
  003b8	f9400268	 ldr         x8,[x19]
  003bc	5280004a	 mov         w10,#2
  003c0	b9401909	 ldr         w9,[x8,#0x18]
  003c4	52800068	 mov         w8,#3
  003c8	7100013f	 cmp         w9,#0
  003cc	1a880140	 cseleq      w0,w10,w8
  003d0	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  003d4	f9400bf5	 ldr         x21,[sp,#0x10]
  003d8	a8c253f3	 ldp         x19,x20,[sp],#0x20
  003dc	d65f03c0	 ret
  003e0		 |$LN19@deflate_fa|

; 1913 :         return finish_done;
; 1914 :     }
; 1915 :     if (s->last_lit)

  003e0	b956f668	 ldr         w8,[x19,#0x16F4]
  003e4	34000008	 cbz         w8,|$LN22@deflate_fa|

; 1916 :         FLUSH_BLOCK(s, 0);

  003e8	b940866a	 ldr         w10,[x19,#0x84]
  003ec	37f8000a	 tbnz        x10,#0x1F,|$LN32@deflate_fa|
  003f0	f9402a68	 ldr         x8,[x19,#0x50]
  003f4	8b2a4101	 add         x1,x8,w10,uxtw #0
  003f8	14000002	 b           |$LN33@deflate_fa|
  003fc		 |$LN32@deflate_fa|
  003fc	d2800001	 mov         x1,#0
  00400		 |$LN33@deflate_fa|
  00400	4b0a0122	 sub         w2,w9,w10
  00404	52800003	 mov         w3,#0
  00408	aa1303e0	 mov         x0,x19
  0040c	94000000	 bl          _tr_flush_block
  00410	b9409668	 ldr         w8,[x19,#0x94]
  00414	f9400260	 ldr         x0,[x19]
  00418	b9008668	 str         w8,[x19,#0x84]
  0041c	94000000	 bl          flush_pending
  00420	f9400268	 ldr         x8,[x19]
  00424	b9401909	 ldr         w9,[x8,#0x18]
  00428	34000009	 cbz         w9,|$LN39@deflate_fa|
  0042c		 |$LN22@deflate_fa|

; 1917 :     return block_done;

  0042c	52800020	 mov         w0,#1
  00430	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00434	f9400bf5	 ldr         x21,[sp,#0x10]
  00438	a8c253f3	 ldp         x19,x20,[sp],#0x20
  0043c	d65f03c0	 ret

			 ENDP  ; |deflate_fast|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |deflate_slow| PROC

; 1929 : {

  00000	a9bd53f3	 stp         x19,x20,[sp,#-0x30]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	f90013f7	 str         x23,[sp,#0x20]
  0000c	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00010	910003fd	 mov         fp,sp
  00014	90000008	 adrp        x8,_length_code
  00018	91000114	 add         x20,x8,PageOffset(_length_code)
  0001c	aa0003f3	 mov         x19,x0
  00020	2a0103f5	 mov         w21,w1
  00024	52800056	 mov         w22,#2
  00028	52800037	 mov         w23,#1
  0002c		 |$LL2@deflate_sl|

; 1930 :     IPos hash_head;          /* head of hash chain */
; 1931 :     int bflush;              /* set if current block must be flushed */
; 1932 : 
; 1933 :     /* Process the input block. */
; 1934 :     for (;;) {
; 1935 :         /* Make sure that we always have enough lookahead, except
; 1936 :          * at the end of the input file. We need MAX_MATCH bytes
; 1937 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1938 :          * string following the next match.
; 1939 :          */
; 1940 :         if (s->lookahead < MIN_LOOKAHEAD) {

  0002c	b9409e68	 ldr         w8,[x19,#0x9C]
  00030	7104191f	 cmp         w8,#0x106
  00034	54000002	 bhs         |$LN10@deflate_sl|

; 1941 :             fill_window(s);

  00038	aa1303e0	 mov         x0,x19
  0003c	94000000	 bl          fill_window

; 1942 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00040	b9409e68	 ldr         w8,[x19,#0x9C]
  00044	7104191f	 cmp         w8,#0x106
  00048	7a403aa0	 ccmplo      w21,#0,#0
  0004c	54000000	 beq         |$LN48@deflate_sl|

; 1943 :                 return need_more;
; 1944 :             }
; 1945 :             if (s->lookahead == 0) break; /* flush the current block */

  00050	34000008	 cbz         w8,|$LN46@deflate_sl|
  00054		 |$LN10@deflate_sl|

; 1946 :         }
; 1947 : 
; 1948 :         /* Insert the string window[strstart .. strstart+2] in the
; 1949 :          * dictionary, and set hash_head to the head of the hash chain:
; 1950 :          */
; 1951 :         hash_head = NIL;

  00054	52800001	 mov         w1,#0

; 1952 :         if (s->lookahead >= MIN_MATCH) {

  00058	71000d1f	 cmp         w8,#3
  0005c	54000003	 blo         |$LN11@deflate_sl|

; 1953 :             INSERT_STRING(s, s->strstart, hash_head);

  00060	b940966e	 ldr         w14,[x19,#0x94]
  00064	f9402a68	 ldr         x8,[x19,#0x50]
  00068	b940726a	 ldr         w10,[x19,#0x70]
  0006c	f940366c	 ldr         x12,[x19,#0x68]
  00070	110009c9	 add         w9,w14,#2
  00074	3869490b	 ldrb        w11,[x8,w9 uxtw #0]
  00078	b9408268	 ldr         w8,[x19,#0x80]
  0007c	1ac82149	 lsl         w9,w10,w8
  00080	b9407e6a	 ldr         w10,[x19,#0x7C]
  00084	4a09016b	 eor         w11,w11,w9
  00088	b9404e69	 ldr         w9,[x19,#0x4C]
  0008c	0a0a016d	 and         w13,w11,w10
  00090	f940326a	 ldr         x10,[x19,#0x60]
  00094	8a0e012b	 and         x11,x9,x14
  00098	b900726d	 str         w13,[x19,#0x70]
  0009c	786d5989	 ldrh        w9,[x12,w13 uxtw #1]
  000a0	782b7949	 strh        w9,[x10,x11 lsl #1]
  000a4	b9404e69	 ldr         w9,[x19,#0x4C]
  000a8	b940966e	 ldr         w14,[x19,#0x94]
  000ac	f9403668	 ldr         x8,[x19,#0x68]
  000b0	8a0e012a	 and         x10,x9,x14
  000b4	f9403269	 ldr         x9,[x19,#0x60]
  000b8	786a7921	 ldrh        w1,[x9,x10 lsl #1]
  000bc	b9407269	 ldr         w9,[x19,#0x70]
  000c0	7829590e	 strh        w14,[x8,w9 uxtw #1]
  000c4		 |$LN11@deflate_sl|

; 1954 :         }
; 1955 : 
; 1956 :         /* Find the longest match, discarding those <= prev_length.
; 1957 :          */
; 1958 :         s->prev_length = s->match_length, s->prev_match = s->match_start;

  000c4	b9408a69	 ldr         w9,[x19,#0x88]

; 1959 :         s->match_length = MIN_MATCH-1;

  000c8	5280004a	 mov         w10,#2
  000cc	b9008a76	 str         w22,[x19,#0x88]
  000d0	b9409a68	 ldr         w8,[x19,#0x98]
  000d4	b900a269	 str         w9,[x19,#0xA0]
  000d8	b9008e68	 str         w8,[x19,#0x8C]

; 1960 : 
; 1961 :         if (hash_head != NIL && s->prev_length < s->max_lazy_match &&

  000dc	34000001	 cbz         w1,|$LN13@deflate_sl|
  000e0	b940aa68	 ldr         w8,[x19,#0xA8]
  000e4	6b08013f	 cmp         w9,w8
  000e8	54000002	 bhs         |$LN13@deflate_sl|
  000ec	b9409668	 ldr         w8,[x19,#0x94]
  000f0	b9404669	 ldr         w9,[x19,#0x44]
  000f4	4b01010b	 sub         w11,w8,w1
  000f8	5104192c	 sub         w12,w9,#0x106
  000fc	6b0c017f	 cmp         w11,w12
  00100	54000008	 bhi         |$LN13@deflate_sl|

; 1962 :             s->strstart - hash_head <= MAX_DIST(s)) {
; 1963 :             /* To simplify the code, we prevent matches with the string
; 1964 :              * of window index 0 (in particular we have to avoid a match
; 1965 :              * of the string with itself at the start of the input file).
; 1966 :              */
; 1967 :             s->match_length = longest_match (s, hash_head);

  00104	6b0c017f	 cmp         w11,w12
  00108	1a9f916b	 csells      w11,w11,wzr
  0010c	d503229f	 csdb
  00110	aa1303e0	 mov         x0,x19
  00114	94000000	 bl          longest_match
  00118	b9008a60	 str         w0,[x19,#0x88]

; 1968 :             /* longest_match() sets match_start */
; 1969 : 
; 1970 :             if (s->match_length <= 5 && (s->strategy == Z_FILTERED

  0011c	2a0003ea	 mov         w10,w0
  00120	7100141f	 cmp         w0,#5
  00124	54000008	 bhi         |$LN13@deflate_sl|
  00128	b940b268	 ldr         w8,[x19,#0xB0]
  0012c	7100051f	 cmp         w8,#1
  00130	54000000	 beq         |$LN14@deflate_sl|
  00134	71000c1f	 cmp         w0,#3
  00138	54000001	 bne         |$LN13@deflate_sl|
  0013c	2952a269	 ldp         w9,w8,[x19,#0x94]
  00140	5280006a	 mov         w10,#3
  00144	4b080129	 sub         w9,w9,w8
  00148	7140053f	 cmp         w9,#1,lsl #0xC
  0014c	54000009	 bls         |$LN13@deflate_sl|
  00150		 |$LN14@deflate_sl|

; 1971 : #if TOO_FAR <= 32767
; 1972 :                 || (s->match_length == MIN_MATCH &&
; 1973 :                     s->strstart - s->match_start > TOO_FAR)
; 1974 : #endif
; 1975 :                 )) {
; 1976 : 
; 1977 :                 /* If prev_match is also MIN_MATCH, match_start is garbage
; 1978 :                  * but we will ignore the current match anyway.
; 1979 :                  */
; 1980 :                 s->match_length = MIN_MATCH-1;

  00150	b9008a76	 str         w22,[x19,#0x88]
  00154	5280004a	 mov         w10,#2
  00158		 |$LN13@deflate_sl|

; 1981 :             }
; 1982 :         }
; 1983 :         /* If there was a match at the previous step and the current
; 1984 :          * match is not better, output the previous match:
; 1985 :          */
; 1986 :         if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {

  00158	b940a26c	 ldr         w12,[x19,#0xA0]
  0015c	71000d9f	 cmp         w12,#3
  00160	7a4c214a	 ccmphs      w10,w12,#0xA
  00164	54000008	 bhi         |$LN51@deflate_sl|

; 1987 :             uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;

  00168	b940966b	 ldr         w11,[x19,#0x94]

; 1988 :             /* Do not insert strings in hash table beyond this. */
; 1989 : 
; 1990 :             check_match(s, s->strstart-1, s->prev_match, s->prev_length);
; 1991 : 
; 1992 :             _tr_tally_dist(s, s->strstart -1 - s->prev_match,

  0016c	1103f58a	 add         w10,w12,#0xFD
  00170	b9409e68	 ldr         w8,[x19,#0x9C]
  00174	53001d4d	 uxtb        w13,w10
  00178	529fffea	 mov         w10,#0xFFFF
  0017c	0b080169	 add         w9,w11,w8
  00180	b9408e68	 ldr         w8,[x19,#0x8C]
  00184	51000d2f	 sub         w15,w9,#3
  00188	4b080169	 sub         w9,w11,w8
  0018c	f94b7e68	 ldr         x8,[x19,#0x16F8]
  00190	0b0a0129	 add         w9,w9,w10
  00194	b956f66a	 ldr         w10,[x19,#0x16F4]
  00198	53003d2c	 uxth        w12,w9
  0019c	782a590c	 strh        w12,[x8,w10 uxtw #1]
  001a0	b956f66b	 ldr         w11,[x19,#0x16F4]
  001a4	f94b7669	 ldr         x9,[x19,#0x16E8]
  001a8	382b492d	 strb        w13,[x9,w11 uxtw #0]
  001ac	b956f668	 ldr         w8,[x19,#0x16F4]
  001b0	1100050a	 add         w10,w8,#1
  001b4	529fffe8	 mov         w8,#0xFFFF
  001b8	b916f66a	 str         w10,[x19,#0x16F4]
  001bc	0b080188	 add         w8,w12,w8
  001c0	53003d0b	 uxth        w11,w8
  001c4	387469a8	 ldrb        w8,[x13,x20]
  001c8	7104017f	 cmp         w11,#0x100
  001cc	9104c108	 add         x8,x8,#0x130
  001d0	d37ef50a	 lsl         x10,x8,#2
  001d4	78736949	 ldrh        w9,[x10,x19]
  001d8	11000528	 add         w8,w9,#1
  001dc	78336948	 strh        w8,[x10,x19]
  001e0	54000002	 bhs         |$LN30@deflate_sl|
  001e4	7104017f	 cmp         w11,#0x100
  001e8	1a9f316b	 csello      w11,w11,wzr
  001ec	d503229f	 csdb
  001f0	91040288	 add         x8,x20,#0x100
  001f4	8b080169	 add         x9,x11,x8
  001f8	14000006	 b           |$LN31@deflate_sl|
  001fc		 |$LN30@deflate_sl|
  001fc	7104017f	 cmp         w11,#0x100
  00200	1a9f216b	 cselhs      w11,w11,wzr
  00204	d503229f	 csdb
  00208	91080288	 add         x8,x20,#0x200
  0020c	8b4b1d09	 add         x9,x8,x11,lsr #7
  00210		 |$LN31@deflate_sl|
  00210	39400128	 ldrb        w8,[x9]
  00214	9109b108	 add         x8,x8,#0x26C
  00218	d37ef50a	 lsl         x10,x8,#2
  0021c	78736949	 ldrh        w9,[x10,x19]
  00220	11000528	 add         w8,w9,#1
  00224	78336948	 strh        w8,[x10,x19]

; 1993 :                            s->prev_length - MIN_MATCH, bflush);
; 1994 : 
; 1995 :             /* Insert in hash table all strings up to the end of the match.
; 1996 :              * strstart-1 and strstart are already inserted. If there is not
; 1997 :              * enough lookahead, the last two strings are not inserted in
; 1998 :              * the hash table.
; 1999 :              */
; 2000 :             s->lookahead -= s->prev_length-1;

  00228	2953ae68	 ldp         w8,w11,[x19,#0x9C]
  0022c	b956f26a	 ldr         w10,[x19,#0x16F0]
  00230	b956f666	 ldr         w6,[x19,#0x16F4]
  00234	4b0b0109	 sub         w9,w8,w11
  00238	51000547	 sub         w7,w10,#1
  0023c	1100052a	 add         w10,w9,#1

; 2001 :             s->prev_length -= 2;

  00240	51000968	 sub         w8,w11,#2
  00244	2913a26a	 stp         w10,w8,[x19,#0x9C]
  00248		 |$LL7@deflate_sl|

; 2002 :             do {
; 2003 :                 if (++s->strstart <= max_insert) {

  00248	b9409668	 ldr         w8,[x19,#0x94]
  0024c	1100050e	 add         w14,w8,#1
  00250	b900966e	 str         w14,[x19,#0x94]
  00254	6b0f01df	 cmp         w14,w15
  00258	54000008	 bhi         |$LN5@deflate_sl|

; 2004 :                     INSERT_STRING(s, s->strstart, hash_head);

  0025c	f9402a68	 ldr         x8,[x19,#0x50]
  00260	110009c9	 add         w9,w14,#2
  00264	b940726a	 ldr         w10,[x19,#0x70]
  00268	f940366c	 ldr         x12,[x19,#0x68]
  0026c	3869490b	 ldrb        w11,[x8,w9 uxtw #0]
  00270	b9408268	 ldr         w8,[x19,#0x80]
  00274	1ac82149	 lsl         w9,w10,w8
  00278	b9407e6a	 ldr         w10,[x19,#0x7C]
  0027c	4a09016b	 eor         w11,w11,w9
  00280	b9404e69	 ldr         w9,[x19,#0x4C]
  00284	0a0a016d	 and         w13,w11,w10
  00288	f940326a	 ldr         x10,[x19,#0x60]
  0028c	b900726d	 str         w13,[x19,#0x70]
  00290	8a0e012b	 and         x11,x9,x14
  00294	786d5989	 ldrh        w9,[x12,w13 uxtw #1]
  00298	782b7949	 strh        w9,[x10,x11 lsl #1]
  0029c	79412a6c	 ldrh        w12,[x19,#0x94]
  002a0	b9407269	 ldr         w9,[x19,#0x70]
  002a4	f9403668	 ldr         x8,[x19,#0x68]
  002a8	7829590c	 strh        w12,[x8,w9 uxtw #1]
  002ac	b940966e	 ldr         w14,[x19,#0x94]
  002b0		 |$LN5@deflate_sl|

; 2005 :                 }
; 2006 :             } while (--s->prev_length != 0);

  002b0	b940a268	 ldr         w8,[x19,#0xA0]
  002b4	51000509	 sub         w9,w8,#1
  002b8	b900a269	 str         w9,[x19,#0xA0]
  002bc	35000009	 cbnz        w9,|$LL7@deflate_sl|

; 2007 :             s->match_available = 0;
; 2008 :             s->match_length = MIN_MATCH-1;
; 2009 :             s->strstart++;

  002c0	110005ca	 add         w10,w14,#1
  002c4	29122a7f	 stp         wzr,w10,[x19,#0x90]
  002c8	b9008a76	 str         w22,[x19,#0x88]

; 2010 : 
; 2011 :             if (bflush) FLUSH_BLOCK(s, 0);

  002cc	6b0700df	 cmp         w6,w7
  002d0	54000001	 bne         |$LL2@deflate_sl|
  002d4	b9408669	 ldr         w9,[x19,#0x84]
  002d8	37f80009	 tbnz        x9,#0x1F,|$LN32@deflate_sl|
  002dc	f9402a68	 ldr         x8,[x19,#0x50]
  002e0	8b294101	 add         x1,x8,w9,uxtw #0
  002e4	14000002	 b           |$LN33@deflate_sl|
  002e8		 |$LN32@deflate_sl|
  002e8	d2800001	 mov         x1,#0
  002ec		 |$LN33@deflate_sl|
  002ec	4b090142	 sub         w2,w10,w9
  002f0	52800003	 mov         w3,#0
  002f4	aa1303e0	 mov         x0,x19
  002f8	94000000	 bl          _tr_flush_block
  002fc	b9409668	 ldr         w8,[x19,#0x94]
  00300	f9400260	 ldr         x0,[x19]
  00304	b9008668	 str         w8,[x19,#0x84]
  00308	94000000	 bl          flush_pending
  0030c	f9400268	 ldr         x8,[x19]
  00310	b9401909	 ldr         w9,[x8,#0x18]
  00314	35000009	 cbnz        w9,|$LL2@deflate_sl|
  00318		 |$LN48@deflate_sl|

; 2025 :             if (s->strm->avail_out == 0) return need_more;

  00318	52800000	 mov         w0,#0
  0031c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00320	f94013f7	 ldr         x23,[sp,#0x20]
  00324	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00328	a8c353f3	 ldp         x19,x20,[sp],#0x30
  0032c	d65f03c0	 ret
  00330		 |$LN51@deflate_sl|

; 2012 : 
; 2013 :         } else if (s->match_available) {

  00330	29522668	 ldp         w8,w9,[x19,#0x90]
  00334	34000008	 cbz         w8,|$LN20@deflate_sl|

; 2014 :             /* If there was no match at the previous position, output a
; 2015 :              * single literal. If there was a match but the current match
; 2016 :              * is longer, truncate the previous match to a single literal.
; 2017 :              */
; 2018 :             Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 2019 :             _tr_tally_lit(s, s->window[s->strstart-1], bflush);

  00338	f9402a68	 ldr         x8,[x19,#0x50]
  0033c	51000529	 sub         w9,w9,#1
  00340	b956f66a	 ldr         w10,[x19,#0x16F4]
  00344	3869490c	 ldrb        w12,[x8,w9 uxtw #0]
  00348	f94b7e68	 ldr         x8,[x19,#0x16F8]
  0034c	782a591f	 strh        wzr,[x8,w10 uxtw #1]
  00350	b956f66b	 ldr         w11,[x19,#0x16F4]
  00354	f94b7669	 ldr         x9,[x19,#0x16E8]
  00358	382b492c	 strb        w12,[x9,w11 uxtw #0]
  0035c	b956f668	 ldr         w8,[x19,#0x16F4]
  00360	1100050a	 add         w10,w8,#1
  00364	9100bd88	 add         x8,x12,#0x2F
  00368	b916f66a	 str         w10,[x19,#0x16F4]
  0036c	d37ef50a	 lsl         x10,x8,#2
  00370	78736949	 ldrh        w9,[x10,x19]
  00374	11000528	 add         w8,w9,#1
  00378	78336948	 strh        w8,[x10,x19]
  0037c	b956f26a	 ldr         w10,[x19,#0x16F0]
  00380	b956f668	 ldr         w8,[x19,#0x16F4]
  00384	5100054b	 sub         w11,w10,#1
  00388	6b0b011f	 cmp         w8,w11

; 2020 :             if (bflush) {

  0038c	54000001	 bne         |$LN22@deflate_sl|

; 2021 :                 FLUSH_BLOCK_ONLY(s, 0);

  00390	b9408669	 ldr         w9,[x19,#0x84]
  00394	37f80009	 tbnz        x9,#0x1F,|$LN34@deflate_sl|
  00398	f9402a68	 ldr         x8,[x19,#0x50]
  0039c	8b294101	 add         x1,x8,w9,uxtw #0
  003a0	14000002	 b           |$LN35@deflate_sl|
  003a4		 |$LN34@deflate_sl|
  003a4	d2800001	 mov         x1,#0
  003a8		 |$LN35@deflate_sl|
  003a8	b9409668	 ldr         w8,[x19,#0x94]
  003ac	52800003	 mov         w3,#0
  003b0	aa1303e0	 mov         x0,x19
  003b4	4b090102	 sub         w2,w8,w9
  003b8	94000000	 bl          _tr_flush_block
  003bc	b9409668	 ldr         w8,[x19,#0x94]
  003c0	f9400260	 ldr         x0,[x19]
  003c4	b9008668	 str         w8,[x19,#0x84]
  003c8	94000000	 bl          flush_pending
  003cc		 |$LN22@deflate_sl|

; 2022 :             }
; 2023 :             s->strstart++;

  003cc	b9409668	 ldr         w8,[x19,#0x94]

; 2024 :             s->lookahead--;

  003d0	b9409e6a	 ldr         w10,[x19,#0x9C]
  003d4	11000509	 add         w9,w8,#1
  003d8	b9009669	 str         w9,[x19,#0x94]

; 2025 :             if (s->strm->avail_out == 0) return need_more;

  003dc	f9400269	 ldr         x9,[x19]
  003e0	51000548	 sub         w8,w10,#1
  003e4	b9009e68	 str         w8,[x19,#0x9C]
  003e8	b940192a	 ldr         w10,[x9,#0x18]
  003ec	3400000a	 cbz         w10,|$LN48@deflate_sl|

; 2026 :         } else {

  003f0	17ffff0f	 b           |$LL2@deflate_sl|
  003f4		 |$LN20@deflate_sl|

; 2027 :             /* There is no previous match to compare with, wait for
; 2028 :              * the next step to decide.
; 2029 :              */
; 2030 :             s->match_available = 1;
; 2031 :             s->strstart++;

  003f4	11000528	 add         w8,w9,#1

; 2032 :             s->lookahead--;

  003f8	b9409e69	 ldr         w9,[x19,#0x9C]
  003fc	29122277	 stp         w23,w8,[x19,#0x90]
  00400	5100052a	 sub         w10,w9,#1
  00404	b9009e6a	 str         w10,[x19,#0x9C]

; 2033 :         }
; 2034 :     }

  00408	17ffff09	 b           |$LL2@deflate_sl|
  0040c		 |$LN46@deflate_sl|

; 2035 :     Assert (flush != Z_NO_FLUSH, "no flush?");
; 2036 :     if (s->match_available) {

  0040c	b9409268	 ldr         w8,[x19,#0x90]
  00410	34000008	 cbz         w8,|$LN24@deflate_sl|

; 2037 :         Tracevv((stderr,"%c", s->window[s->strstart-1]));
; 2038 :         _tr_tally_lit(s, s->window[s->strstart-1], bflush);

  00414	b9409668	 ldr         w8,[x19,#0x94]
  00418	f9402a69	 ldr         x9,[x19,#0x50]
  0041c	b956f66b	 ldr         w11,[x19,#0x16F4]
  00420	5100050a	 sub         w10,w8,#1
  00424	f94b7e68	 ldr         x8,[x19,#0x16F8]
  00428	386a492c	 ldrb        w12,[x9,w10 uxtw #0]
  0042c	782b591f	 strh        wzr,[x8,w11 uxtw #1]
  00430	b956f66a	 ldr         w10,[x19,#0x16F4]
  00434	f94b7669	 ldr         x9,[x19,#0x16E8]
  00438	382a492c	 strb        w12,[x9,w10 uxtw #0]
  0043c	b956f668	 ldr         w8,[x19,#0x16F4]
  00440	1100050a	 add         w10,w8,#1
  00444	9100bd88	 add         x8,x12,#0x2F
  00448	b916f66a	 str         w10,[x19,#0x16F4]
  0044c	d37ef50a	 lsl         x10,x8,#2
  00450	78736949	 ldrh        w9,[x10,x19]
  00454	11000528	 add         w8,w9,#1
  00458	78336948	 strh        w8,[x10,x19]

; 2039 :         s->match_available = 0;

  0045c	b900927f	 str         wzr,[x19,#0x90]
  00460		 |$LN24@deflate_sl|

; 2040 :     }
; 2041 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  00460	b9409669	 ldr         w9,[x19,#0x94]
  00464	52800048	 mov         w8,#2
  00468	7100093f	 cmp         w9,#2
  0046c	1a883128	 csello      w8,w9,w8
  00470	b9170e68	 str         w8,[x19,#0x170C]

; 2042 :     if (flush == Z_FINISH) {

  00474	710012bf	 cmp         w21,#4
  00478	54000001	 bne         |$LN25@deflate_sl|

; 2043 :         FLUSH_BLOCK(s, 1);

  0047c	b940866a	 ldr         w10,[x19,#0x84]
  00480	37f8000a	 tbnz        x10,#0x1F,|$LN38@deflate_sl|
  00484	f9402a68	 ldr         x8,[x19,#0x50]
  00488	8b2a4101	 add         x1,x8,w10,uxtw #0
  0048c	14000002	 b           |$LN39@deflate_sl|
  00490		 |$LN38@deflate_sl|
  00490	d2800001	 mov         x1,#0
  00494		 |$LN39@deflate_sl|
  00494	4b0a0122	 sub         w2,w9,w10
  00498	52800023	 mov         w3,#1
  0049c	aa1303e0	 mov         x0,x19
  004a0	94000000	 bl          _tr_flush_block
  004a4	b9409668	 ldr         w8,[x19,#0x94]
  004a8	f9400260	 ldr         x0,[x19]
  004ac	b9008668	 str         w8,[x19,#0x84]
  004b0	94000000	 bl          flush_pending
  004b4	f9400268	 ldr         x8,[x19]
  004b8	5280004a	 mov         w10,#2
  004bc	b9401909	 ldr         w9,[x8,#0x18]
  004c0	52800068	 mov         w8,#3
  004c4	7100013f	 cmp         w9,#0
  004c8	1a880140	 cseleq      w0,w10,w8
  004cc	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  004d0	f94013f7	 ldr         x23,[sp,#0x20]
  004d4	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  004d8	a8c353f3	 ldp         x19,x20,[sp],#0x30
  004dc	d65f03c0	 ret
  004e0		 |$LN25@deflate_sl|

; 2044 :         return finish_done;
; 2045 :     }
; 2046 :     if (s->last_lit)

  004e0	b956f668	 ldr         w8,[x19,#0x16F4]
  004e4	34000008	 cbz         w8,|$LN28@deflate_sl|

; 2047 :         FLUSH_BLOCK(s, 0);

  004e8	b940866a	 ldr         w10,[x19,#0x84]
  004ec	37f8000a	 tbnz        x10,#0x1F,|$LN40@deflate_sl|
  004f0	f9402a68	 ldr         x8,[x19,#0x50]
  004f4	8b2a4101	 add         x1,x8,w10,uxtw #0
  004f8	14000002	 b           |$LN41@deflate_sl|
  004fc		 |$LN40@deflate_sl|
  004fc	d2800001	 mov         x1,#0
  00500		 |$LN41@deflate_sl|
  00500	4b0a0122	 sub         w2,w9,w10
  00504	52800003	 mov         w3,#0
  00508	aa1303e0	 mov         x0,x19
  0050c	94000000	 bl          _tr_flush_block
  00510	b9409668	 ldr         w8,[x19,#0x94]
  00514	f9400260	 ldr         x0,[x19]
  00518	b9008668	 str         w8,[x19,#0x84]
  0051c	94000000	 bl          flush_pending
  00520	f9400268	 ldr         x8,[x19]
  00524	b9401909	 ldr         w9,[x8,#0x18]
  00528	34000009	 cbz         w9,|$LN48@deflate_sl|
  0052c		 |$LN28@deflate_sl|

; 2048 :     return block_done;

  0052c	52800020	 mov         w0,#1
  00530	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00534	f94013f7	 ldr         x23,[sp,#0x20]
  00538	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  0053c	a8c353f3	 ldp         x19,x20,[sp],#0x30
  00540	d65f03c0	 ret

			 ENDP  ; |deflate_slow|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |deflate_rle| PROC

; 2060 : {

  00000	a9bd53f3	 stp         x19,x20,[sp,#-0x30]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	f90013f7	 str         x23,[sp,#0x20]
  0000c	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00010	910003fd	 mov         fp,sp
  00014	aa0003f3	 mov         x19,x0
  00018	2a0103f5	 mov         w21,w1
  0001c	90000016	 adrp        x22,_length_code
  00020	52800037	 mov         w23,#1
  00024		 |$LN48@deflate_rl|

; 2061 :     int bflush;             /* set if current block must be flushed */
; 2062 :     uInt prev;              /* byte at distance one to match */
; 2063 :     Bytef *scan, *strend;   /* scan goes up to strend for length of run */
; 2064 : 
; 2065 :     for (;;) {
; 2066 :         /* Make sure that we always have enough lookahead, except
; 2067 :          * at the end of the input file. We need MAX_MATCH bytes
; 2068 :          * for the longest run, plus one for the unrolled loop.
; 2069 :          */
; 2070 :         if (s->lookahead <= MAX_MATCH) {

  00024	91025274	 add         x20,x19,#0x94
  00028		 |$LL2@deflate_rl|
  00028	b9409e6c	 ldr         w12,[x19,#0x9C]
  0002c	2a0c03e8	 mov         w8,w12
  00030	7104099f	 cmp         w12,#0x102
  00034	54000008	 bhi         |$LN10@deflate_rl|

; 2071 :             fill_window(s);

  00038	aa1303e0	 mov         x0,x19
  0003c	94000000	 bl          fill_window

; 2072 :             if (s->lookahead <= MAX_MATCH && flush == Z_NO_FLUSH) {

  00040	b9409e6c	 ldr         w12,[x19,#0x9C]
  00044	7104099f	 cmp         w12,#0x102
  00048	7a409aa0	 ccmpls      w21,#0,#0
  0004c	54000000	 beq         |$LN37@deflate_rl|

; 2073 :                 return need_more;
; 2074 :             }
; 2075 :             if (s->lookahead == 0) break; /* flush the current block */

  00050	2a0c03e8	 mov         w8,w12
  00054	3400000c	 cbz         w12,|$LN36@deflate_rl|
  00058		 |$LN10@deflate_rl|

; 2076 :         }
; 2077 : 
; 2078 :         /* See how many times the previous byte repeats */
; 2079 :         s->match_length = 0;

  00058	b9008a7f	 str         wzr,[x19,#0x88]
  0005c	5280000b	 mov         w11,#0

; 2080 :         if (s->lookahead >= MIN_MATCH && s->strstart > 0) {

  00060	71000d1f	 cmp         w8,#3
  00064	54000003	 blo         |$LN14@deflate_rl|
  00068	b9409669	 ldr         w9,[x19,#0x94]
  0006c	34000009	 cbz         w9,|$LN14@deflate_rl|

; 2081 :             scan = s->window + s->strstart - 1;

  00070	f9402a68	 ldr         x8,[x19,#0x50]
  00074	8b29410d	 add         x13,x8,w9,uxtw #0

; 2082 :             prev = *scan;

  00078	385ff1a9	 ldurb       w9,[x13,#-1]

; 2083 :             if (prev == *++scan && prev == *++scan && prev == *++scan) {

  0007c	394001a8	 ldrb        w8,[x13]
  00080	6b08013f	 cmp         w9,w8
  00084	54000001	 bne         |$LN14@deflate_rl|
  00088	394005a8	 ldrb        w8,[x13,#1]
  0008c	6b08013f	 cmp         w9,w8
  00090	54000001	 bne         |$LN14@deflate_rl|
  00094	910009aa	 add         x10,x13,#2
  00098	39400148	 ldrb        w8,[x10]
  0009c	6b08013f	 cmp         w9,w8
  000a0	54000001	 bne         |$LN14@deflate_rl|

; 2084 :                 strend = s->window + s->strstart + MAX_MATCH;

  000a4	910409ad	 add         x13,x13,#0x102
  000a8		 |$LL7@deflate_rl|

; 2085 :                 do {
; 2086 :                 } while (prev == *++scan && prev == *++scan &&
; 2087 :                          prev == *++scan && prev == *++scan &&
; 2088 :                          prev == *++scan && prev == *++scan &&
; 2089 :                          prev == *++scan && prev == *++scan &&

  000a8	38401d48	 ldrb        w8,[x10,#1]!
  000ac	6b08013f	 cmp         w9,w8
  000b0	54000001	 bne         |$LN13@deflate_rl|
  000b4	38401d48	 ldrb        w8,[x10,#1]!
  000b8	6b08013f	 cmp         w9,w8
  000bc	54000001	 bne         |$LN13@deflate_rl|
  000c0	38401d48	 ldrb        w8,[x10,#1]!
  000c4	6b08013f	 cmp         w9,w8
  000c8	54000001	 bne         |$LN13@deflate_rl|
  000cc	38401d48	 ldrb        w8,[x10,#1]!
  000d0	6b08013f	 cmp         w9,w8
  000d4	54000001	 bne         |$LN13@deflate_rl|
  000d8	38401d48	 ldrb        w8,[x10,#1]!
  000dc	6b08013f	 cmp         w9,w8
  000e0	54000001	 bne         |$LN13@deflate_rl|
  000e4	38401d48	 ldrb        w8,[x10,#1]!
  000e8	6b08013f	 cmp         w9,w8
  000ec	54000001	 bne         |$LN13@deflate_rl|
  000f0	38401d48	 ldrb        w8,[x10,#1]!
  000f4	6b08013f	 cmp         w9,w8
  000f8	54000001	 bne         |$LN13@deflate_rl|
  000fc	38401d48	 ldrb        w8,[x10,#1]!
  00100	6b08013f	 cmp         w9,w8
  00104	fa4d014e	 ccmpeq      x10,x13,#0xE
  00108	54000003	 blo         |$LL7@deflate_rl|
  0010c		 |$LN13@deflate_rl|

; 2090 :                          scan < strend);
; 2091 :                 s->match_length = MAX_MATCH - (uInt)(strend - scan);

  0010c	4b0d0149	 sub         w9,w10,w13
  00110	1104092b	 add         w11,w9,#0x102
  00114	b9008a6b	 str         w11,[x19,#0x88]

; 2092 :                 if (s->match_length > s->lookahead)

  00118	6b0c017f	 cmp         w11,w12
  0011c	54000009	 bls         |$LN14@deflate_rl|

; 2093 :                     s->match_length = s->lookahead;

  00120	b9008a6c	 str         w12,[x19,#0x88]
  00124	2a0c03eb	 mov         w11,w12
  00128		 |$LN14@deflate_rl|

; 2094 :             }
; 2095 :             Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
; 2096 :         }
; 2097 : 
; 2098 :         /* Emit match if have run of MIN_MATCH or longer, else emit literal */
; 2099 :         if (s->match_length >= MIN_MATCH) {

  00128	b956f66a	 ldr         w10,[x19,#0x16F4]
  0012c	71000d7f	 cmp         w11,#3
  00130	54000003	 blo         |$LN15@deflate_rl|

; 2100 :             check_match(s, s->strstart, s->strstart - 1, s->match_length);
; 2101 : 
; 2102 :             _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);

  00134	f94b7e69	 ldr         x9,[x19,#0x16F8]
  00138	1103f568	 add         w8,w11,#0xFD
  0013c	53001d0b	 uxtb        w11,w8
  00140	782a5937	 strh        w23,[x9,w10 uxtw #1]
  00144	b956f66a	 ldr         w10,[x19,#0x16F4]
  00148	f94b7668	 ldr         x8,[x19,#0x16E8]
  0014c	382a490b	 strb        w11,[x8,w10 uxtw #0]
  00150	b956f669	 ldr         w9,[x19,#0x16F4]
  00154	910002c8	 add         x8,x22,PageOffset(_length_code)
  00158	1100052a	 add         w10,w9,#1
  0015c	38686969	 ldrb        w9,[x11,x8]
  00160	b916f66a	 str         w10,[x19,#0x16F4]
  00164	9104c129	 add         x9,x9,#0x130
  00168	d37ef52a	 lsl         x10,x9,#2
  0016c	78736948	 ldrh        w8,[x10,x19]
  00170	11000508	 add         w8,w8,#1
  00174	78336948	 strh        w8,[x10,x19]
  00178	7953626a	 ldrh        w10,[x19,#0x9B0]
  0017c	11000548	 add         w8,w10,#1
  00180	79136268	 strh        w8,[x19,#0x9B0]
  00184	b956f26a	 ldr         w10,[x19,#0x16F0]
  00188	b956f668	 ldr         w8,[x19,#0x16F4]
  0018c	5100054b	 sub         w11,w10,#1

; 2103 : 
; 2104 :             s->lookahead -= s->match_length;
; 2105 :             s->strstart += s->match_length;

  00190	b940966a	 ldr         w10,[x19,#0x94]
  00194	6b0b011f	 cmp         w8,w11
  00198	b9408a6b	 ldr         w11,[x19,#0x88]

; 2106 :             s->match_length = 0;

  0019c	b9008a7f	 str         wzr,[x19,#0x88]
  001a0	b9409e68	 ldr         w8,[x19,#0x9C]
  001a4	0b0a016d	 add         w13,w11,w10
  001a8	4b0b0109	 sub         w9,w8,w11

; 2107 :         } else {

  001ac	14000019	 b           |$LN47@deflate_rl|
  001b0		 |$LN15@deflate_rl|

; 2108 :             /* No match, output a literal byte */
; 2109 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 2110 :             _tr_tally_lit (s, s->window[s->strstart], bflush);

  001b0	b9409669	 ldr         w9,[x19,#0x94]
  001b4	f9402a68	 ldr         x8,[x19,#0x50]
  001b8	3869490c	 ldrb        w12,[x8,w9 uxtw #0]
  001bc	f94b7e68	 ldr         x8,[x19,#0x16F8]
  001c0	782a591f	 strh        wzr,[x8,w10 uxtw #1]
  001c4	b956f66b	 ldr         w11,[x19,#0x16F4]
  001c8	f94b7669	 ldr         x9,[x19,#0x16E8]
  001cc	382b492c	 strb        w12,[x9,w11 uxtw #0]
  001d0	b956f668	 ldr         w8,[x19,#0x16F4]
  001d4	1100050a	 add         w10,w8,#1
  001d8	9100bd88	 add         x8,x12,#0x2F
  001dc	b916f66a	 str         w10,[x19,#0x16F4]
  001e0	d37ef50a	 lsl         x10,x8,#2
  001e4	78736949	 ldrh        w9,[x10,x19]
  001e8	11000528	 add         w8,w9,#1
  001ec	78336948	 strh        w8,[x10,x19]
  001f0	b956f26a	 ldr         w10,[x19,#0x16F0]
  001f4	b956f668	 ldr         w8,[x19,#0x16F4]
  001f8	5100054b	 sub         w11,w10,#1

; 2111 :             s->lookahead--;
; 2112 :             s->strstart++;

  001fc	b940966a	 ldr         w10,[x19,#0x94]
  00200	6b0b011f	 cmp         w8,w11
  00204	b9409e68	 ldr         w8,[x19,#0x9C]
  00208	1100054d	 add         w13,w10,#1
  0020c	51000509	 sub         w9,w8,#1
  00210		 |$LN47@deflate_rl|

; 2113 :         }
; 2114 :         if (bflush) FLUSH_BLOCK(s, 0);

  00210	b900966d	 str         w13,[x19,#0x94]
  00214	1a9f17ec	 cseteq      w12
  00218	b9009e69	 str         w9,[x19,#0x9C]
  0021c	3400000c	 cbz         w12,|$LL2@deflate_rl|
  00220	b9408669	 ldr         w9,[x19,#0x84]
  00224	37f80009	 tbnz        x9,#0x1F,|$LN26@deflate_rl|
  00228	f9402a68	 ldr         x8,[x19,#0x50]
  0022c	8b294101	 add         x1,x8,w9,uxtw #0
  00230	14000002	 b           |$LN27@deflate_rl|
  00234		 |$LN26@deflate_rl|
  00234	d2800001	 mov         x1,#0
  00238		 |$LN27@deflate_rl|
  00238	4b0901a2	 sub         w2,w13,w9
  0023c	52800003	 mov         w3,#0
  00240	aa1303e0	 mov         x0,x19
  00244	94000000	 bl          _tr_flush_block
  00248	b9400288	 ldr         w8,[x20]
  0024c	f9400260	 ldr         x0,[x19]
  00250	b9008668	 str         w8,[x19,#0x84]
  00254	94000000	 bl          flush_pending
  00258	f9400268	 ldr         x8,[x19]
  0025c	b9401909	 ldr         w9,[x8,#0x18]
  00260	35000009	 cbnz        w9,|$LN48@deflate_rl|
  00264		 |$LN37@deflate_rl|
  00264	52800000	 mov         w0,#0
  00268	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0026c	f94013f7	 ldr         x23,[sp,#0x20]
  00270	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00274	a8c353f3	 ldp         x19,x20,[sp],#0x30
  00278	d65f03c0	 ret
  0027c		 |$LN36@deflate_rl|

; 2115 :     }
; 2116 :     s->insert = 0;

  0027c	b9170e7f	 str         wzr,[x19,#0x170C]

; 2117 :     if (flush == Z_FINISH) {

  00280	710012bf	 cmp         w21,#4
  00284	54000001	 bne         |$LN19@deflate_rl|

; 2118 :         FLUSH_BLOCK(s, 1);

  00288	b9408669	 ldr         w9,[x19,#0x84]
  0028c	37f80009	 tbnz        x9,#0x1F,|$LN28@deflate_rl|
  00290	f9402a68	 ldr         x8,[x19,#0x50]
  00294	8b294101	 add         x1,x8,w9,uxtw #0
  00298	14000002	 b           |$LN29@deflate_rl|
  0029c		 |$LN28@deflate_rl|
  0029c	d2800001	 mov         x1,#0
  002a0		 |$LN29@deflate_rl|
  002a0	b9409668	 ldr         w8,[x19,#0x94]
  002a4	52800023	 mov         w3,#1
  002a8	aa1303e0	 mov         x0,x19
  002ac	4b090102	 sub         w2,w8,w9
  002b0	94000000	 bl          _tr_flush_block
  002b4	b9409668	 ldr         w8,[x19,#0x94]
  002b8	f9400260	 ldr         x0,[x19]
  002bc	b9008668	 str         w8,[x19,#0x84]
  002c0	94000000	 bl          flush_pending
  002c4	f9400268	 ldr         x8,[x19]
  002c8	5280004a	 mov         w10,#2
  002cc	b9401909	 ldr         w9,[x8,#0x18]
  002d0	52800068	 mov         w8,#3
  002d4	7100013f	 cmp         w9,#0
  002d8	1a880140	 cseleq      w0,w10,w8
  002dc	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  002e0	f94013f7	 ldr         x23,[sp,#0x20]
  002e4	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  002e8	a8c353f3	 ldp         x19,x20,[sp],#0x30
  002ec	d65f03c0	 ret
  002f0		 |$LN19@deflate_rl|

; 2119 :         return finish_done;
; 2120 :     }
; 2121 :     if (s->last_lit)

  002f0	b956f668	 ldr         w8,[x19,#0x16F4]
  002f4	34000008	 cbz         w8,|$LN22@deflate_rl|

; 2122 :         FLUSH_BLOCK(s, 0);

  002f8	b9408669	 ldr         w9,[x19,#0x84]
  002fc	37f80009	 tbnz        x9,#0x1F,|$LN30@deflate_rl|
  00300	f9402a68	 ldr         x8,[x19,#0x50]
  00304	8b294101	 add         x1,x8,w9,uxtw #0
  00308	14000002	 b           |$LN31@deflate_rl|
  0030c		 |$LN30@deflate_rl|
  0030c	d2800001	 mov         x1,#0
  00310		 |$LN31@deflate_rl|
  00310	b9409668	 ldr         w8,[x19,#0x94]
  00314	52800003	 mov         w3,#0
  00318	aa1303e0	 mov         x0,x19
  0031c	4b090102	 sub         w2,w8,w9
  00320	94000000	 bl          _tr_flush_block
  00324	b9409668	 ldr         w8,[x19,#0x94]
  00328	f9400260	 ldr         x0,[x19]
  0032c	b9008668	 str         w8,[x19,#0x84]
  00330	94000000	 bl          flush_pending
  00334	f9400268	 ldr         x8,[x19]
  00338	b9401909	 ldr         w9,[x8,#0x18]
  0033c	34000009	 cbz         w9,|$LN37@deflate_rl|
  00340		 |$LN22@deflate_rl|

; 2123 :     return block_done;

  00340	52800020	 mov         w0,#1
  00344	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00348	f94013f7	 ldr         x23,[sp,#0x20]
  0034c	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00350	a8c353f3	 ldp         x19,x20,[sp],#0x30
  00354	d65f03c0	 ret

			 ENDP  ; |deflate_rle|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\deflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |deflate_huff| PROC

; 2133 : {

  00000	a9bf53f3	 stp         x19,x20,[sp,#-0x10]!
  00004	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00008	910003fd	 mov         fp,sp
  0000c	aa0003f3	 mov         x19,x0
  00010	2a0103f4	 mov         w20,w1
  00014		 |$LL2@deflate_hu|

; 2134 :     int bflush;             /* set if current block must be flushed */
; 2135 : 
; 2136 :     for (;;) {
; 2137 :         /* Make sure that we have a literal to write. */
; 2138 :         if (s->lookahead == 0) {

  00014	b9409e68	 ldr         w8,[x19,#0x9C]
  00018	35000008	 cbnz        w8,|$LN6@deflate_hu|

; 2139 :             fill_window(s);

  0001c	aa1303e0	 mov         x0,x19
  00020	94000000	 bl          fill_window

; 2140 :             if (s->lookahead == 0) {

  00024	b9409e68	 ldr         w8,[x19,#0x9C]
  00028	34000008	 cbz         w8,|$LN23@deflate_hu|
  0002c		 |$LN6@deflate_hu|

; 2142 :                     return need_more;
; 2143 :                 break;      /* flush the current block */
; 2144 :             }
; 2145 :         }
; 2146 : 
; 2147 :         /* Output a literal byte */
; 2148 :         s->match_length = 0;
; 2149 :         Tracevv((stderr,"%c", s->window[s->strstart]));
; 2150 :         _tr_tally_lit (s, s->window[s->strstart], bflush);

  0002c	b9409669	 ldr         w9,[x19,#0x94]
  00030	b9008a7f	 str         wzr,[x19,#0x88]
  00034	f9402a68	 ldr         x8,[x19,#0x50]
  00038	b956f66a	 ldr         w10,[x19,#0x16F4]
  0003c	3869490c	 ldrb        w12,[x8,w9 uxtw #0]
  00040	f94b7e68	 ldr         x8,[x19,#0x16F8]
  00044	782a591f	 strh        wzr,[x8,w10 uxtw #1]
  00048	b956f66b	 ldr         w11,[x19,#0x16F4]
  0004c	f94b7669	 ldr         x9,[x19,#0x16E8]
  00050	382b492c	 strb        w12,[x9,w11 uxtw #0]
  00054	b956f668	 ldr         w8,[x19,#0x16F4]
  00058	1100050a	 add         w10,w8,#1
  0005c	9100bd88	 add         x8,x12,#0x2F
  00060	b916f66a	 str         w10,[x19,#0x16F4]
  00064	d37ef50a	 lsl         x10,x8,#2
  00068	78736949	 ldrh        w9,[x10,x19]
  0006c	11000528	 add         w8,w9,#1
  00070	78336948	 strh        w8,[x10,x19]

; 2151 :         s->lookahead--;

  00074	b9409e6a	 ldr         w10,[x19,#0x9C]

; 2152 :         s->strstart++;

  00078	b9409669	 ldr         w9,[x19,#0x94]
  0007c	51000548	 sub         w8,w10,#1
  00080	b9009e68	 str         w8,[x19,#0x9C]
  00084	b956f268	 ldr         w8,[x19,#0x16F0]
  00088	1100052b	 add         w11,w9,#1
  0008c	b956f669	 ldr         w9,[x19,#0x16F4]
  00090	b900966b	 str         w11,[x19,#0x94]
  00094	5100050a	 sub         w10,w8,#1
  00098	6b0a013f	 cmp         w9,w10

; 2153 :         if (bflush) FLUSH_BLOCK(s, 0);

  0009c	54000001	 bne         |$LL2@deflate_hu|
  000a0	b9408669	 ldr         w9,[x19,#0x84]
  000a4	37f80009	 tbnz        x9,#0x1F,|$LN15@deflate_hu|
  000a8	f9402a68	 ldr         x8,[x19,#0x50]
  000ac	8b294101	 add         x1,x8,w9,uxtw #0
  000b0	14000002	 b           |$LN16@deflate_hu|
  000b4		 |$LN15@deflate_hu|
  000b4	d2800001	 mov         x1,#0
  000b8		 |$LN16@deflate_hu|
  000b8	4b090162	 sub         w2,w11,w9
  000bc	52800003	 mov         w3,#0
  000c0	aa1303e0	 mov         x0,x19
  000c4	94000000	 bl          _tr_flush_block
  000c8	b9409668	 ldr         w8,[x19,#0x94]
  000cc	f9400260	 ldr         x0,[x19]
  000d0	b9008668	 str         w8,[x19,#0x84]
  000d4	94000000	 bl          flush_pending
  000d8	f9400268	 ldr         x8,[x19]
  000dc	b9401909	 ldr         w9,[x8,#0x18]
  000e0	35000009	 cbnz        w9,|$LL2@deflate_hu|
  000e4		 |$LN24@deflate_hu|
  000e4	52800000	 mov         w0,#0
  000e8	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000ec	a8c153f3	 ldp         x19,x20,[sp],#0x10
  000f0	d65f03c0	 ret
  000f4		 |$LN23@deflate_hu|

; 2141 :                 if (flush == Z_NO_FLUSH)

  000f4	34000014	 cbz         w20,|$LN24@deflate_hu|

; 2154 :     }
; 2155 :     s->insert = 0;

  000f8	b9170e7f	 str         wzr,[x19,#0x170C]

; 2156 :     if (flush == Z_FINISH) {

  000fc	7100129f	 cmp         w20,#4
  00100	54000001	 bne         |$LN10@deflate_hu|

; 2157 :         FLUSH_BLOCK(s, 1);

  00104	b9408669	 ldr         w9,[x19,#0x84]
  00108	37f80009	 tbnz        x9,#0x1F,|$LN17@deflate_hu|
  0010c	f9402a68	 ldr         x8,[x19,#0x50]
  00110	8b294101	 add         x1,x8,w9,uxtw #0
  00114	14000002	 b           |$LN18@deflate_hu|
  00118		 |$LN17@deflate_hu|
  00118	d2800001	 mov         x1,#0
  0011c		 |$LN18@deflate_hu|
  0011c	b9409668	 ldr         w8,[x19,#0x94]
  00120	52800023	 mov         w3,#1
  00124	aa1303e0	 mov         x0,x19
  00128	4b090102	 sub         w2,w8,w9
  0012c	94000000	 bl          _tr_flush_block
  00130	b9409668	 ldr         w8,[x19,#0x94]
  00134	f9400260	 ldr         x0,[x19]
  00138	b9008668	 str         w8,[x19,#0x84]
  0013c	94000000	 bl          flush_pending
  00140	f9400268	 ldr         x8,[x19]
  00144	5280004a	 mov         w10,#2
  00148	b9401909	 ldr         w9,[x8,#0x18]
  0014c	52800068	 mov         w8,#3
  00150	7100013f	 cmp         w9,#0
  00154	1a880140	 cseleq      w0,w10,w8
  00158	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0015c	a8c153f3	 ldp         x19,x20,[sp],#0x10
  00160	d65f03c0	 ret
  00164		 |$LN10@deflate_hu|

; 2158 :         return finish_done;
; 2159 :     }
; 2160 :     if (s->last_lit)

  00164	b956f668	 ldr         w8,[x19,#0x16F4]
  00168	34000008	 cbz         w8,|$LN13@deflate_hu|

; 2161 :         FLUSH_BLOCK(s, 0);

  0016c	b9408669	 ldr         w9,[x19,#0x84]
  00170	37f80009	 tbnz        x9,#0x1F,|$LN19@deflate_hu|
  00174	f9402a68	 ldr         x8,[x19,#0x50]
  00178	8b294101	 add         x1,x8,w9,uxtw #0
  0017c	14000002	 b           |$LN20@deflate_hu|
  00180		 |$LN19@deflate_hu|
  00180	d2800001	 mov         x1,#0
  00184		 |$LN20@deflate_hu|
  00184	b9409668	 ldr         w8,[x19,#0x94]
  00188	52800003	 mov         w3,#0
  0018c	aa1303e0	 mov         x0,x19
  00190	4b090102	 sub         w2,w8,w9
  00194	94000000	 bl          _tr_flush_block
  00198	b9409668	 ldr         w8,[x19,#0x94]
  0019c	f9400260	 ldr         x0,[x19]
  001a0	b9008668	 str         w8,[x19,#0x84]
  001a4	94000000	 bl          flush_pending
  001a8	f9400268	 ldr         x8,[x19]
  001ac	b9401909	 ldr         w9,[x8,#0x18]
  001b0	34000009	 cbz         w9,|$LN24@deflate_hu|
  001b4		 |$LN13@deflate_hu|

; 2162 :     return block_done;

  001b4	52800020	 mov         w0,#1
  001b8	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  001bc	a8c153f3	 ldp         x19,x20,[sp],#0x10
  001c0	d65f03c0	 ret

			 ENDP  ; |deflate_huff|

	END
