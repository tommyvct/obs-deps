; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TTL	c:\users\ws103\desktop\zlib-1.2.11\infback.c
	ARM64

	AREA	|.drectve|, DRECTVE

	EXPORT	|??_C@_0BD@PJCBIDD@invalid?5block?5type@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BG@GMDFCBGP@invalid?5distances?5set@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BG@LBKINIKP@invalid?5distance?5code@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@| [ DATA ] ; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@| DCB "invalid dist"
	DCB	"ance too far back", 0x0		; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0BG@LBKINIKP@invalid?5distance?5code@| DCB "invalid distance code", 0x0 ; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@| DCB "invalid literal"
	DCB	"/length code", 0x0			; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0BG@GMDFCBGP@invalid?5distances?5set@| DCB "invalid distances set", 0x0 ; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@| DCB "invalid literal"
	DCB	"/lengths set", 0x0			; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@| DCB "invali"
	DCB	"d code -- missing end-of-block", 0x0	; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@| DCB "invalid bit lengt"
	DCB	"h repeat", 0x0				; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@| DCB "invalid code lengt"
	DCB	"hs set", 0x0				; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@| DCB "too many "
	DCB	"length or distance symbols", 0x0	; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@| DCB "invalid stored"
	DCB	" block lengths", 0x0			; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0BD@PJCBIDD@invalid?5block?5type@| DCB "invalid block type", 0x0 ; `string'
|?lenfix@?1??fixedtables@@9@9| DCB 0x60			; `fixedtables'::`2'::lenfix
	DCB	0x7
	DCW	0x0
	DCB	0x0
	DCB	0x8
	DCW	0x50
	DCB	0x0
	DCB	0x8
	DCW	0x10
	DCB	0x14
	DCB	0x8
	DCW	0x73
	DCB	0x12
	DCB	0x7
	DCW	0x1f
	DCB	0x0
	DCB	0x8
	DCW	0x70
	DCB	0x0
	DCB	0x8
	DCW	0x30
	DCB	0x0
	DCB	0x9
	DCW	0xc0
	DCB	0x10
	DCB	0x7
	DCW	0xa
	DCB	0x0
	DCB	0x8
	DCW	0x60
	DCB	0x0
	DCB	0x8
	DCW	0x20
	DCB	0x0
	DCB	0x9
	DCW	0xa0
	DCB	0x0
	DCB	0x8
	DCW	0x0
	DCB	0x0
	DCB	0x8
	DCW	0x80
	DCB	0x0
	DCB	0x8
	DCW	0x40
	DCB	0x0
	DCB	0x9
	DCW	0xe0
	DCB	0x10
	DCB	0x7
	DCW	0x6
	DCB	0x0
	DCB	0x8
	DCW	0x58
	DCB	0x0
	DCB	0x8
	DCW	0x18
	DCB	0x0
	DCB	0x9
	DCW	0x90
	DCB	0x13
	DCB	0x7
	DCW	0x3b
	DCB	0x0
	DCB	0x8
	DCW	0x78
	DCB	0x0
	DCB	0x8
	DCW	0x38
	DCB	0x0
	DCB	0x9
	DCW	0xd0
	DCB	0x11
	DCB	0x7
	DCW	0x11
	DCB	0x0
	DCB	0x8
	DCW	0x68
	DCB	0x0
	DCB	0x8
	DCW	0x28
	DCB	0x0
	DCB	0x9
	DCW	0xb0
	DCB	0x0
	DCB	0x8
	DCW	0x8
	DCB	0x0
	DCB	0x8
	DCW	0x88
	DCB	0x0
	DCB	0x8
	DCW	0x48
	DCB	0x0
	DCB	0x9
	DCW	0xf0
	DCB	0x10
	DCB	0x7
	DCW	0x4
	DCB	0x0
	DCB	0x8
	DCW	0x54
	DCB	0x0
	DCB	0x8
	DCW	0x14
	DCB	0x15
	DCB	0x8
	DCW	0xe3
	DCB	0x13
	DCB	0x7
	DCW	0x2b
	DCB	0x0
	DCB	0x8
	DCW	0x74
	DCB	0x0
	DCB	0x8
	DCW	0x34
	DCB	0x0
	DCB	0x9
	DCW	0xc8
	DCB	0x11
	DCB	0x7
	DCW	0xd
	DCB	0x0
	DCB	0x8
	DCW	0x64
	DCB	0x0
	DCB	0x8
	DCW	0x24
	DCB	0x0
	DCB	0x9
	DCW	0xa8
	DCB	0x0
	DCB	0x8
	DCW	0x4
	DCB	0x0
	DCB	0x8
	DCW	0x84
	DCB	0x0
	DCB	0x8
	DCW	0x44
	DCB	0x0
	DCB	0x9
	DCW	0xe8
	DCB	0x10
	DCB	0x7
	DCW	0x8
	DCB	0x0
	DCB	0x8
	DCW	0x5c
	DCB	0x0
	DCB	0x8
	DCW	0x1c
	DCB	0x0
	DCB	0x9
	DCW	0x98
	DCB	0x14
	DCB	0x7
	DCW	0x53
	DCB	0x0
	DCB	0x8
	DCW	0x7c
	DCB	0x0
	DCB	0x8
	DCW	0x3c
	DCB	0x0
	DCB	0x9
	DCW	0xd8
	DCB	0x12
	DCB	0x7
	DCW	0x17
	DCB	0x0
	DCB	0x8
	DCW	0x6c
	DCB	0x0
	DCB	0x8
	DCW	0x2c
	DCB	0x0
	DCB	0x9
	DCW	0xb8
	DCB	0x0
	DCB	0x8
	DCW	0xc
	DCB	0x0
	DCB	0x8
	DCW	0x8c
	DCB	0x0
	DCB	0x8
	DCW	0x4c
	DCB	0x0
	DCB	0x9
	DCW	0xf8
	DCB	0x10
	DCB	0x7
	DCW	0x3
	DCB	0x0
	DCB	0x8
	DCW	0x52
	DCB	0x0
	DCB	0x8
	DCW	0x12
	DCB	0x15
	DCB	0x8
	DCW	0xa3
	DCB	0x13
	DCB	0x7
	DCW	0x23
	DCB	0x0
	DCB	0x8
	DCW	0x72
	DCB	0x0
	DCB	0x8
	DCW	0x32
	DCB	0x0
	DCB	0x9
	DCW	0xc4
	DCB	0x11
	DCB	0x7
	DCW	0xb
	DCB	0x0
	DCB	0x8
	DCW	0x62
	DCB	0x0
	DCB	0x8
	DCW	0x22
	DCB	0x0
	DCB	0x9
	DCW	0xa4
	DCB	0x0
	DCB	0x8
	DCW	0x2
	DCB	0x0
	DCB	0x8
	DCW	0x82
	DCB	0x0
	DCB	0x8
	DCW	0x42
	DCB	0x0
	DCB	0x9
	DCW	0xe4
	DCB	0x10
	DCB	0x7
	DCW	0x7
	DCB	0x0
	DCB	0x8
	DCW	0x5a
	DCB	0x0
	DCB	0x8
	DCW	0x1a
	DCB	0x0
	DCB	0x9
	DCW	0x94
	DCB	0x14
	DCB	0x7
	DCW	0x43
	DCB	0x0
	DCB	0x8
	DCW	0x7a
	DCB	0x0
	DCB	0x8
	DCW	0x3a
	DCB	0x0
	DCB	0x9
	DCW	0xd4
	DCB	0x12
	DCB	0x7
	DCW	0x13
	DCB	0x0
	DCB	0x8
	DCW	0x6a
	DCB	0x0
	DCB	0x8
	DCW	0x2a
	DCB	0x0
	DCB	0x9
	DCW	0xb4
	DCB	0x0
	DCB	0x8
	DCW	0xa
	DCB	0x0
	DCB	0x8
	DCW	0x8a
	DCB	0x0
	DCB	0x8
	DCW	0x4a
	DCB	0x0
	DCB	0x9
	DCW	0xf4
	DCB	0x10
	DCB	0x7
	DCW	0x5
	DCB	0x0
	DCB	0x8
	DCW	0x56
	DCB	0x0
	DCB	0x8
	DCW	0x16
	DCB	0x40
	DCB	0x8
	DCW	0x0
	DCB	0x13
	DCB	0x7
	DCW	0x33
	DCB	0x0
	DCB	0x8
	DCW	0x76
	DCB	0x0
	DCB	0x8
	DCW	0x36
	DCB	0x0
	DCB	0x9
	DCW	0xcc
	DCB	0x11
	DCB	0x7
	DCW	0xf
	DCB	0x0
	DCB	0x8
	DCW	0x66
	DCB	0x0
	DCB	0x8
	DCW	0x26
	DCB	0x0
	DCB	0x9
	DCW	0xac
	DCB	0x0
	DCB	0x8
	DCW	0x6
	DCB	0x0
	DCB	0x8
	DCW	0x86
	DCB	0x0
	DCB	0x8
	DCW	0x46
	DCB	0x0
	DCB	0x9
	DCW	0xec
	DCB	0x10
	DCB	0x7
	DCW	0x9
	DCB	0x0
	DCB	0x8
	DCW	0x5e
	DCB	0x0
	DCB	0x8
	DCW	0x1e
	DCB	0x0
	DCB	0x9
	DCW	0x9c
	DCB	0x14
	DCB	0x7
	DCW	0x63
	DCB	0x0
	DCB	0x8
	DCW	0x7e
	DCB	0x0
	DCB	0x8
	DCW	0x3e
	DCB	0x0
	DCB	0x9
	DCW	0xdc
	DCB	0x12
	DCB	0x7
	DCW	0x1b
	DCB	0x0
	DCB	0x8
	DCW	0x6e
	DCB	0x0
	DCB	0x8
	DCW	0x2e
	DCB	0x0
	DCB	0x9
	DCW	0xbc
	DCB	0x0
	DCB	0x8
	DCW	0xe
	DCB	0x0
	DCB	0x8
	DCW	0x8e
	DCB	0x0
	DCB	0x8
	DCW	0x4e
	DCB	0x0
	DCB	0x9
	DCW	0xfc
	DCB	0x60
	DCB	0x7
	DCW	0x0
	DCB	0x0
	DCB	0x8
	DCW	0x51
	DCB	0x0
	DCB	0x8
	DCW	0x11
	DCB	0x15
	DCB	0x8
	DCW	0x83
	DCB	0x12
	DCB	0x7
	DCW	0x1f
	DCB	0x0
	DCB	0x8
	DCW	0x71
	DCB	0x0
	DCB	0x8
	DCW	0x31
	DCB	0x0
	DCB	0x9
	DCW	0xc2
	DCB	0x10
	DCB	0x7
	DCW	0xa
	DCB	0x0
	DCB	0x8
	DCW	0x61
	DCB	0x0
	DCB	0x8
	DCW	0x21
	DCB	0x0
	DCB	0x9
	DCW	0xa2
	DCB	0x0
	DCB	0x8
	DCW	0x1
	DCB	0x0
	DCB	0x8
	DCW	0x81
	DCB	0x0
	DCB	0x8
	DCW	0x41
	DCB	0x0
	DCB	0x9
	DCW	0xe2
	DCB	0x10
	DCB	0x7
	DCW	0x6
	DCB	0x0
	DCB	0x8
	DCW	0x59
	DCB	0x0
	DCB	0x8
	DCW	0x19
	DCB	0x0
	DCB	0x9
	DCW	0x92
	DCB	0x13
	DCB	0x7
	DCW	0x3b
	DCB	0x0
	DCB	0x8
	DCW	0x79
	DCB	0x0
	DCB	0x8
	DCW	0x39
	DCB	0x0
	DCB	0x9
	DCW	0xd2
	DCB	0x11
	DCB	0x7
	DCW	0x11
	DCB	0x0
	DCB	0x8
	DCW	0x69
	DCB	0x0
	DCB	0x8
	DCW	0x29
	DCB	0x0
	DCB	0x9
	DCW	0xb2
	DCB	0x0
	DCB	0x8
	DCW	0x9
	DCB	0x0
	DCB	0x8
	DCW	0x89
	DCB	0x0
	DCB	0x8
	DCW	0x49
	DCB	0x0
	DCB	0x9
	DCW	0xf2
	DCB	0x10
	DCB	0x7
	DCW	0x4
	DCB	0x0
	DCB	0x8
	DCW	0x55
	DCB	0x0
	DCB	0x8
	DCW	0x15
	DCB	0x10
	DCB	0x8
	DCW	0x102
	DCB	0x13
	DCB	0x7
	DCW	0x2b
	DCB	0x0
	DCB	0x8
	DCW	0x75
	DCB	0x0
	DCB	0x8
	DCW	0x35
	DCB	0x0
	DCB	0x9
	DCW	0xca
	DCB	0x11
	DCB	0x7
	DCW	0xd
	DCB	0x0
	DCB	0x8
	DCW	0x65
	DCB	0x0
	DCB	0x8
	DCW	0x25
	DCB	0x0
	DCB	0x9
	DCW	0xaa
	DCB	0x0
	DCB	0x8
	DCW	0x5
	DCB	0x0
	DCB	0x8
	DCW	0x85
	DCB	0x0
	DCB	0x8
	DCW	0x45
	DCB	0x0
	DCB	0x9
	DCW	0xea
	DCB	0x10
	DCB	0x7
	DCW	0x8
	DCB	0x0
	DCB	0x8
	DCW	0x5d
	DCB	0x0
	DCB	0x8
	DCW	0x1d
	DCB	0x0
	DCB	0x9
	DCW	0x9a
	DCB	0x14
	DCB	0x7
	DCW	0x53
	DCB	0x0
	DCB	0x8
	DCW	0x7d
	DCB	0x0
	DCB	0x8
	DCW	0x3d
	DCB	0x0
	DCB	0x9
	DCW	0xda
	DCB	0x12
	DCB	0x7
	DCW	0x17
	DCB	0x0
	DCB	0x8
	DCW	0x6d
	DCB	0x0
	DCB	0x8
	DCW	0x2d
	DCB	0x0
	DCB	0x9
	DCW	0xba
	DCB	0x0
	DCB	0x8
	DCW	0xd
	DCB	0x0
	DCB	0x8
	DCW	0x8d
	DCB	0x0
	DCB	0x8
	DCW	0x4d
	DCB	0x0
	DCB	0x9
	DCW	0xfa
	DCB	0x10
	DCB	0x7
	DCW	0x3
	DCB	0x0
	DCB	0x8
	DCW	0x53
	DCB	0x0
	DCB	0x8
	DCW	0x13
	DCB	0x15
	DCB	0x8
	DCW	0xc3
	DCB	0x13
	DCB	0x7
	DCW	0x23
	DCB	0x0
	DCB	0x8
	DCW	0x73
	DCB	0x0
	DCB	0x8
	DCW	0x33
	DCB	0x0
	DCB	0x9
	DCW	0xc6
	DCB	0x11
	DCB	0x7
	DCW	0xb
	DCB	0x0
	DCB	0x8
	DCW	0x63
	DCB	0x0
	DCB	0x8
	DCW	0x23
	DCB	0x0
	DCB	0x9
	DCW	0xa6
	DCB	0x0
	DCB	0x8
	DCW	0x3
	DCB	0x0
	DCB	0x8
	DCW	0x83
	DCB	0x0
	DCB	0x8
	DCW	0x43
	DCB	0x0
	DCB	0x9
	DCW	0xe6
	DCB	0x10
	DCB	0x7
	DCW	0x7
	DCB	0x0
	DCB	0x8
	DCW	0x5b
	DCB	0x0
	DCB	0x8
	DCW	0x1b
	DCB	0x0
	DCB	0x9
	DCW	0x96
	DCB	0x14
	DCB	0x7
	DCW	0x43
	DCB	0x0
	DCB	0x8
	DCW	0x7b
	DCB	0x0
	DCB	0x8
	DCW	0x3b
	DCB	0x0
	DCB	0x9
	DCW	0xd6
	DCB	0x12
	DCB	0x7
	DCW	0x13
	DCB	0x0
	DCB	0x8
	DCW	0x6b
	DCB	0x0
	DCB	0x8
	DCW	0x2b
	DCB	0x0
	DCB	0x9
	DCW	0xb6
	DCB	0x0
	DCB	0x8
	DCW	0xb
	DCB	0x0
	DCB	0x8
	DCW	0x8b
	DCB	0x0
	DCB	0x8
	DCW	0x4b
	DCB	0x0
	DCB	0x9
	DCW	0xf6
	DCB	0x10
	DCB	0x7
	DCW	0x5
	DCB	0x0
	DCB	0x8
	DCW	0x57
	DCB	0x0
	DCB	0x8
	DCW	0x17
	DCB	0x40
	DCB	0x8
	DCW	0x0
	DCB	0x13
	DCB	0x7
	DCW	0x33
	DCB	0x0
	DCB	0x8
	DCW	0x77
	DCB	0x0
	DCB	0x8
	DCW	0x37
	DCB	0x0
	DCB	0x9
	DCW	0xce
	DCB	0x11
	DCB	0x7
	DCW	0xf
	DCB	0x0
	DCB	0x8
	DCW	0x67
	DCB	0x0
	DCB	0x8
	DCW	0x27
	DCB	0x0
	DCB	0x9
	DCW	0xae
	DCB	0x0
	DCB	0x8
	DCW	0x7
	DCB	0x0
	DCB	0x8
	DCW	0x87
	DCB	0x0
	DCB	0x8
	DCW	0x47
	DCB	0x0
	DCB	0x9
	DCW	0xee
	DCB	0x10
	DCB	0x7
	DCW	0x9
	DCB	0x0
	DCB	0x8
	DCW	0x5f
	DCB	0x0
	DCB	0x8
	DCW	0x1f
	DCB	0x0
	DCB	0x9
	DCW	0x9e
	DCB	0x14
	DCB	0x7
	DCW	0x63
	DCB	0x0
	DCB	0x8
	DCW	0x7f
	DCB	0x0
	DCB	0x8
	DCW	0x3f
	DCB	0x0
	DCB	0x9
	DCW	0xde
	DCB	0x12
	DCB	0x7
	DCW	0x1b
	DCB	0x0
	DCB	0x8
	DCW	0x6f
	DCB	0x0
	DCB	0x8
	DCW	0x2f
	DCB	0x0
	DCB	0x9
	DCW	0xbe
	DCB	0x0
	DCB	0x8
	DCW	0xf
	DCB	0x0
	DCB	0x8
	DCW	0x8f
	DCB	0x0
	DCB	0x8
	DCW	0x4f
	DCB	0x0
	DCB	0x9
	DCW	0xfe
	DCB	0x60
	DCB	0x7
	DCW	0x0
	DCB	0x0
	DCB	0x8
	DCW	0x50
	DCB	0x0
	DCB	0x8
	DCW	0x10
	DCB	0x14
	DCB	0x8
	DCW	0x73
	DCB	0x12
	DCB	0x7
	DCW	0x1f
	DCB	0x0
	DCB	0x8
	DCW	0x70
	DCB	0x0
	DCB	0x8
	DCW	0x30
	DCB	0x0
	DCB	0x9
	DCW	0xc1
	DCB	0x10
	DCB	0x7
	DCW	0xa
	DCB	0x0
	DCB	0x8
	DCW	0x60
	DCB	0x0
	DCB	0x8
	DCW	0x20
	DCB	0x0
	DCB	0x9
	DCW	0xa1
	DCB	0x0
	DCB	0x8
	DCW	0x0
	DCB	0x0
	DCB	0x8
	DCW	0x80
	DCB	0x0
	DCB	0x8
	DCW	0x40
	DCB	0x0
	DCB	0x9
	DCW	0xe1
	DCB	0x10
	DCB	0x7
	DCW	0x6
	DCB	0x0
	DCB	0x8
	DCW	0x58
	DCB	0x0
	DCB	0x8
	DCW	0x18
	DCB	0x0
	DCB	0x9
	DCW	0x91
	DCB	0x13
	DCB	0x7
	DCW	0x3b
	DCB	0x0
	DCB	0x8
	DCW	0x78
	DCB	0x0
	DCB	0x8
	DCW	0x38
	DCB	0x0
	DCB	0x9
	DCW	0xd1
	DCB	0x11
	DCB	0x7
	DCW	0x11
	DCB	0x0
	DCB	0x8
	DCW	0x68
	DCB	0x0
	DCB	0x8
	DCW	0x28
	DCB	0x0
	DCB	0x9
	DCW	0xb1
	DCB	0x0
	DCB	0x8
	DCW	0x8
	DCB	0x0
	DCB	0x8
	DCW	0x88
	DCB	0x0
	DCB	0x8
	DCW	0x48
	DCB	0x0
	DCB	0x9
	DCW	0xf1
	DCB	0x10
	DCB	0x7
	DCW	0x4
	DCB	0x0
	DCB	0x8
	DCW	0x54
	DCB	0x0
	DCB	0x8
	DCW	0x14
	DCB	0x15
	DCB	0x8
	DCW	0xe3
	DCB	0x13
	DCB	0x7
	DCW	0x2b
	DCB	0x0
	DCB	0x8
	DCW	0x74
	DCB	0x0
	DCB	0x8
	DCW	0x34
	DCB	0x0
	DCB	0x9
	DCW	0xc9
	DCB	0x11
	DCB	0x7
	DCW	0xd
	DCB	0x0
	DCB	0x8
	DCW	0x64
	DCB	0x0
	DCB	0x8
	DCW	0x24
	DCB	0x0
	DCB	0x9
	DCW	0xa9
	DCB	0x0
	DCB	0x8
	DCW	0x4
	DCB	0x0
	DCB	0x8
	DCW	0x84
	DCB	0x0
	DCB	0x8
	DCW	0x44
	DCB	0x0
	DCB	0x9
	DCW	0xe9
	DCB	0x10
	DCB	0x7
	DCW	0x8
	DCB	0x0
	DCB	0x8
	DCW	0x5c
	DCB	0x0
	DCB	0x8
	DCW	0x1c
	DCB	0x0
	DCB	0x9
	DCW	0x99
	DCB	0x14
	DCB	0x7
	DCW	0x53
	DCB	0x0
	DCB	0x8
	DCW	0x7c
	DCB	0x0
	DCB	0x8
	DCW	0x3c
	DCB	0x0
	DCB	0x9
	DCW	0xd9
	DCB	0x12
	DCB	0x7
	DCW	0x17
	DCB	0x0
	DCB	0x8
	DCW	0x6c
	DCB	0x0
	DCB	0x8
	DCW	0x2c
	DCB	0x0
	DCB	0x9
	DCW	0xb9
	DCB	0x0
	DCB	0x8
	DCW	0xc
	DCB	0x0
	DCB	0x8
	DCW	0x8c
	DCB	0x0
	DCB	0x8
	DCW	0x4c
	DCB	0x0
	DCB	0x9
	DCW	0xf9
	DCB	0x10
	DCB	0x7
	DCW	0x3
	DCB	0x0
	DCB	0x8
	DCW	0x52
	DCB	0x0
	DCB	0x8
	DCW	0x12
	DCB	0x15
	DCB	0x8
	DCW	0xa3
	DCB	0x13
	DCB	0x7
	DCW	0x23
	DCB	0x0
	DCB	0x8
	DCW	0x72
	DCB	0x0
	DCB	0x8
	DCW	0x32
	DCB	0x0
	DCB	0x9
	DCW	0xc5
	DCB	0x11
	DCB	0x7
	DCW	0xb
	DCB	0x0
	DCB	0x8
	DCW	0x62
	DCB	0x0
	DCB	0x8
	DCW	0x22
	DCB	0x0
	DCB	0x9
	DCW	0xa5
	DCB	0x0
	DCB	0x8
	DCW	0x2
	DCB	0x0
	DCB	0x8
	DCW	0x82
	DCB	0x0
	DCB	0x8
	DCW	0x42
	DCB	0x0
	DCB	0x9
	DCW	0xe5
	DCB	0x10
	DCB	0x7
	DCW	0x7
	DCB	0x0
	DCB	0x8
	DCW	0x5a
	DCB	0x0
	DCB	0x8
	DCW	0x1a
	DCB	0x0
	DCB	0x9
	DCW	0x95
	DCB	0x14
	DCB	0x7
	DCW	0x43
	DCB	0x0
	DCB	0x8
	DCW	0x7a
	DCB	0x0
	DCB	0x8
	DCW	0x3a
	DCB	0x0
	DCB	0x9
	DCW	0xd5
	DCB	0x12
	DCB	0x7
	DCW	0x13
	DCB	0x0
	DCB	0x8
	DCW	0x6a
	DCB	0x0
	DCB	0x8
	DCW	0x2a
	DCB	0x0
	DCB	0x9
	DCW	0xb5
	DCB	0x0
	DCB	0x8
	DCW	0xa
	DCB	0x0
	DCB	0x8
	DCW	0x8a
	DCB	0x0
	DCB	0x8
	DCW	0x4a
	DCB	0x0
	DCB	0x9
	DCW	0xf5
	DCB	0x10
	DCB	0x7
	DCW	0x5
	DCB	0x0
	DCB	0x8
	DCW	0x56
	DCB	0x0
	DCB	0x8
	DCW	0x16
	DCB	0x40
	DCB	0x8
	DCW	0x0
	DCB	0x13
	DCB	0x7
	DCW	0x33
	DCB	0x0
	DCB	0x8
	DCW	0x76
	DCB	0x0
	DCB	0x8
	DCW	0x36
	DCB	0x0
	DCB	0x9
	DCW	0xcd
	DCB	0x11
	DCB	0x7
	DCW	0xf
	DCB	0x0
	DCB	0x8
	DCW	0x66
	DCB	0x0
	DCB	0x8
	DCW	0x26
	DCB	0x0
	DCB	0x9
	DCW	0xad
	DCB	0x0
	DCB	0x8
	DCW	0x6
	DCB	0x0
	DCB	0x8
	DCW	0x86
	DCB	0x0
	DCB	0x8
	DCW	0x46
	DCB	0x0
	DCB	0x9
	DCW	0xed
	DCB	0x10
	DCB	0x7
	DCW	0x9
	DCB	0x0
	DCB	0x8
	DCW	0x5e
	DCB	0x0
	DCB	0x8
	DCW	0x1e
	DCB	0x0
	DCB	0x9
	DCW	0x9d
	DCB	0x14
	DCB	0x7
	DCW	0x63
	DCB	0x0
	DCB	0x8
	DCW	0x7e
	DCB	0x0
	DCB	0x8
	DCW	0x3e
	DCB	0x0
	DCB	0x9
	DCW	0xdd
	DCB	0x12
	DCB	0x7
	DCW	0x1b
	DCB	0x0
	DCB	0x8
	DCW	0x6e
	DCB	0x0
	DCB	0x8
	DCW	0x2e
	DCB	0x0
	DCB	0x9
	DCW	0xbd
	DCB	0x0
	DCB	0x8
	DCW	0xe
	DCB	0x0
	DCB	0x8
	DCW	0x8e
	DCB	0x0
	DCB	0x8
	DCW	0x4e
	DCB	0x0
	DCB	0x9
	DCW	0xfd
	DCB	0x60
	DCB	0x7
	DCW	0x0
	DCB	0x0
	DCB	0x8
	DCW	0x51
	DCB	0x0
	DCB	0x8
	DCW	0x11
	DCB	0x15
	DCB	0x8
	DCW	0x83
	DCB	0x12
	DCB	0x7
	DCW	0x1f
	DCB	0x0
	DCB	0x8
	DCW	0x71
	DCB	0x0
	DCB	0x8
	DCW	0x31
	DCB	0x0
	DCB	0x9
	DCW	0xc3
	DCB	0x10
	DCB	0x7
	DCW	0xa
	DCB	0x0
	DCB	0x8
	DCW	0x61
	DCB	0x0
	DCB	0x8
	DCW	0x21
	DCB	0x0
	DCB	0x9
	DCW	0xa3
	DCB	0x0
	DCB	0x8
	DCW	0x1
	DCB	0x0
	DCB	0x8
	DCW	0x81
	DCB	0x0
	DCB	0x8
	DCW	0x41
	DCB	0x0
	DCB	0x9
	DCW	0xe3
	DCB	0x10
	DCB	0x7
	DCW	0x6
	DCB	0x0
	DCB	0x8
	DCW	0x59
	DCB	0x0
	DCB	0x8
	DCW	0x19
	DCB	0x0
	DCB	0x9
	DCW	0x93
	DCB	0x13
	DCB	0x7
	DCW	0x3b
	DCB	0x0
	DCB	0x8
	DCW	0x79
	DCB	0x0
	DCB	0x8
	DCW	0x39
	DCB	0x0
	DCB	0x9
	DCW	0xd3
	DCB	0x11
	DCB	0x7
	DCW	0x11
	DCB	0x0
	DCB	0x8
	DCW	0x69
	DCB	0x0
	DCB	0x8
	DCW	0x29
	DCB	0x0
	DCB	0x9
	DCW	0xb3
	DCB	0x0
	DCB	0x8
	DCW	0x9
	DCB	0x0
	DCB	0x8
	DCW	0x89
	DCB	0x0
	DCB	0x8
	DCW	0x49
	DCB	0x0
	DCB	0x9
	DCW	0xf3
	DCB	0x10
	DCB	0x7
	DCW	0x4
	DCB	0x0
	DCB	0x8
	DCW	0x55
	DCB	0x0
	DCB	0x8
	DCW	0x15
	DCB	0x10
	DCB	0x8
	DCW	0x102
	DCB	0x13
	DCB	0x7
	DCW	0x2b
	DCB	0x0
	DCB	0x8
	DCW	0x75
	DCB	0x0
	DCB	0x8
	DCW	0x35
	DCB	0x0
	DCB	0x9
	DCW	0xcb
	DCB	0x11
	DCB	0x7
	DCW	0xd
	DCB	0x0
	DCB	0x8
	DCW	0x65
	DCB	0x0
	DCB	0x8
	DCW	0x25
	DCB	0x0
	DCB	0x9
	DCW	0xab
	DCB	0x0
	DCB	0x8
	DCW	0x5
	DCB	0x0
	DCB	0x8
	DCW	0x85
	DCB	0x0
	DCB	0x8
	DCW	0x45
	DCB	0x0
	DCB	0x9
	DCW	0xeb
	DCB	0x10
	DCB	0x7
	DCW	0x8
	DCB	0x0
	DCB	0x8
	DCW	0x5d
	DCB	0x0
	DCB	0x8
	DCW	0x1d
	DCB	0x0
	DCB	0x9
	DCW	0x9b
	DCB	0x14
	DCB	0x7
	DCW	0x53
	DCB	0x0
	DCB	0x8
	DCW	0x7d
	DCB	0x0
	DCB	0x8
	DCW	0x3d
	DCB	0x0
	DCB	0x9
	DCW	0xdb
	DCB	0x12
	DCB	0x7
	DCW	0x17
	DCB	0x0
	DCB	0x8
	DCW	0x6d
	DCB	0x0
	DCB	0x8
	DCW	0x2d
	DCB	0x0
	DCB	0x9
	DCW	0xbb
	DCB	0x0
	DCB	0x8
	DCW	0xd
	DCB	0x0
	DCB	0x8
	DCW	0x8d
	DCB	0x0
	DCB	0x8
	DCW	0x4d
	DCB	0x0
	DCB	0x9
	DCW	0xfb
	DCB	0x10
	DCB	0x7
	DCW	0x3
	DCB	0x0
	DCB	0x8
	DCW	0x53
	DCB	0x0
	DCB	0x8
	DCW	0x13
	DCB	0x15
	DCB	0x8
	DCW	0xc3
	DCB	0x13
	DCB	0x7
	DCW	0x23
	DCB	0x0
	DCB	0x8
	DCW	0x73
	DCB	0x0
	DCB	0x8
	DCW	0x33
	DCB	0x0
	DCB	0x9
	DCW	0xc7
	DCB	0x11
	DCB	0x7
	DCW	0xb
	DCB	0x0
	DCB	0x8
	DCW	0x63
	DCB	0x0
	DCB	0x8
	DCW	0x23
	DCB	0x0
	DCB	0x9
	DCW	0xa7
	DCB	0x0
	DCB	0x8
	DCW	0x3
	DCB	0x0
	DCB	0x8
	DCW	0x83
	DCB	0x0
	DCB	0x8
	DCW	0x43
	DCB	0x0
	DCB	0x9
	DCW	0xe7
	DCB	0x10
	DCB	0x7
	DCW	0x7
	DCB	0x0
	DCB	0x8
	DCW	0x5b
	DCB	0x0
	DCB	0x8
	DCW	0x1b
	DCB	0x0
	DCB	0x9
	DCW	0x97
	DCB	0x14
	DCB	0x7
	DCW	0x43
	DCB	0x0
	DCB	0x8
	DCW	0x7b
	DCB	0x0
	DCB	0x8
	DCW	0x3b
	DCB	0x0
	DCB	0x9
	DCW	0xd7
	DCB	0x12
	DCB	0x7
	DCW	0x13
	DCB	0x0
	DCB	0x8
	DCW	0x6b
	DCB	0x0
	DCB	0x8
	DCW	0x2b
	DCB	0x0
	DCB	0x9
	DCW	0xb7
	DCB	0x0
	DCB	0x8
	DCW	0xb
	DCB	0x0
	DCB	0x8
	DCW	0x8b
	DCB	0x0
	DCB	0x8
	DCW	0x4b
	DCB	0x0
	DCB	0x9
	DCW	0xf7
	DCB	0x10
	DCB	0x7
	DCW	0x5
	DCB	0x0
	DCB	0x8
	DCW	0x57
	DCB	0x0
	DCB	0x8
	DCW	0x17
	DCB	0x40
	DCB	0x8
	DCW	0x0
	DCB	0x13
	DCB	0x7
	DCW	0x33
	DCB	0x0
	DCB	0x8
	DCW	0x77
	DCB	0x0
	DCB	0x8
	DCW	0x37
	DCB	0x0
	DCB	0x9
	DCW	0xcf
	DCB	0x11
	DCB	0x7
	DCW	0xf
	DCB	0x0
	DCB	0x8
	DCW	0x67
	DCB	0x0
	DCB	0x8
	DCW	0x27
	DCB	0x0
	DCB	0x9
	DCW	0xaf
	DCB	0x0
	DCB	0x8
	DCW	0x7
	DCB	0x0
	DCB	0x8
	DCW	0x87
	DCB	0x0
	DCB	0x8
	DCW	0x47
	DCB	0x0
	DCB	0x9
	DCW	0xef
	DCB	0x10
	DCB	0x7
	DCW	0x9
	DCB	0x0
	DCB	0x8
	DCW	0x5f
	DCB	0x0
	DCB	0x8
	DCW	0x1f
	DCB	0x0
	DCB	0x9
	DCW	0x9f
	DCB	0x14
	DCB	0x7
	DCW	0x63
	DCB	0x0
	DCB	0x8
	DCW	0x7f
	DCB	0x0
	DCB	0x8
	DCW	0x3f
	DCB	0x0
	DCB	0x9
	DCW	0xdf
	DCB	0x12
	DCB	0x7
	DCW	0x1b
	DCB	0x0
	DCB	0x8
	DCW	0x6f
	DCB	0x0
	DCB	0x8
	DCW	0x2f
	DCB	0x0
	DCB	0x9
	DCW	0xbf
	DCB	0x0
	DCB	0x8
	DCW	0xf
	DCB	0x0
	DCB	0x8
	DCW	0x8f
	DCB	0x0
	DCB	0x8
	DCW	0x4f
	DCB	0x0
	DCB	0x9
	DCW	0xff
|?distfix@?1??fixedtables@@9@9| DCB 0x10		; `fixedtables'::`2'::distfix
	DCB	0x5
	DCW	0x1
	DCB	0x17
	DCB	0x5
	DCW	0x101
	DCB	0x13
	DCB	0x5
	DCW	0x11
	DCB	0x1b
	DCB	0x5
	DCW	0x1001
	DCB	0x11
	DCB	0x5
	DCW	0x5
	DCB	0x19
	DCB	0x5
	DCW	0x401
	DCB	0x15
	DCB	0x5
	DCW	0x41
	DCB	0x1d
	DCB	0x5
	DCW	0x4001
	DCB	0x10
	DCB	0x5
	DCW	0x3
	DCB	0x18
	DCB	0x5
	DCW	0x201
	DCB	0x14
	DCB	0x5
	DCW	0x21
	DCB	0x1c
	DCB	0x5
	DCW	0x2001
	DCB	0x12
	DCB	0x5
	DCW	0x9
	DCB	0x1a
	DCB	0x5
	DCW	0x801
	DCB	0x16
	DCB	0x5
	DCW	0x81
	DCB	0x40
	DCB	0x5
	DCW	0x0
	DCB	0x10
	DCB	0x5
	DCW	0x2
	DCB	0x17
	DCB	0x5
	DCW	0x181
	DCB	0x13
	DCB	0x5
	DCW	0x19
	DCB	0x1b
	DCB	0x5
	DCW	0x1801
	DCB	0x11
	DCB	0x5
	DCW	0x7
	DCB	0x19
	DCB	0x5
	DCW	0x601
	DCB	0x15
	DCB	0x5
	DCW	0x61
	DCB	0x1d
	DCB	0x5
	DCW	0x6001
	DCB	0x10
	DCB	0x5
	DCW	0x4
	DCB	0x18
	DCB	0x5
	DCW	0x301
	DCB	0x14
	DCB	0x5
	DCW	0x31
	DCB	0x1c
	DCB	0x5
	DCW	0x3001
	DCB	0x12
	DCB	0x5
	DCW	0xd
	DCB	0x1a
	DCB	0x5
	DCW	0xc01
	DCB	0x16
	DCB	0x5
	DCW	0xc1
	DCB	0x40
	DCB	0x5
	DCW	0x0
|?order@?1??inflateBack@@9@9| DCW 0x10			; `inflateBack'::`2'::order
	DCW	0x11
	DCW	0x12
	DCW	0x0
	DCW	0x8
	DCW	0x7
	DCW	0x9
	DCW	0x6
	DCW	0xa
	DCW	0x5
	DCW	0xb
	DCW	0x4
	DCW	0xc
	DCW	0x3
	DCW	0xd
	DCW	0x2
	DCW	0xe
	DCW	0x1
	DCW	0xf
	EXPORT	|inflateBackEnd|
	EXPORT	|inflateBack|
	EXPORT	|inflateBackInit_|

	AREA	|.pdata|, PDATA
|$pdata$inflateBackEnd| DCD imagerel |$LN6|
	DCD	imagerel |$unwind$inflateBackEnd|

	AREA	|.pdata|, PDATA
|$pdata$inflateBack| DCD imagerel |$LN586|
	DCD	0x5690ed9
	;Flags[SingleProEpi] functionLength[3800] RegF[0] RegI[9] H[0] frameChainReturn[Chained] frameSize[160]

	AREA	|.pdata|, PDATA
|$pdata$inflateBackInit_| DCD imagerel |$LN12|
	DCD	imagerel |$unwind$inflateBackInit_|

	AREA	|.xdata|, DATA
|$unwind$inflateBackInit_| DCD 0x11000043
	DCD	0x400028
	DCD	0x400035
	DCD	0x40003a
	DCD	0x40003f
	DCD	0x82d081e1
	DCD	0xe3e3e424
	;Code Words[2], Epilog Count[4], E[0], X[0], Function Length[67]=268 bytes
	;Epilog Start Index[1], Epilog Start Offset[40]=160 bytes
	;Epilog Start Index[1], Epilog Start Offset[53]=212 bytes
	;Epilog Start Index[1], Epilog Start Offset[58]=232 bytes
	;Epilog Start Index[1], Epilog Start Offset[63]=252 bytes
	;set_fp
	;save_fplr_x
	;save_reg
	;save_r19r20_x
	;end
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$inflateBackEnd| DCD 0x10800014
	DCD	0x40000d
	DCD	0x400011
	DCD	0x1d481e1
	DCD	0xe3e3e3e4
	;Code Words[2], Epilog Count[2], E[0], X[0], Function Length[20]=80 bytes
	;Epilog Start Index[1], Epilog Start Offset[13]=52 bytes
	;Epilog Start Index[1], Epilog Start Offset[17]=68 bytes
	;set_fp
	;save_fplr_x
	;save_reg_x
	;end
	;nop
	;nop
	;nop
; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\infback.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflateBackInit_| PROC

; 34   : {

  00000		 |$LN12|
  00000	a9be53f3	 stp         x19,x20,[sp,#-0x20]!
  00004	f9000bf5	 str         x21,[sp,#0x10]
  00008	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  0000c	910003fd	 mov         fp,sp
  00010	aa0003f3	 mov         x19,x0
  00014	2a0103f4	 mov         w20,w1
  00018	aa0203f5	 mov         x21,x2

; 35   :     struct inflate_state FAR *state;
; 36   : 
; 37   :     if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||

  0001c	b4000003	 cbz         x3,|$LN3@inflateBac|
  00020	39c00068	 ldrsb       w8,[x3]
  00024	7100c51f	 cmp         w8,#0x31
  00028	54000001	 bne         |$LN3@inflateBac|
  0002c	7101609f	 cmp         w4,#0x58
  00030	54000001	 bne         |$LN3@inflateBac|

; 40   :     if (strm == Z_NULL || window == Z_NULL ||
; 41   :         windowBits < 8 || windowBits > 15)

  00034	b4000013	 cbz         x19,|$LN5@inflateBac|
  00038	b4000015	 cbz         x21,|$LN5@inflateBac|
  0003c	51002288	 sub         w8,w20,#8
  00040	71001d1f	 cmp         w8,#7
  00044	54000008	 bhi         |$LN5@inflateBac|

; 43   :     strm->msg = Z_NULL;                 /* in case we return an error */
; 44   :     if (strm->zalloc == (alloc_func)0) {

  00048	f9401a69	 ldr         x9,[x19,#0x30]
  0004c	f900127f	 str         xzr,[x19,#0x20]
  00050	b5000009	 cbnz        x9,|$LN10@inflateBac|

; 45   : #ifdef Z_SOLO
; 46   :         return Z_STREAM_ERROR;
; 47   : #else
; 48   :         strm->zalloc = zcalloc;

  00054	90000008	 adrp        x8,zcalloc
  00058	91000108	 add         x8,x8,PageOffset(zcalloc)

; 49   :         strm->opaque = (voidpf)0;

  0005c	f900227f	 str         xzr,[x19,#0x40]
  00060	f9001a68	 str         x8,[x19,#0x30]
  00064	90000008	 adrp        x8,zcalloc
  00068	91000109	 add         x9,x8,PageOffset(zcalloc)
  0006c	d2800000	 mov         x0,#0
  00070	14000002	 b           |$LN6@inflateBac|
  00074		 |$LN10@inflateBac|
  00074	f9402260	 ldr         x0,[x19,#0x40]
  00078		 |$LN6@inflateBac|

; 50   : #endif
; 51   :     }
; 52   :     if (strm->zfree == (free_func)0)

  00078	f9401e68	 ldr         x8,[x19,#0x38]
  0007c	b5000008	 cbnz        x8,|$LN7@inflateBac|

; 53   : #ifdef Z_SOLO
; 54   :         return Z_STREAM_ERROR;
; 55   : #else
; 56   :     strm->zfree = zcfree;

  00080	90000008	 adrp        x8,zcfree
  00084	91000108	 add         x8,x8,PageOffset(zcfree)
  00088	f9001e68	 str         x8,[x19,#0x38]
  0008c		 |$LN7@inflateBac|

; 57   : #endif
; 58   :     state = (struct inflate_state FAR *)ZALLOC(strm, 1,

  0008c	52837e02	 mov         w2,#0x1BF0
  00090	52800021	 mov         w1,#1
  00094	d63f0120	 blr         x9

; 59   :                                                sizeof(struct inflate_state));
; 60   :     if (state == Z_NULL) return Z_MEM_ERROR;

  00098	b5000000	 cbnz        x0,|$LN8@inflateBac|
  0009c	12800060	 mov         w0,#-4
  000a0	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000a4	f9400bf5	 ldr         x21,[sp,#0x10]
  000a8	a8c253f3	 ldp         x19,x20,[sp],#0x20
  000ac	d65f03c0	 ret
  000b0		 |$LN8@inflateBac|

; 61   :     Tracev((stderr, "inflate: allocated\n"));
; 62   :     strm->state = (struct internal_state FAR *)state;
; 63   :     state->dmax = 32768U;

  000b0	52900008	 mov         w8,#0x8000
  000b4	f9001660	 str         x0,[x19,#0x28]

; 64   :     state->wbits = (uInt)windowBits;
; 65   :     state->wsize = 1U << windowBits;

  000b8	52800029	 mov         w9,#1
  000bc	b9001c08	 str         w8,[x0,#0x1C]
  000c0	1ad42128	 lsl         w8,w9,w20
  000c4	29062014	 stp         w20,w8,[x0,#0x30]

; 66   :     state->window = window;

  000c8	f9002015	 str         x21,[x0,#0x40]

; 67   :     state->wnext = 0;
; 68   :     state->whave = 0;

  000cc	29077c1f	 stp         wzr,wzr,[x0,#0x38]

; 69   :     return Z_OK;

  000d0	52800000	 mov         w0,#0
  000d4	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000d8	f9400bf5	 ldr         x21,[sp,#0x10]
  000dc	a8c253f3	 ldp         x19,x20,[sp],#0x20
  000e0	d65f03c0	 ret
  000e4		 |$LN5@inflateBac|

; 42   :         return Z_STREAM_ERROR;

  000e4	12800020	 mov         w0,#-2
  000e8	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000ec	f9400bf5	 ldr         x21,[sp,#0x10]
  000f0	a8c253f3	 ldp         x19,x20,[sp],#0x20
  000f4	d65f03c0	 ret
  000f8		 |$LN3@inflateBac|

; 38   :         stream_size != (int)(sizeof(z_stream)))
; 39   :         return Z_VERSION_ERROR;

  000f8	128000a0	 mov         w0,#-6
  000fc	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00100	f9400bf5	 ldr         x21,[sp,#0x10]
  00104	a8c253f3	 ldp         x19,x20,[sp],#0x20
  00108	d65f03c0	 ret

			 ENDP  ; |inflateBackInit_|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\infback.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |fixedtables| PROC

; 85   : #ifdef BUILDFIXED
; 86   :     static int virgin = 1;
; 87   :     static code *lenfix, *distfix;
; 88   :     static code fixed[544];
; 89   : 
; 90   :     /* build fixed huffman tables if first call (may not be thread safe) */
; 91   :     if (virgin) {
; 92   :         unsigned sym, bits;
; 93   :         static code *next;
; 94   : 
; 95   :         /* literal/length table */
; 96   :         sym = 0;
; 97   :         while (sym < 144) state->lens[sym++] = 8;
; 98   :         while (sym < 256) state->lens[sym++] = 9;
; 99   :         while (sym < 280) state->lens[sym++] = 7;
; 100  :         while (sym < 288) state->lens[sym++] = 8;
; 101  :         next = fixed;
; 102  :         lenfix = next;
; 103  :         bits = 9;
; 104  :         inflate_table(LENS, state->lens, 288, &(next), &(bits), state->work);
; 105  : 
; 106  :         /* distance table */
; 107  :         sym = 0;
; 108  :         while (sym < 32) state->lens[sym++] = 5;
; 109  :         distfix = next;
; 110  :         bits = 5;
; 111  :         inflate_table(DISTS, state->lens, 32, &(next), &(bits), state->work);
; 112  : 
; 113  :         /* do this just once */
; 114  :         virgin = 0;
; 115  :     }
; 116  : #else /* !BUILDFIXED */
; 117  : #   include "inffixed.h"
; 118  : #endif /* BUILDFIXED */
; 119  :     state->lencode = lenfix;

  00000	90000008	 adrp        x8,|?lenfix@?1??fixedtables@@9@9|
  00004	91000108	 add         x8,x8,PageOffset(|?lenfix@?1??fixedtables@@9@9|)

; 120  :     state->lenbits = 9;

  00008	52800129	 mov         w9,#9
  0000c	f9003008	 str         x8,[x0,#0x60]

; 121  :     state->distcode = distfix;

  00010	91200108	 add         x8,x8,#0x800
  00014	b9007009	 str         w9,[x0,#0x70]

; 122  :     state->distbits = 5;

  00018	528000a9	 mov         w9,#5
  0001c	f9003408	 str         x8,[x0,#0x68]
  00020	b9007409	 str         w9,[x0,#0x74]
  00024	d65f03c0	 ret

			 ENDP  ; |fixedtables|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\infback.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflateBack| PROC

; 256  : {

  00000		 |$LN586|
  00000	a9bb53f3	 stp         x19,x20,[sp,#-0x50]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	a90263f7	 stp         x23,x24,[sp,#0x20]
  0000c	a9036bf9	 stp         x25,x26,[sp,#0x30]
  00010	f90023fb	 str         x27,[sp,#0x40]
  00014	a9bb7bfd	 stp         fp,lr,[sp,#-0x50]!
  00018	910003fd	 mov         fp,sp
  0001c	aa0003f3	 mov         x19,x0
  00020	a9038fe4	 stp         x4,x3,[sp,#0x38]
  00024	f90017f3	 str         x19,[sp,#0x28]
  00028	aa0103fa	 mov         x26,x1
  0002c	aa0203fb	 mov         x27,x2

; 257  :     struct inflate_state FAR *state;
; 258  :     z_const unsigned char FAR *next;    /* next input */
; 259  :     unsigned char FAR *put;     /* next output */
; 260  :     unsigned have, left;        /* available input and output */
; 261  :     unsigned long hold;         /* bit buffer */
; 262  :     unsigned bits;              /* bits in bit buffer */
; 263  :     unsigned copy;              /* number of stored or match bytes to copy */
; 264  :     unsigned char FAR *from;    /* where to copy match bytes from */
; 265  :     code here;                  /* current decoding table entry */
; 266  :     code last;                  /* parent table entry */
; 267  :     unsigned len;               /* length to copy for repeats, bits to drop */
; 268  :     int ret;                    /* return code */
; 269  :     static const unsigned short order[19] = /* permutation of code lengths */
; 270  :         {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 271  : 
; 272  :     /* Check that the strm exists and that the state was initialized */
; 273  :     if (strm == Z_NULL || strm->state == Z_NULL)

  00030	b4000013	 cbz         x19,|$LN254@inflateBac|
  00034	f9401677	 ldr         x23,[x19,#0x28]
  00038	b4000017	 cbz         x23,|$LN254@inflateBac|

; 275  :     state = (struct inflate_state FAR *)strm->state;
; 276  : 
; 277  :     /* Reset the state */
; 278  :     strm->msg = Z_NULL;
; 279  :     state->mode = TYPE;

  0003c	5287e7e8	 mov         w8,#0x3F3F
  00040	f900127f	 str         xzr,[x19,#0x20]
  00044	29017ee8	 stp         w8,wzr,[x23,#8]

; 280  :     state->last = 0;
; 281  :     state->whave = 0;

  00048	b9003aff	 str         wzr,[x23,#0x38]

; 282  :     next = strm->next_in;

  0004c	f940026e	 ldr         x14,[x19]
  00050	f9000bee	 str         x14,[sp,#0x10]

; 283  :     have = next != Z_NULL ? strm->avail_in : 0;

  00054	b400000e	 cbz         x14,|$LN343@inflateBac|
  00058	b9400a74	 ldr         w20,[x19,#8]
  0005c	14000002	 b           |$LN344@inflateBac|
  00060		 |$LN343@inflateBac|
  00060	52800014	 mov         w20,#0
  00064		 |$LN344@inflateBac|

; 284  :     hold = 0;
; 285  :     bits = 0;
; 286  :     put = state->window;
; 287  :     left = state->wsize;
; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  00064	b9400ae8	 ldr         w8,[x23,#8]
  00068	5287e7e9	 mov         w9,#0x3F3F
  0006c	f94022f8	 ldr         x24,[x23,#0x40]
  00070	52800016	 mov         w22,#0
  00074	b94036f9	 ldr         w25,[x23,#0x34]
  00078	52800015	 mov         w21,#0
  0007c	4b09010a	 sub         w10,w8,w9
  00080	7100495f	 cmp         w10,#0x12
  00084	f9001bf8	 str         x24,[sp,#0x30]
  00088	b9001ff9	 str         w25,[sp,#0x1C]
  0008c	54000008	 bhi         |$LN341@inflateBac|
  00090	90000009	 adrp        x9,|?order@?1??inflateBack@@9@9|
  00094	9100012d	 add         x13,x9,PageOffset(|?order@?1??inflateBack@@9@9|)
  00098	f90027ed	 str         x13,[sp,#0x48]
  0009c	9000000b	 adrp        x11,|??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@|
  000a0	5287e90c	 mov         w12,#0x3F48
  000a4	5287ea2f	 mov         w15,#0x3F51
  000a8		 |$LN557@inflateBac|
  000a8	5287e886	 mov         w6,#0x3F44
  000ac	5287e827	 mov         w7,#0x3F41
  000b0	5287ea03	 mov         w3,#0x3F50
  000b4	90000005	 adrp        x5,|??_C@_0BD@PJCBIDD@invalid?5block?5type@|
  000b8	90000004	 adrp        x4,|??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@|
  000bc	100070e9	 adr         x9,__swt
  000c0	b8aa5928	 ldrsw       x8,[x9,w10 uxtw #2]
  000c4	10003a09	 adr         x9,|$LN560@inflateBac|
  000c8	8b080928	 add         x8,x9,x8,lsl #2
  000cc	d61f0100	 br          x8
  000d0		 |$LN255@inflateBac|

; 292  :         case TYPE:
; 293  :             /* determine and dispatch block type */
; 294  :             if (state->last) {

  000d0	b9400ee9	 ldr         w9,[x23,#0xC]
  000d4	34000009	 cbz         w9,|$LN12@inflateBac|

; 295  :                 BYTEBITS();

  000d8	12000aa8	 and         w8,w21,#7

; 296  :                 state->mode = DONE;

  000dc	b9000ae3	 str         w3,[x23,#8]
  000e0	1ac826d6	 lsr         w22,w22,w8
  000e4	4b0802b5	 sub         w21,w21,w8

; 297  :                 break;

  000e8	14000263	 b           |$LN551@inflateBac|
  000ec		 |$LN12@inflateBac|

; 298  :             }
; 299  :             NEEDBITS(3);

  000ec	71000ebf	 cmp         w21,#3
  000f0	54000002	 bhs         |$LN10@inflateBac|
  000f4		 |$LL13@inflateBac|
  000f4	35000014	 cbnz        w20,|$LN18@inflateBac|
  000f8	910043e1	 add         x1,sp,#0x10
  000fc	aa1b03e0	 mov         x0,x27
  00100	d63f0340	 blr         x26
  00104	2a0003f4	 mov         w20,w0
  00108	34000014	 cbz         w20,|$LN369@inflateBac|
  0010c	f9400bee	 ldr         x14,[sp,#0x10]
  00110		 |$LN18@inflateBac|
  00110	384015c8	 ldrb        w8,[x14],#1
  00114	51000694	 sub         w20,w20,#1
  00118	1ad52108	 lsl         w8,w8,w21
  0011c	f9000bee	 str         x14,[sp,#0x10]
  00120	110022b5	 add         w21,w21,#8
  00124	71000ebf	 cmp         w21,#3
  00128	0b160116	 add         w22,w8,w22
  0012c	54000003	 blo         |$LL13@inflateBac|
  00130	5287ea2f	 mov         w15,#0x3F51
  00134	5287e90c	 mov         w12,#0x3F48
  00138	5287e827	 mov         w7,#0x3F41
  0013c	5287e886	 mov         w6,#0x3F44
  00140	90000005	 adrp        x5,|??_C@_0BD@PJCBIDD@invalid?5block?5type@|
  00144		 |$LN10@inflateBac|

; 300  :             state->last = BITS(1);
; 301  :             DROPBITS(1);

  00144	53017ecb	 lsr         w11,w22,#1

; 302  :             switch (BITS(2)) {

  00148	1200056a	 and         w10,w11,#3
  0014c	120002c8	 and         w8,w22,#1
  00150	71000d5f	 cmp         w10,#3
  00154	b9000ee8	 str         w8,[x23,#0xC]
  00158	54000008	 bhi         |$LN28@inflateBac|
  0015c	10006e49	 adr         x9,__swt
  00160	b8aa5928	 ldrsw       x8,[x9,w10 uxtw #2]
  00164	100001a9	 adr         x9,|$LN581@inflateBac|
  00168	8b080928	 add         x8,x9,x8,lsl #2
  0016c	d61f0100	 br          x8
  00170		 |$LN259@inflateBac|

; 303  :             case 0:                             /* stored block */
; 304  :                 Tracev((stderr, "inflate:     stored block%s\n",
; 305  :                         state->last ? " (last)" : ""));
; 306  :                 state->mode = STORED;

  00170	b9000ae7	 str         w7,[x23,#8]

; 322  :             }
; 323  :             DROPBITS(2);

  00174	53027d76	 lsr         w22,w11,#2
  00178	51000eb5	 sub         w21,w21,#3

; 324  :             break;

  0017c	1400023d	 b           |$LN552@inflateBac|
  00180		 |$LN260@inflateBac|

; 307  :                 break;
; 308  :             case 1:                             /* fixed block */
; 309  :                 fixedtables(state);

  00180	aa1703e0	 mov         x0,x23
  00184	94000000	 bl          fixedtables

; 310  :                 Tracev((stderr, "inflate:     fixed codes block%s\n",
; 311  :                         state->last ? " (last)" : ""));
; 312  :                 state->mode = LEN;              /* decode codes */

  00188	b9000aec	 str         w12,[x23,#8]

; 322  :             }
; 323  :             DROPBITS(2);

  0018c	53027d76	 lsr         w22,w11,#2
  00190	51000eb5	 sub         w21,w21,#3

; 324  :             break;

  00194	14000237	 b           |$LN552@inflateBac|
  00198		 |$LN261@inflateBac|
  00198		 |$LN581@inflateBac|

; 313  :                 break;
; 314  :             case 2:                             /* dynamic block */
; 315  :                 Tracev((stderr, "inflate:     dynamic codes block%s\n",
; 316  :                         state->last ? " (last)" : ""));
; 317  :                 state->mode = TABLE;

  00198	b9000ae6	 str         w6,[x23,#8]

; 322  :             }
; 323  :             DROPBITS(2);

  0019c	53027d76	 lsr         w22,w11,#2
  001a0	51000eb5	 sub         w21,w21,#3

; 324  :             break;

  001a4	14000233	 b           |$LN552@inflateBac|
  001a8		 |$LN262@inflateBac|

; 318  :                 break;
; 319  :             case 3:
; 320  :                 strm->msg = (char *)"invalid block type";

  001a8	910000a8	 add         x8,x5,PageOffset(|??_C@_0BD@PJCBIDD@invalid?5block?5type@|)
  001ac	f9001268	 str         x8,[x19,#0x20]

; 321  :                 state->mode = BAD;

  001b0	b9000aef	 str         w15,[x23,#8]
  001b4		 |$LN28@inflateBac|

; 322  :             }
; 323  :             DROPBITS(2);

  001b4	53027d76	 lsr         w22,w11,#2
  001b8	51000eb5	 sub         w21,w21,#3

; 324  :             break;

  001bc	1400022d	 b           |$LN552@inflateBac|
  001c0		 |$LN31@inflateBac|

; 325  : 
; 326  :         case STORED:
; 327  :             /* get and verify stored block length */
; 328  :             BYTEBITS();                         /* go to byte boundary */

  001c0	12000aa8	 and         w8,w21,#7
  001c4	4b0802b5	 sub         w21,w21,w8

; 329  :             NEEDBITS(32);

  001c8	710082bf	 cmp         w21,#0x20
  001cc	1ac826d6	 lsr         w22,w22,w8
  001d0	54000002	 bhs         |$LN32@inflateBac|
  001d4		 |$LL35@inflateBac|
  001d4	35000014	 cbnz        w20,|$LN40@inflateBac|
  001d8	910043e1	 add         x1,sp,#0x10
  001dc	aa1b03e0	 mov         x0,x27
  001e0	d63f0340	 blr         x26
  001e4	2a0003f4	 mov         w20,w0
  001e8	34000014	 cbz         w20,|$LN369@inflateBac|
  001ec	f9400bee	 ldr         x14,[sp,#0x10]
  001f0		 |$LN40@inflateBac|
  001f0	384015c8	 ldrb        w8,[x14],#1
  001f4	51000694	 sub         w20,w20,#1
  001f8	1ad52108	 lsl         w8,w8,w21
  001fc	f9000bee	 str         x14,[sp,#0x10]
  00200	110022b5	 add         w21,w21,#8
  00204	710082bf	 cmp         w21,#0x20
  00208	0b160116	 add         w22,w8,w22
  0020c	54000003	 blo         |$LL35@inflateBac|
  00210	5287ea2f	 mov         w15,#0x3F51
  00214	5287e90c	 mov         w12,#0x3F48
  00218	9000000b	 adrp        x11,|??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@|
  0021c		 |$LN32@inflateBac|

; 330  :             if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {

  0021c	12003ec9	 and         w9,w22,#0xFFFF
  00220	2a3603e8	 mvn         w8,w22
  00224	6b48413f	 cmp         w9,w8,lsr #0x10
  00228	54000000	 beq         |$LN266@inflateBac|

; 331  :                 strm->msg = (char *)"invalid stored block lengths";

  0022c	91000168	 add         x8,x11,PageOffset(|??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@|)
  00230	f9001268	 str         x8,[x19,#0x20]

; 332  :                 state->mode = BAD;

  00234	b9000aef	 str         w15,[x23,#8]

; 333  :                 break;

  00238	1400020f	 b           |$LN551@inflateBac|
  0023c		 |$LN266@inflateBac|

; 334  :             }
; 335  :             state->length = (unsigned)hold & 0xffff;

  0023c	b90052e9	 str         w9,[x23,#0x50]

; 336  :             Tracev((stderr, "inflate:       stored length %u\n",
; 337  :                     state->length));
; 338  :             INITBITS();

  00240	52800016	 mov         w22,#0
  00244	52800015	 mov         w21,#0

; 339  : 
; 340  :             /* copy stored block from input to output */
; 341  :             while (state->length != 0) {

  00248	34000009	 cbz         w9,|$LN47@inflateBac|
  0024c	2a0903f3	 mov         w19,w9
  00250		 |$LL46@inflateBac|

; 342  :                 copy = state->length;
; 343  :                 PULL();

  00250	35000014	 cbnz        w20,|$LN48@inflateBac|
  00254	910043e1	 add         x1,sp,#0x10
  00258	aa1b03e0	 mov         x0,x27
  0025c	d63f0340	 blr         x26
  00260	2a0003f4	 mov         w20,w0
  00264	34000014	 cbz         w20,|$LN369@inflateBac|
  00268		 |$LN48@inflateBac|

; 344  :                 ROOM();

  00268	35000019	 cbnz        w25,|$LN51@inflateBac|
  0026c	b94036f9	 ldr         w25,[x23,#0x34]
  00270	f94022f8	 ldr         x24,[x23,#0x40]
  00274	a943a3e0	 ldp         x0,x8,[sp,#0x38]
  00278	2a1903e2	 mov         w2,w25
  0027c	b9003af9	 str         w25,[x23,#0x38]
  00280	aa1803e1	 mov         x1,x24
  00284	d63f0100	 blr         x8
  00288	35000000	 cbnz        w0,|$LN372@inflateBac|
  0028c		 |$LN51@inflateBac|

; 345  :                 if (copy > have) copy = have;
; 346  :                 if (copy > left) copy = left;

  0028c	6b14027f	 cmp         w19,w20

; 347  :                 zmemcpy(put, next, copy);

  00290	f9400be1	 ldr         x1,[sp,#0x10]
  00294	1a949268	 csells      w8,w19,w20
  00298	6b19011f	 cmp         w8,w25
  0029c	1a999113	 csells      w19,w8,w25
  002a0	aa1303e2	 mov         x2,x19
  002a4	aa1803e0	 mov         x0,x24
  002a8	94000000	 bl          memcpy

; 348  :                 have -= copy;
; 349  :                 next += copy;

  002ac	f9400be8	 ldr         x8,[sp,#0x10]

; 350  :                 left -= copy;

  002b0	4b130339	 sub         w25,w25,w19

; 351  :                 put += copy;

  002b4	8b334318	 add         x24,x24,w19,uxtw #0
  002b8	4b130294	 sub         w20,w20,w19
  002bc	b9001ff9	 str         w25,[sp,#0x1C]
  002c0	f9001bf8	 str         x24,[sp,#0x30]
  002c4	8b334108	 add         x8,x8,w19,uxtw #0
  002c8	f9000be8	 str         x8,[sp,#0x10]

; 352  :                 state->length -= copy;

  002cc	b94052e8	 ldr         w8,[x23,#0x50]
  002d0	4b130113	 sub         w19,w8,w19
  002d4	b90052f3	 str         w19,[x23,#0x50]
  002d8	35000013	 cbnz        w19,|$LL46@inflateBac|
  002dc	f94017f3	 ldr         x19,[sp,#0x28]
  002e0		 |$LN47@inflateBac|

; 353  :             }
; 354  :             Tracev((stderr, "inflate:       stored end\n"));
; 355  :             state->mode = TYPE;

  002e0	5287e7e8	 mov         w8,#0x3F3F
  002e4	b9000ae8	 str         w8,[x23,#8]

; 356  :             break;

  002e8	140001e0	 b           |$LN553@inflateBac|
  002ec		 |$LN56@inflateBac|

; 357  : 
; 358  :         case TABLE:
; 359  :             /* get dynamic table entries descriptor */
; 360  :             NEEDBITS(14);

  002ec	71003abf	 cmp         w21,#0xE
  002f0	54000002	 bhs         |$LN54@inflateBac|
  002f4		 |$LL57@inflateBac|
  002f4	35000014	 cbnz        w20,|$LN62@inflateBac|
  002f8	910043e1	 add         x1,sp,#0x10
  002fc	aa1b03e0	 mov         x0,x27
  00300	d63f0340	 blr         x26
  00304	2a0003f4	 mov         w20,w0
  00308	34000014	 cbz         w20,|$LN369@inflateBac|
  0030c	f9400bee	 ldr         x14,[sp,#0x10]
  00310		 |$LN62@inflateBac|
  00310	384015c8	 ldrb        w8,[x14],#1
  00314	51000694	 sub         w20,w20,#1
  00318	1ad52108	 lsl         w8,w8,w21
  0031c	f9000bee	 str         x14,[sp,#0x10]
  00320	110022b5	 add         w21,w21,#8
  00324	71003abf	 cmp         w21,#0xE
  00328	0b160116	 add         w22,w8,w22
  0032c	54000003	 blo         |$LL57@inflateBac|
  00330	f94027ed	 ldr         x13,[sp,#0x48]
  00334	5287ea2f	 mov         w15,#0x3F51
  00338	90000004	 adrp        x4,|??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@|
  0033c		 |$LN54@inflateBac|

; 361  :             state->nlen = BITS(5) + 257;

  0033c	120012c8	 and         w8,w22,#0x1F
  00340	1104050b	 add         w11,w8,#0x101

; 362  :             DROPBITS(5);
; 363  :             state->ndist = BITS(5) + 1;

  00344	530526c8	 ubfx        w8,w22,#5,#5
  00348	b9007eeb	 str         w11,[x23,#0x7C]

; 364  :             DROPBITS(5);

  0034c	53057ec9	 lsr         w9,w22,#5
  00350	1100050a	 add         w10,w8,#1

; 365  :             state->ncode = BITS(4) + 4;

  00354	53052128	 ubfx        w8,w9,#5,#4
  00358	b90082ea	 str         w10,[x23,#0x80]
  0035c	1100110c	 add         w12,w8,#4

; 366  :             DROPBITS(4);

  00360	53057d28	 lsr         w8,w9,#5
  00364	b9007aec	 str         w12,[x23,#0x78]

; 367  : #ifndef PKZIP_BUG_WORKAROUND
; 368  :             if (state->nlen > 286 || state->ndist > 30) {

  00368	7104797f	 cmp         w11,#0x11E
  0036c	53047d16	 lsr         w22,w8,#4
  00370	51003ab5	 sub         w21,w21,#0xE
  00374	7a5e994a	 ccmpls      w10,#0x1E,#0xA
  00378	54000008	 bhi         |$LN277@inflateBac|

; 372  :             }
; 373  : #endif
; 374  :             Tracev((stderr, "inflate:       table sizes ok\n"));
; 375  : 
; 376  :             /* get code length code lengths (not a typo) */
; 377  :             state->have = 0;

  0037c	b90086ff	 str         wzr,[x23,#0x84]

; 378  :             while (state->have < state->ncode) {

  00380	3400000c	 cbz         w12,|$LL90@inflateBac|
  00384		 |$LL74@inflateBac|

; 379  :                 NEEDBITS(3);

  00384	71000ebf	 cmp         w21,#3
  00388	54000002	 bhs         |$LN76@inflateBac|
  0038c	f9400be9	 ldr         x9,[sp,#0x10]
  00390		 |$LL79@inflateBac|
  00390	35000014	 cbnz        w20,|$LN84@inflateBac|
  00394	910043e1	 add         x1,sp,#0x10
  00398	aa1b03e0	 mov         x0,x27
  0039c	d63f0340	 blr         x26
  003a0	2a0003f4	 mov         w20,w0
  003a4	34000014	 cbz         w20,|$LN369@inflateBac|
  003a8	f9400be9	 ldr         x9,[sp,#0x10]
  003ac		 |$LN84@inflateBac|
  003ac	38401528	 ldrb        w8,[x9],#1
  003b0	51000694	 sub         w20,w20,#1
  003b4	1ad52108	 lsl         w8,w8,w21
  003b8	f9000be9	 str         x9,[sp,#0x10]
  003bc	110022b5	 add         w21,w21,#8
  003c0	71000ebf	 cmp         w21,#3
  003c4	0b160116	 add         w22,w8,w22
  003c8	54000003	 blo         |$LL79@inflateBac|
  003cc	f94027ed	 ldr         x13,[sp,#0x48]
  003d0		 |$LN76@inflateBac|

; 380  :                 state->lens[order[state->have++]] = (unsigned short)BITS(3);

  003d0	b94086e8	 ldr         w8,[x23,#0x84]
  003d4	12000aca	 and         w10,w22,#7

; 381  :                 DROPBITS(3);

  003d8	53037ed6	 lsr         w22,w22,#3
  003dc	51000eb5	 sub         w21,w21,#3
  003e0	786859a9	 ldrh        w9,[x13,w8 uxtw #1]
  003e4	91012129	 add         x9,x9,#0x48
  003e8	78297aea	 strh        w10,[x23,x9 lsl #1]
  003ec	b94086e8	 ldr         w8,[x23,#0x84]
  003f0	1100050b	 add         w11,w8,#1
  003f4	b90086eb	 str         w11,[x23,#0x84]
  003f8	b9407ae8	 ldr         w8,[x23,#0x78]
  003fc	6b08017f	 cmp         w11,w8
  00400	54000003	 blo         |$LL74@inflateBac|

; 382  :             }
; 383  :             while (state->have < 19)

  00404	71004d7f	 cmp         w11,#0x13
  00408	54000002	 bhs         |$LN91@inflateBac|
  0040c		 |$LL90@inflateBac|

; 384  :                 state->lens[order[state->have++]] = 0;

  0040c	b94086e8	 ldr         w8,[x23,#0x84]
  00410	786859a9	 ldrh        w9,[x13,w8 uxtw #1]
  00414	91012129	 add         x9,x9,#0x48
  00418	78297aff	 strh        wzr,[x23,x9 lsl #1]
  0041c	b94086e8	 ldr         w8,[x23,#0x84]
  00420	1100050a	 add         w10,w8,#1
  00424	b90086ea	 str         w10,[x23,#0x84]
  00428	71004d5f	 cmp         w10,#0x13
  0042c	54000003	 blo         |$LL90@inflateBac|
  00430		 |$LN91@inflateBac|

; 385  :             state->next = state->codes;

  00430	911542f9	 add         x25,x23,#0x550

; 386  :             state->lencode = (code const FAR *)(state->next);
; 387  :             state->lenbits = 7;

  00434	528000e8	 mov         w8,#7
  00438	f90046f9	 str         x25,[x23,#0x88]

; 388  :             ret = inflate_table(CODES, state->lens, 19, &(state->next),

  0043c	910c42e5	 add         x5,x23,#0x310
  00440	f90032f9	 str         x25,[x23,#0x60]
  00444	9101c2e4	 add         x4,x23,#0x70
  00448	b90072e8	 str         w8,[x23,#0x70]
  0044c	910222e3	 add         x3,x23,#0x88
  00450	52800262	 mov         w2,#0x13
  00454	910242e1	 add         x1,x23,#0x90
  00458	52800000	 mov         w0,#0
  0045c	94000000	 bl          inflate_table

; 389  :                                 &(state->lenbits), state->work);
; 390  :             if (ret) {

  00460	34000000	 cbz         w0,|$LN280@inflateBac|

; 391  :                 strm->msg = (char *)"invalid code lengths set";

  00464	90000008	 adrp        x8,|??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@|
  00468	91000108	 add         x8,x8,PageOffset(|??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@|)

; 392  :                 state->mode = BAD;
; 393  :                 break;

  0046c	b9401ff9	 ldr         w25,[sp,#0x1C]
  00470	5287ea2f	 mov         w15,#0x3F51
  00474	f9001268	 str         x8,[x19,#0x20]
  00478	b9000aef	 str         w15,[x23,#8]
  0047c	1400017c	 b           |$LN554@inflateBac|
  00480		 |$LN280@inflateBac|

; 394  :             }
; 395  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 396  : 
; 397  :             /* get length and distance code code lengths */
; 398  :             state->have = 0;
; 399  :             while (state->have < state->nlen + state->ndist) {

  00480	294fa2e2	 ldp         w2,w8,[x23,#0x7C]
  00484	b90086ff	 str         wzr,[x23,#0x84]
  00488	0b080049	 add         w9,w2,w8
  0048c	34000009	 cbz         w9,|$LN93@inflateBac|
  00490		 |$LL92@inflateBac|

; 400  :                 for (;;) {
; 401  :                     here = state->lencode[BITS(state->lenbits)];

  00490	b94072e8	 ldr         w8,[x23,#0x70]
  00494	52800029	 mov         w9,#1

; 402  :                     if ((unsigned)(here.bits) <= bits) break;

  00498	f9400bed	 ldr         x13,[sp,#0x10]
  0049c	1ac82129	 lsl         w9,w9,w8
  004a0	5100052a	 sub         w10,w9,#1
  004a4	f94032e9	 ldr         x9,[x23,#0x60]
  004a8	d3407ec8	 uxtw        x8,w22
  004ac	8a08014c	 and         x12,x10,x8
  004b0	b86c792a	 ldr         w10,[x9,x12 lsl #2]
  004b4	53087d48	 lsr         w8,w10,#8
  004b8	b9001bea	 str         w10,[sp,#0x18]
  004bc	6b2802bf	 cmp         w21,w8,uxtb #0
  004c0	54000002	 bhs         |$LN445@inflateBac|
  004c4	52800033	 mov         w19,#1
  004c8		 |$LL94@inflateBac|

; 403  :                     PULLBYTE();

  004c8	35000014	 cbnz        w20,|$LN100@inflateBac|
  004cc	910043e1	 add         x1,sp,#0x10
  004d0	aa1b03e0	 mov         x0,x27
  004d4	d63f0340	 blr         x26
  004d8	2a0003f4	 mov         w20,w0
  004dc	34000014	 cbz         w20,|$LN369@inflateBac|
  004e0	f9400bed	 ldr         x13,[sp,#0x10]
  004e4		 |$LN100@inflateBac|
  004e4	384015a8	 ldrb        w8,[x13],#1
  004e8	51000694	 sub         w20,w20,#1
  004ec	1ad52108	 lsl         w8,w8,w21
  004f0	f9000bed	 str         x13,[sp,#0x10]
  004f4	0b16010c	 add         w12,w8,w22
  004f8	b94072e8	 ldr         w8,[x23,#0x70]
  004fc	2a0c03f6	 mov         w22,w12
  00500	110022b5	 add         w21,w21,#8
  00504	1ac82269	 lsl         w9,w19,w8
  00508	5100052a	 sub         w10,w9,#1
  0050c	f94032e9	 ldr         x9,[x23,#0x60]
  00510	8a0c014c	 and         x12,x10,x12
  00514	b86c792a	 ldr         w10,[x9,x12 lsl #2]
  00518	53087d48	 lsr         w8,w10,#8
  0051c	b9001bea	 str         w10,[sp,#0x18]
  00520	6b2802bf	 cmp         w21,w8,uxtb #0
  00524	54000003	 blo         |$LL94@inflateBac|
  00528		 |$LN445@inflateBac|

; 404  :                 }
; 405  :                 if (here.val < 16) {

  00528	53107d49	 lsr         w9,w10,#0x10
  0052c	53003d29	 uxth        w9,w9
  00530	7100413f	 cmp         w9,#0x10
  00534	53001d08	 uxtb        w8,w8
  00538	54000002	 bhs         |$LN555@inflateBac|

; 406  :                     DROPBITS(here.bits);

  0053c	1ac826d6	 lsr         w22,w22,w8

; 407  :                     state->lens[state->have++] = here.val;

  00540	794037e9	 ldrh        w9,[sp,#0x1A]
  00544	4b0802b5	 sub         w21,w21,w8
  00548	b94086e8	 ldr         w8,[x23,#0x84]
  0054c	9101210a	 add         x10,x8,#0x48
  00550	782a7ae9	 strh        w9,[x23,x10 lsl #1]
  00554	b94086e8	 ldr         w8,[x23,#0x84]
  00558	1100050b	 add         w11,w8,#1
  0055c	b90086eb	 str         w11,[x23,#0x84]

; 408  :                 }

  00560	14000065	 b           |$LN406@inflateBac|
  00564		 |$LN555@inflateBac|

; 409  :                 else {
; 410  :                     if (here.val == 16) {

  00564	54000001	 bne         |$LN286@inflateBac|

; 411  :                         NEEDBITS(here.bits + 2);

  00568	11000913	 add         w19,w8,#2
  0056c	6b1302bf	 cmp         w21,w19
  00570	54000002	 bhs         |$LN106@inflateBac|
  00574		 |$LL109@inflateBac|
  00574	35000014	 cbnz        w20,|$LN114@inflateBac|
  00578	910043e1	 add         x1,sp,#0x10
  0057c	aa1b03e0	 mov         x0,x27
  00580	d63f0340	 blr         x26
  00584	2a0003f4	 mov         w20,w0
  00588	34000014	 cbz         w20,|$LN369@inflateBac|
  0058c	f9400bed	 ldr         x13,[sp,#0x10]
  00590		 |$LN114@inflateBac|
  00590	384015a8	 ldrb        w8,[x13],#1
  00594	51000694	 sub         w20,w20,#1
  00598	1ad52108	 lsl         w8,w8,w21
  0059c	f9000bed	 str         x13,[sp,#0x10]
  005a0	110022b5	 add         w21,w21,#8
  005a4	6b1302bf	 cmp         w21,w19
  005a8	0b160116	 add         w22,w8,w22
  005ac	54000003	 blo         |$LL109@inflateBac|
  005b0		 |$LN106@inflateBac|

; 412  :                         DROPBITS(here.bits);

  005b0	394067e8	 ldrb        w8,[sp,#0x19]

; 413  :                         if (state->have == 0) {

  005b4	b94086e9	 ldr         w9,[x23,#0x84]
  005b8	1ac826d6	 lsr         w22,w22,w8
  005bc	4b0802b5	 sub         w21,w21,w8
  005c0	34000009	 cbz         w9,|$LN380@inflateBac|

; 414  :                             strm->msg = (char *)"invalid bit length repeat";
; 415  :                             state->mode = BAD;
; 416  :                             break;
; 417  :                         }
; 418  :                         len = (unsigned)(state->lens[state->have - 1]);
; 419  :                         copy = 3 + BITS(2);

  005c4	120006c8	 and         w8,w22,#3
  005c8	11000d0c	 add         w12,w8,#3
  005cc	51000528	 sub         w8,w9,#1
  005d0	9101210a	 add         x10,x8,#0x48

; 420  :                         DROPBITS(2);

  005d4	786a7aed	 ldrh        w13,[x23,x10 lsl #1]
  005d8	53027ed6	 lsr         w22,w22,#2
  005dc	51000ab5	 sub         w21,w21,#2

; 421  :                     }

  005e0	14000037	 b           |$LN155@inflateBac|
  005e4		 |$LN286@inflateBac|

; 422  :                     else if (here.val == 17) {

  005e4	7100453f	 cmp         w9,#0x11
  005e8	54000001	 bne         |$LN142@inflateBac|

; 423  :                         NEEDBITS(here.bits + 3);

  005ec	11000d13	 add         w19,w8,#3
  005f0	6b1302bf	 cmp         w21,w19
  005f4	54000002	 bhs         |$LN123@inflateBac|
  005f8		 |$LL126@inflateBac|
  005f8	35000014	 cbnz        w20,|$LN131@inflateBac|
  005fc	910043e1	 add         x1,sp,#0x10
  00600	aa1b03e0	 mov         x0,x27
  00604	d63f0340	 blr         x26
  00608	2a0003f4	 mov         w20,w0
  0060c	34000014	 cbz         w20,|$LN369@inflateBac|
  00610	f9400bed	 ldr         x13,[sp,#0x10]
  00614		 |$LN131@inflateBac|
  00614	384015a8	 ldrb        w8,[x13],#1
  00618	51000694	 sub         w20,w20,#1
  0061c	1ad52108	 lsl         w8,w8,w21
  00620	f9000bed	 str         x13,[sp,#0x10]
  00624	110022b5	 add         w21,w21,#8
  00628	6b1302bf	 cmp         w21,w19
  0062c	0b160116	 add         w22,w8,w22
  00630	54000003	 blo         |$LL126@inflateBac|
  00634		 |$LN123@inflateBac|

; 424  :                         DROPBITS(here.bits);

  00634	394067ea	 ldrb        w10,[sp,#0x19]
  00638	1aca26c9	 lsr         w9,w22,w10

; 425  :                         len = 0;
; 426  :                         copy = 3 + BITS(3);

  0063c	12000928	 and         w8,w9,#7
  00640	11000d0c	 add         w12,w8,#3

; 427  :                         DROPBITS(3);

  00644	4b0a02a8	 sub         w8,w21,w10
  00648	51000d15	 sub         w21,w8,#3
  0064c	53037d36	 lsr         w22,w9,#3

; 428  :                     }

  00650	1400001a	 b           |$LN556@inflateBac|
  00654		 |$LN142@inflateBac|

; 429  :                     else {
; 430  :                         NEEDBITS(here.bits + 7);

  00654	11001d13	 add         w19,w8,#7
  00658	6b1302bf	 cmp         w21,w19
  0065c	54000002	 bhs         |$LN140@inflateBac|
  00660		 |$LL143@inflateBac|
  00660	35000014	 cbnz        w20,|$LN148@inflateBac|
  00664	910043e1	 add         x1,sp,#0x10
  00668	aa1b03e0	 mov         x0,x27
  0066c	d63f0340	 blr         x26
  00670	2a0003f4	 mov         w20,w0
  00674	34000014	 cbz         w20,|$LN369@inflateBac|
  00678	f9400bed	 ldr         x13,[sp,#0x10]
  0067c		 |$LN148@inflateBac|
  0067c	384015a8	 ldrb        w8,[x13],#1
  00680	51000694	 sub         w20,w20,#1
  00684	1ad52108	 lsl         w8,w8,w21
  00688	f9000bed	 str         x13,[sp,#0x10]
  0068c	110022b5	 add         w21,w21,#8
  00690	6b1302bf	 cmp         w21,w19
  00694	0b160116	 add         w22,w8,w22
  00698	54000003	 blo         |$LL143@inflateBac|
  0069c		 |$LN140@inflateBac|

; 431  :                         DROPBITS(here.bits);

  0069c	394067ea	 ldrb        w10,[sp,#0x19]
  006a0	1aca26c9	 lsr         w9,w22,w10

; 432  :                         len = 0;
; 433  :                         copy = 11 + BITS(7);

  006a4	12001928	 and         w8,w9,#0x7F
  006a8	11002d0c	 add         w12,w8,#0xB

; 434  :                         DROPBITS(7);

  006ac	4b0a02a8	 sub         w8,w21,w10
  006b0	51001d15	 sub         w21,w8,#7
  006b4	53077d36	 lsr         w22,w9,#7
  006b8		 |$LN556@inflateBac|

; 435  :                     }
; 436  :                     if (state->have + copy > state->nlen + state->ndist) {

  006b8	5280000d	 mov         w13,#0
  006bc		 |$LN155@inflateBac|
  006bc	294fa6e8	 ldp         w8,w9,[x23,#0x7C]
  006c0	b94086eb	 ldr         w11,[x23,#0x84]
  006c4	0b08012a	 add         w10,w9,w8
  006c8	0b0c0169	 add         w9,w11,w12
  006cc	6b0a013f	 cmp         w9,w10
  006d0	54000008	 bhi         |$LN380@inflateBac|
  006d4		 |$LL157@inflateBac|

; 437  :                         strm->msg = (char *)"invalid bit length repeat";
; 438  :                         state->mode = BAD;
; 439  :                         break;
; 440  :                     }
; 441  :                     while (copy--)
; 442  :                         state->lens[state->have++] = (unsigned short)len;

  006d4	b94086e8	 ldr         w8,[x23,#0x84]
  006d8	5100058c	 sub         w12,w12,#1
  006dc	91012108	 add         x8,x8,#0x48
  006e0	78287aed	 strh        w13,[x23,x8 lsl #1]
  006e4	b94086e9	 ldr         w9,[x23,#0x84]
  006e8	1100052b	 add         w11,w9,#1
  006ec	b90086eb	 str         w11,[x23,#0x84]
  006f0	3500000c	 cbnz        w12,|$LL157@inflateBac|
  006f4		 |$LN406@inflateBac|

; 394  :             }
; 395  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 396  : 
; 397  :             /* get length and distance code code lengths */
; 398  :             state->have = 0;
; 399  :             while (state->have < state->nlen + state->ndist) {

  006f4	294fa2e2	 ldp         w2,w8,[x23,#0x7C]
  006f8	0b080049	 add         w9,w2,w8
  006fc	6b09017f	 cmp         w11,w9
  00700	54000003	 blo         |$LL92@inflateBac|

; 513  :                 Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
; 514  :                         "inflate:         literal '%c'\n" :
; 515  :                         "inflate:         literal 0x%02x\n", here.val));
; 516  :                 ROOM();

  00704	f94017f3	 ldr         x19,[sp,#0x28]
  00708		 |$LN93@inflateBac|

; 443  :                 }
; 444  :             }
; 445  : 
; 446  :             /* handle error breaks in while */
; 447  :             if (state->mode == BAD) break;

  00708	b9400ae8	 ldr         w8,[x23,#8]
  0070c	5287ea29	 mov         w9,#0x3F51
  00710	6b09011f	 cmp         w8,w9
  00714	54000000	 beq         |$LN550@inflateBac|

; 448  : 
; 449  :             /* check for end-of-block code (better have one) */
; 450  :             if (state->lens[256] == 0) {

  00718	794522e8	 ldrh        w8,[x23,#0x290]
  0071c	35000008	 cbnz        w8,|$LN299@inflateBac|

; 451  :                 strm->msg = (char *)"invalid code -- missing end-of-block";

  00720	90000008	 adrp        x8,|??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@|
  00724	91000108	 add         x8,x8,PageOffset(|??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@|)

; 452  :                 state->mode = BAD;
; 453  :                 break;

  00728	b9401ff9	 ldr         w25,[sp,#0x1C]
  0072c	5287ea2f	 mov         w15,#0x3F51
  00730	f9001268	 str         x8,[x19,#0x20]
  00734	b9000aef	 str         w15,[x23,#8]
  00738	140000cd	 b           |$LN554@inflateBac|
  0073c		 |$LN380@inflateBac|

; 284  :     hold = 0;
; 285  :     bits = 0;
; 286  :     put = state->window;
; 287  :     left = state->wsize;
; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  0073c	f94017f3	 ldr         x19,[sp,#0x28]
  00740	90000009	 adrp        x9,|??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@|
  00744	91000128	 add         x8,x9,PageOffset(|??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@|)
  00748	5287ea2f	 mov         w15,#0x3F51
  0074c	b9401ff9	 ldr         w25,[sp,#0x1C]
  00750	f9001268	 str         x8,[x19,#0x20]
  00754	b9000aef	 str         w15,[x23,#8]
  00758	140000c5	 b           |$LN554@inflateBac|
  0075c		 |$LN299@inflateBac|

; 454  :             }
; 455  : 
; 456  :             /* build code tables -- note: do not change the lenbits or distbits
; 457  :                values here (9 and 6) without reading the comments in inftrees.h
; 458  :                concerning the ENOUGH constants, which depend on those values */
; 459  :             state->next = state->codes;
; 460  :             state->lencode = (code const FAR *)(state->next);
; 461  :             state->lenbits = 9;

  0075c	52800128	 mov         w8,#9
  00760	f90046f9	 str         x25,[x23,#0x88]

; 462  :             ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),

  00764	910c42e5	 add         x5,x23,#0x310
  00768	b90072e8	 str         w8,[x23,#0x70]
  0076c	9101c2e4	 add         x4,x23,#0x70
  00770	f90032f9	 str         x25,[x23,#0x60]
  00774	910222e3	 add         x3,x23,#0x88
  00778	910242e1	 add         x1,x23,#0x90
  0077c	52800020	 mov         w0,#1
  00780	94000000	 bl          inflate_table

; 463  :                                 &(state->lenbits), state->work);
; 464  :             if (ret) {

  00784	34000000	 cbz         w0,|$LN300@inflateBac|

; 465  :                 strm->msg = (char *)"invalid literal/lengths set";

  00788	90000008	 adrp        x8,|??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@|
  0078c	91000108	 add         x8,x8,PageOffset(|??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@|)

; 466  :                 state->mode = BAD;
; 467  :                 break;

  00790	b9401ff9	 ldr         w25,[sp,#0x1C]
  00794	5287ea2f	 mov         w15,#0x3F51
  00798	f9001268	 str         x8,[x19,#0x20]
  0079c	b9000aef	 str         w15,[x23,#8]
  007a0	140000b3	 b           |$LN554@inflateBac|
  007a4		 |$LN300@inflateBac|

; 468  :             }
; 469  :             state->distcode = (code const FAR *)(state->next);

  007a4	f94046e8	 ldr         x8,[x23,#0x88]

; 470  :             state->distbits = 6;
; 471  :             ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,

  007a8	910c42e5	 add         x5,x23,#0x310
  007ac	b94082e2	 ldr         w2,[x23,#0x80]
  007b0	9101d2e4	 add         x4,x23,#0x74
  007b4	910222e3	 add         x3,x23,#0x88
  007b8	52800040	 mov         w0,#2
  007bc	f90036e8	 str         x8,[x23,#0x68]
  007c0	528000c8	 mov         w8,#6
  007c4	b90076e8	 str         w8,[x23,#0x74]
  007c8	b9407ee8	 ldr         w8,[x23,#0x7C]
  007cc	91012109	 add         x9,x8,#0x48
  007d0	8b0906e1	 add         x1,x23,x9,lsl #1
  007d4	94000000	 bl          inflate_table

; 472  :                             &(state->next), &(state->distbits), state->work);
; 473  :             if (ret) {

  007d8	b9401ff9	 ldr         w25,[sp,#0x1C]
  007dc	34000000	 cbz         w0,|$LN301@inflateBac|

; 474  :                 strm->msg = (char *)"invalid distances set";

  007e0	90000008	 adrp        x8,|??_C@_0BG@GMDFCBGP@invalid?5distances?5set@|
  007e4	91000108	 add         x8,x8,PageOffset(|??_C@_0BG@GMDFCBGP@invalid?5distances?5set@|)

; 475  :                 state->mode = BAD;

  007e8	5287ea2f	 mov         w15,#0x3F51
  007ec	f9001268	 str         x8,[x19,#0x20]
  007f0	b9000aef	 str         w15,[x23,#8]

; 476  :                 break;

  007f4	1400009e	 b           |$LN554@inflateBac|
  007f8		 |$LN301@inflateBac|

; 477  :             }
; 478  :             Tracev((stderr, "inflate:       codes ok\n"));
; 479  :             state->mode = LEN;

  007f8	5287e908	 mov         w8,#0x3F48
  007fc	b9000ae8	 str         w8,[x23,#8]
  00800	f9400bee	 ldr         x14,[sp,#0x10]
  00804		 |$LN302@inflateBac|
  00804		 |$LN560@inflateBac|

; 480  : 
; 481  :         case LEN:
; 482  :             /* use inflate_fast() if we have enough input and output */
; 483  :             if (have >= 6 && left >= 258) {

  00804	71001a9f	 cmp         w20,#6
  00808	54000003	 blo         |$LN303@inflateBac|
  0080c	71040b3f	 cmp         w25,#0x102
  00810	54000003	 blo         |$LN303@inflateBac|

; 484  :                 RESTORE();

  00814	f9000a78	 str         x24,[x19,#0x10]
  00818	b9001a79	 str         w25,[x19,#0x18]
  0081c	f900026e	 str         x14,[x19]
  00820	b9000a74	 str         w20,[x19,#8]

; 485  :                 if (state->whave < state->wsize)

  00824	2946a2e1	 ldp         w1,w8,[x23,#0x34]
  00828	290956f6	 stp         w22,w21,[x23,#0x48]
  0082c	6b01011f	 cmp         w8,w1
  00830	54000002	 bhs         |$LN304@inflateBac|

; 486  :                     state->whave = state->wsize - left;

  00834	4b190028	 sub         w8,w1,w25
  00838	b9003ae8	 str         w8,[x23,#0x38]
  0083c		 |$LN304@inflateBac|

; 487  :                 inflate_fast(strm, state->wsize);

  0083c	aa1303e0	 mov         x0,x19
  00840	94000000	 bl          inflate_fast

; 488  :                 LOAD();

  00844	f940026e	 ldr         x14,[x19]

; 489  :                 break;

  00848	5287ea2f	 mov         w15,#0x3F51
  0084c	f9400a78	 ldr         x24,[x19,#0x10]
  00850	5287e90c	 mov         w12,#0x3F48
  00854	b9401a79	 ldr         w25,[x19,#0x18]
  00858	9000000b	 adrp        x11,|??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@|
  0085c	b9400a74	 ldr         w20,[x19,#8]
  00860	f9000bee	 str         x14,[sp,#0x10]
  00864	294956f6	 ldp         w22,w21,[x23,#0x48]
  00868	f9001bf8	 str         x24,[sp,#0x30]
  0086c	b9001ff9	 str         w25,[sp,#0x1C]
  00870	14000082	 b           |$LN393@inflateBac|
  00874		 |$LN277@inflateBac|

; 369  :                 strm->msg = (char *)"too many length or distance symbols";

  00874	91000088	 add         x8,x4,PageOffset(|??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@|)
  00878	f9001268	 str         x8,[x19,#0x20]

; 370  :                 state->mode = BAD;

  0087c	b9000aef	 str         w15,[x23,#8]

; 371  :                 break;

  00880	1400007b	 b           |$LN554@inflateBac|
  00884		 |$LN303@inflateBac|

; 490  :             }
; 491  : 
; 492  :             /* get a literal, length, or end-of-block code */
; 493  :             for (;;) {
; 494  :                 here = state->lencode[BITS(state->lenbits)];

  00884	b94072e8	 ldr         w8,[x23,#0x70]
  00888	52800029	 mov         w9,#1
  0088c	f94032ef	 ldr         x15,[x23,#0x60]
  00890	1ac82129	 lsl         w9,w9,w8
  00894	5100052a	 sub         w10,w9,#1
  00898	d3407ec8	 uxtw        x8,w22
  0089c	8a080149	 and         x9,x10,x8
  008a0	b86979e8	 ldr         w8,[x15,x9 lsl #2]
  008a4	53087d09	 lsr         w9,w8,#8
  008a8	b9001be8	 str         w8,[sp,#0x18]

; 495  :                 if ((unsigned)(here.bits) <= bits) break;

  008ac	6b2902bf	 cmp         w21,w9,uxtb #0
  008b0	54000002	 bhs         |$LN382@inflateBac|
  008b4	52800033	 mov         w19,#1
  008b8		 |$LL165@inflateBac|

; 496  :                 PULLBYTE();

  008b8	35000014	 cbnz        w20,|$LN171@inflateBac|
  008bc	910043e1	 add         x1,sp,#0x10
  008c0	aa1b03e0	 mov         x0,x27
  008c4	d63f0340	 blr         x26
  008c8	2a0003f4	 mov         w20,w0
  008cc	34000014	 cbz         w20,|$LN369@inflateBac|
  008d0	f9400bee	 ldr         x14,[sp,#0x10]
  008d4		 |$LN171@inflateBac|
  008d4	384015c8	 ldrb        w8,[x14],#1
  008d8	51000694	 sub         w20,w20,#1
  008dc	1ad52108	 lsl         w8,w8,w21
  008e0	f9000bee	 str         x14,[sp,#0x10]
  008e4	f94032ef	 ldr         x15,[x23,#0x60]
  008e8	0b16010c	 add         w12,w8,w22
  008ec	b94072e8	 ldr         w8,[x23,#0x70]
  008f0	110022b5	 add         w21,w21,#8
  008f4	2a0c03f6	 mov         w22,w12
  008f8	1ac82269	 lsl         w9,w19,w8
  008fc	5100052a	 sub         w10,w9,#1
  00900	8a0c0149	 and         x9,x10,x12
  00904	b86979e8	 ldr         w8,[x15,x9 lsl #2]
  00908	53087d09	 lsr         w9,w8,#8
  0090c	b9001be8	 str         w8,[sp,#0x18]
  00910	6b2902bf	 cmp         w21,w9,uxtb #0
  00914	54000003	 blo         |$LL165@inflateBac|
  00918		 |$LN382@inflateBac|

; 497  :             }
; 498  :             if (here.op && (here.op & 0xf0) == 0) {

  00918	394063ea	 ldrb        w10,[sp,#0x18]
  0091c	3400000a	 cbz         w10,|$LN184@inflateBac|
  00920	721c0d5f	 tst         w10,#0xF0
  00924	54000001	 bne         |$LN184@inflateBac|

; 499  :                 last = here;
; 500  :                 for (;;) {
; 501  :                     here = state->lencode[last.val +

  00928	53083d0d	 ubfx        w13,w8,#8,#8
  0092c	b90023e8	 str         w8,[sp,#0x20]
  00930	0b2801a9	 add         w9,w13,w8,uxtb #0
  00934	5280002a	 mov         w10,#1

; 502  :                             (BITS(last.bits + last.op) >> last.bits)];
; 503  :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  00938	394087f3	 ldrb        w19,[sp,#0x21]
  0093c	1ac92149	 lsl         w9,w10,w9
  00940	5100052a	 sub         w10,w9,#1
  00944	0a16014b	 and         w11,w10,w22
  00948	1acd256c	 lsr         w12,w11,w13
  0094c	0b484189	 add         w9,w12,w8,lsr #0x10
  00950	b86959ea	 ldr         w10,[x15,w9 uxtw #2]
  00954	53087d48	 lsr         w8,w10,#8
  00958	b9001bea	 str         w10,[sp,#0x18]
  0095c	0b2801a9	 add         w9,w13,w8,uxtb #0
  00960	6b15013f	 cmp         w9,w21
  00964	54000009	 bls         |$LN185@inflateBac|
  00968	394083e8	 ldrb        w8,[sp,#0x20]
  0096c	52800029	 mov         w9,#1
  00970	794047f9	 ldrh        w25,[sp,#0x22]
  00974	0b130108	 add         w8,w8,w19
  00978	1ac82128	 lsl         w8,w9,w8
  0097c	51000518	 sub         w24,w8,#1
  00980		 |$LL174@inflateBac|

; 504  :                     PULLBYTE();

  00980	35000014	 cbnz        w20,|$LN180@inflateBac|
  00984	910043e1	 add         x1,sp,#0x10
  00988	aa1b03e0	 mov         x0,x27
  0098c	d63f0340	 blr         x26
  00990	2a0003f4	 mov         w20,w0
  00994	34000014	 cbz         w20,|$LN369@inflateBac|
  00998	f9400bee	 ldr         x14,[sp,#0x10]
  0099c		 |$LN180@inflateBac|
  0099c	384015c8	 ldrb        w8,[x14],#1
  009a0	51000694	 sub         w20,w20,#1
  009a4	1ad52108	 lsl         w8,w8,w21
  009a8	f9000bee	 str         x14,[sp,#0x10]
  009ac	f94032ea	 ldr         x10,[x23,#0x60]
  009b0	0b160116	 add         w22,w8,w22
  009b4	0a160308	 and         w8,w24,w22
  009b8	1ad32509	 lsr         w9,w8,w19
  009bc	0b19012b	 add         w11,w9,w25
  009c0	b86b5948	 ldr         w8,[x10,w11 uxtw #2]
  009c4	110022b5	 add         w21,w21,#8
  009c8	b9001be8	 str         w8,[sp,#0x18]
  009cc	53087d08	 lsr         w8,w8,#8
  009d0	0b280269	 add         w9,w19,w8,uxtb #0
  009d4	6b15013f	 cmp         w9,w21
  009d8	54000008	 bhi         |$LL174@inflateBac|
  009dc	f9401bf8	 ldr         x24,[sp,#0x30]
  009e0		 |$LN185@inflateBac|

; 505  :                 }
; 506  :                 DROPBITS(last.bits);

  009e0	394063ea	 ldrb        w10,[sp,#0x18]
  009e4	1ad326d6	 lsr         w22,w22,w19
  009e8	4b1302b5	 sub         w21,w21,w19
  009ec		 |$LN184@inflateBac|

; 507  :             }
; 508  :             DROPBITS(here.bits);

  009ec	394067e8	 ldrb        w8,[sp,#0x19]
  009f0	1ac826d6	 lsr         w22,w22,w8
  009f4	4b0802b5	 sub         w21,w21,w8

; 509  :             state->length = (unsigned)here.val;

  009f8	794037e8	 ldrh        w8,[sp,#0x1A]
  009fc	b90052e8	 str         w8,[x23,#0x50]

; 510  : 
; 511  :             /* process literal */
; 512  :             if (here.op == 0) {

  00a00	3500000a	 cbnz        w10,|$LN312@inflateBac|

; 513  :                 Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
; 514  :                         "inflate:         literal '%c'\n" :
; 515  :                         "inflate:         literal 0x%02x\n", here.val));
; 516  :                 ROOM();

  00a04	b9401ff9	 ldr         w25,[sp,#0x1C]
  00a08	35000019	 cbnz        w25,|$LN189@inflateBac|
  00a0c	b94036f9	 ldr         w25,[x23,#0x34]
  00a10	f94022f8	 ldr         x24,[x23,#0x40]
  00a14	a943a3e0	 ldp         x0,x8,[sp,#0x38]
  00a18	2a1903e2	 mov         w2,w25
  00a1c	b9003af9	 str         w25,[x23,#0x38]
  00a20	aa1803e1	 mov         x1,x24
  00a24	d63f0100	 blr         x8
  00a28	35000000	 cbnz        w0,|$LN372@inflateBac|
  00a2c		 |$LN189@inflateBac|

; 517  :                 *put++ = (unsigned char)(state->length);

  00a2c	394142e8	 ldrb        w8,[x23,#0x50]

; 518  :                 left--;

  00a30	51000739	 sub         w25,w25,#1

; 519  :                 state->mode = LEN;

  00a34	5287e90c	 mov         w12,#0x3F48

; 520  :                 break;

  00a38	f94017f3	 ldr         x19,[sp,#0x28]
  00a3c	b9001ff9	 str         w25,[sp,#0x1C]
  00a40	5287ea2f	 mov         w15,#0x3F51
  00a44	38001708	 strb        w8,[x24],#1
  00a48	f9001bf8	 str         x24,[sp,#0x30]
  00a4c	b9000aec	 str         w12,[x23,#8]
  00a50	14000008	 b           |$LN552@inflateBac|
  00a54		 |$LN312@inflateBac|

; 521  :             }
; 522  : 
; 523  :             /* process end of block */
; 524  :             if (here.op & 32) {

  00a54	3628000a	 tbz         x10,#5,|$LN315@inflateBac|

; 525  :                 Tracevv((stderr, "inflate:         end of block\n"));
; 526  :                 state->mode = TYPE;

  00a58	5287e7e8	 mov         w8,#0x3F3F
  00a5c	b9000ae8	 str         w8,[x23,#8]
  00a60		 |$LN550@inflateBac|

; 284  :     hold = 0;
; 285  :     bits = 0;
; 286  :     put = state->window;
; 287  :     left = state->wsize;
; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  00a60	b9401ff9	 ldr         w25,[sp,#0x1C]
  00a64		 |$LN527@inflateBac|
  00a64	f94017f3	 ldr         x19,[sp,#0x28]
  00a68		 |$LN553@inflateBac|
  00a68	5287ea2f	 mov         w15,#0x3F51
  00a6c		 |$LN554@inflateBac|
  00a6c	5287e90c	 mov         w12,#0x3F48
  00a70		 |$LN552@inflateBac|
  00a70	9000000b	 adrp        x11,|??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@|
  00a74		 |$LN551@inflateBac|
  00a74	f9400bee	 ldr         x14,[sp,#0x10]
  00a78		 |$LN393@inflateBac|
  00a78	b9400ae8	 ldr         w8,[x23,#8]
  00a7c	5287e7e9	 mov         w9,#0x3F3F
  00a80	4b09010a	 sub         w10,w8,w9
  00a84	7100495f	 cmp         w10,#0x12
  00a88	54000008	 bhi         |$LN341@inflateBac|
  00a8c	f94027ed	 ldr         x13,[sp,#0x48]
  00a90	17fffd86	 b           |$LN557@inflateBac|
  00a94		 |$LN315@inflateBac|

; 527  :                 break;
; 528  :             }
; 529  : 
; 530  :             /* invalid code */
; 531  :             if (here.op & 64) {

  00a94	3630000a	 tbz         x10,#6,|$LN316@inflateBac|

; 532  :                 strm->msg = (char *)"invalid literal/length code";

  00a98	f94017f3	 ldr         x19,[sp,#0x28]
  00a9c	90000008	 adrp        x8,|??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@|
  00aa0	91000108	 add         x8,x8,PageOffset(|??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@|)

; 533  :                 state->mode = BAD;

  00aa4	5287ea2f	 mov         w15,#0x3F51

; 534  :                 break;

  00aa8	b9401ff9	 ldr         w25,[sp,#0x1C]
  00aac	f9001268	 str         x8,[x19,#0x20]
  00ab0	b9000aef	 str         w15,[x23,#8]
  00ab4	17ffffee	 b           |$LN554@inflateBac|
  00ab8		 |$LN316@inflateBac|

; 535  :             }
; 536  : 
; 537  :             /* length code -- get extra bits, if any */
; 538  :             state->extra = (unsigned)(here.op) & 15;

  00ab8	72000d4c	 ands        w12,w10,#0xF
  00abc	b9005aec	 str         w12,[x23,#0x58]

; 539  :             if (state->extra != 0) {

  00ac0	54000000	 beq         |$LN204@inflateBac|

; 540  :                 NEEDBITS(state->extra);

  00ac4	6b0c02bf	 cmp         w21,w12
  00ac8	54000002	 bhs         |$LN192@inflateBac|
  00acc	f9400be9	 ldr         x9,[sp,#0x10]
  00ad0		 |$LL195@inflateBac|
  00ad0	35000014	 cbnz        w20,|$LN200@inflateBac|
  00ad4	910043e1	 add         x1,sp,#0x10
  00ad8	aa1b03e0	 mov         x0,x27
  00adc	d63f0340	 blr         x26
  00ae0	2a0003f4	 mov         w20,w0
  00ae4	34000014	 cbz         w20,|$LN369@inflateBac|
  00ae8	f9400be9	 ldr         x9,[sp,#0x10]
  00aec		 |$LN200@inflateBac|
  00aec	38401528	 ldrb        w8,[x9],#1
  00af0	51000694	 sub         w20,w20,#1
  00af4	f9000be9	 str         x9,[sp,#0x10]
  00af8	b9405aec	 ldr         w12,[x23,#0x58]
  00afc	1ad52108	 lsl         w8,w8,w21
  00b00	110022b5	 add         w21,w21,#8
  00b04	0b160116	 add         w22,w8,w22
  00b08	6b0c02bf	 cmp         w21,w12
  00b0c	54000003	 blo         |$LL195@inflateBac|
  00b10		 |$LN192@inflateBac|

; 541  :                 state->length += BITS(state->extra);

  00b10	52800028	 mov         w8,#1
  00b14	b94052ea	 ldr         w10,[x23,#0x50]
  00b18	1acc2108	 lsl         w8,w8,w12
  00b1c	51000509	 sub         w9,w8,#1
  00b20	0a16012b	 and         w11,w9,w22
  00b24	0b0a0168	 add         w8,w11,w10
  00b28	b90052e8	 str         w8,[x23,#0x50]

; 542  :                 DROPBITS(state->extra);

  00b2c	1acc26d6	 lsr         w22,w22,w12
  00b30	4b0c02b5	 sub         w21,w21,w12
  00b34		 |$LN204@inflateBac|

; 543  :             }
; 544  :             Tracevv((stderr, "inflate:         length %u\n", state->length));
; 545  : 
; 546  :             /* get distance code */
; 547  :             for (;;) {
; 548  :                 here = state->distcode[BITS(state->distbits)];

  00b34	b94076e8	 ldr         w8,[x23,#0x74]
  00b38	52800029	 mov         w9,#1
  00b3c	f94036ef	 ldr         x15,[x23,#0x68]

; 549  :                 if ((unsigned)(here.bits) <= bits) break;

  00b40	f9400bee	 ldr         x14,[sp,#0x10]
  00b44	1ac82129	 lsl         w9,w9,w8
  00b48	5100052a	 sub         w10,w9,#1
  00b4c	d3407ec8	 uxtw        x8,w22
  00b50	8a080149	 and         x9,x10,x8
  00b54	b86979e8	 ldr         w8,[x15,x9 lsl #2]
  00b58	53087d09	 lsr         w9,w8,#8
  00b5c	b9001be8	 str         w8,[sp,#0x18]
  00b60	6b2902bf	 cmp         w21,w9,uxtb #0
  00b64	54000002	 bhs         |$LN387@inflateBac|
  00b68	52800033	 mov         w19,#1
  00b6c		 |$LL206@inflateBac|

; 550  :                 PULLBYTE();

  00b6c	35000014	 cbnz        w20,|$LN212@inflateBac|
  00b70	910043e1	 add         x1,sp,#0x10
  00b74	aa1b03e0	 mov         x0,x27
  00b78	d63f0340	 blr         x26
  00b7c	2a0003f4	 mov         w20,w0
  00b80	34000014	 cbz         w20,|$LN369@inflateBac|
  00b84	f9400bee	 ldr         x14,[sp,#0x10]
  00b88		 |$LN212@inflateBac|
  00b88	384015c8	 ldrb        w8,[x14],#1
  00b8c	51000694	 sub         w20,w20,#1
  00b90	1ad52108	 lsl         w8,w8,w21
  00b94	f9000bee	 str         x14,[sp,#0x10]
  00b98	f94036ef	 ldr         x15,[x23,#0x68]
  00b9c	0b16010c	 add         w12,w8,w22
  00ba0	b94076e8	 ldr         w8,[x23,#0x74]
  00ba4	110022b5	 add         w21,w21,#8
  00ba8	2a0c03f6	 mov         w22,w12
  00bac	1ac82269	 lsl         w9,w19,w8
  00bb0	5100052a	 sub         w10,w9,#1
  00bb4	8a0c0149	 and         x9,x10,x12
  00bb8	b86979e8	 ldr         w8,[x15,x9 lsl #2]
  00bbc	53087d09	 lsr         w9,w8,#8
  00bc0	b9001be8	 str         w8,[sp,#0x18]
  00bc4	6b2902bf	 cmp         w21,w9,uxtb #0
  00bc8	54000003	 blo         |$LL206@inflateBac|
  00bcc		 |$LN387@inflateBac|

; 551  :             }
; 552  :             if ((here.op & 0xf0) == 0) {

  00bcc	394063ea	 ldrb        w10,[sp,#0x18]
  00bd0	721c0d5f	 tst         w10,#0xF0
  00bd4	54000001	 bne         |$LN225@inflateBac|

; 553  :                 last = here;
; 554  :                 for (;;) {
; 555  :                     here = state->distcode[last.val +

  00bd8	53083d0d	 ubfx        w13,w8,#8,#8
  00bdc	b90023e8	 str         w8,[sp,#0x20]
  00be0	0b2801a9	 add         w9,w13,w8,uxtb #0
  00be4	5280002a	 mov         w10,#1

; 556  :                             (BITS(last.bits + last.op) >> last.bits)];
; 557  :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  00be8	394087f3	 ldrb        w19,[sp,#0x21]
  00bec	1ac92149	 lsl         w9,w10,w9
  00bf0	5100052a	 sub         w10,w9,#1
  00bf4	0a16014b	 and         w11,w10,w22
  00bf8	1acd256c	 lsr         w12,w11,w13
  00bfc	0b484189	 add         w9,w12,w8,lsr #0x10
  00c00	b86959ea	 ldr         w10,[x15,w9 uxtw #2]
  00c04	53087d48	 lsr         w8,w10,#8
  00c08	b9001bea	 str         w10,[sp,#0x18]
  00c0c	0b2801a9	 add         w9,w13,w8,uxtb #0
  00c10	6b15013f	 cmp         w9,w21
  00c14	54000009	 bls         |$LN226@inflateBac|
  00c18	394083e8	 ldrb        w8,[sp,#0x20]
  00c1c	52800029	 mov         w9,#1
  00c20	794047f9	 ldrh        w25,[sp,#0x22]
  00c24	0b130108	 add         w8,w8,w19
  00c28	1ac82128	 lsl         w8,w9,w8
  00c2c	51000518	 sub         w24,w8,#1
  00c30		 |$LL215@inflateBac|

; 558  :                     PULLBYTE();

  00c30	35000014	 cbnz        w20,|$LN221@inflateBac|
  00c34	910043e1	 add         x1,sp,#0x10
  00c38	aa1b03e0	 mov         x0,x27
  00c3c	d63f0340	 blr         x26
  00c40	2a0003f4	 mov         w20,w0
  00c44	34000014	 cbz         w20,|$LN369@inflateBac|
  00c48	f9400bee	 ldr         x14,[sp,#0x10]
  00c4c		 |$LN221@inflateBac|
  00c4c	384015c8	 ldrb        w8,[x14],#1
  00c50	51000694	 sub         w20,w20,#1
  00c54	1ad52108	 lsl         w8,w8,w21
  00c58	f9000bee	 str         x14,[sp,#0x10]
  00c5c	f94036ea	 ldr         x10,[x23,#0x68]
  00c60	0b160116	 add         w22,w8,w22
  00c64	0a160308	 and         w8,w24,w22
  00c68	1ad32509	 lsr         w9,w8,w19
  00c6c	0b19012b	 add         w11,w9,w25
  00c70	b86b5948	 ldr         w8,[x10,w11 uxtw #2]
  00c74	110022b5	 add         w21,w21,#8
  00c78	b9001be8	 str         w8,[sp,#0x18]
  00c7c	53087d08	 lsr         w8,w8,#8
  00c80	0b280269	 add         w9,w19,w8,uxtb #0
  00c84	6b15013f	 cmp         w9,w21
  00c88	54000008	 bhi         |$LL215@inflateBac|
  00c8c		 |$LN226@inflateBac|

; 559  :                 }
; 560  :                 DROPBITS(last.bits);

  00c8c	394063ea	 ldrb        w10,[sp,#0x18]
  00c90	1ad326d6	 lsr         w22,w22,w19
  00c94	4b1302b5	 sub         w21,w21,w19
  00c98		 |$LN225@inflateBac|

; 561  :             }
; 562  :             DROPBITS(here.bits);

  00c98	394067e8	 ldrb        w8,[sp,#0x19]
  00c9c	1ac826d6	 lsr         w22,w22,w8
  00ca0	4b0802b5	 sub         w21,w21,w8

; 563  :             if (here.op & 64) {

  00ca4	3630000a	 tbz         x10,#6,|$LN327@inflateBac|

; 564  :                 strm->msg = (char *)"invalid distance code";

  00ca8	a942e3f3	 ldp         x19,x24,[sp,#0x28]
  00cac	90000008	 adrp        x8,|??_C@_0BG@LBKINIKP@invalid?5distance?5code@|
  00cb0	91000108	 add         x8,x8,PageOffset(|??_C@_0BG@LBKINIKP@invalid?5distance?5code@|)

; 565  :                 state->mode = BAD;

  00cb4	5287ea2f	 mov         w15,#0x3F51

; 566  :                 break;

  00cb8	b9401ff9	 ldr         w25,[sp,#0x1C]
  00cbc	f9001268	 str         x8,[x19,#0x20]
  00cc0	b9000aef	 str         w15,[x23,#8]
  00cc4	17ffff6a	 b           |$LN554@inflateBac|
  00cc8		 |$LN327@inflateBac|

; 567  :             }
; 568  :             state->offset = (unsigned)here.val;

  00cc8	794037eb	 ldrh        w11,[sp,#0x1A]

; 569  : 
; 570  :             /* get distance extra bits, if any */
; 571  :             state->extra = (unsigned)(here.op) & 15;

  00ccc	72000d4c	 ands        w12,w10,#0xF
  00cd0	290ab2eb	 stp         w11,w12,[x23,#0x54]

; 572  :             if (state->extra != 0) {

  00cd4	54000000	 beq         |$LN242@inflateBac|

; 573  :                 NEEDBITS(state->extra);

  00cd8	6b0c02bf	 cmp         w21,w12
  00cdc	54000002	 bhs         |$LN230@inflateBac|
  00ce0	f9400be9	 ldr         x9,[sp,#0x10]
  00ce4		 |$LL233@inflateBac|
  00ce4	35000014	 cbnz        w20,|$LN238@inflateBac|
  00ce8	910043e1	 add         x1,sp,#0x10
  00cec	aa1b03e0	 mov         x0,x27
  00cf0	d63f0340	 blr         x26
  00cf4	2a0003f4	 mov         w20,w0
  00cf8	34000014	 cbz         w20,|$LN369@inflateBac|
  00cfc	f9400be9	 ldr         x9,[sp,#0x10]
  00d00		 |$LN238@inflateBac|
  00d00	38401528	 ldrb        w8,[x9],#1
  00d04	51000694	 sub         w20,w20,#1
  00d08	f9000be9	 str         x9,[sp,#0x10]
  00d0c	b9405aec	 ldr         w12,[x23,#0x58]
  00d10	1ad52108	 lsl         w8,w8,w21
  00d14	110022b5	 add         w21,w21,#8
  00d18	0b160116	 add         w22,w8,w22
  00d1c	6b0c02bf	 cmp         w21,w12
  00d20	54000003	 blo         |$LL233@inflateBac|
  00d24		 |$LN230@inflateBac|

; 574  :                 state->offset += BITS(state->extra);

  00d24	52800028	 mov         w8,#1
  00d28	b94056ea	 ldr         w10,[x23,#0x54]
  00d2c	1acc2108	 lsl         w8,w8,w12
  00d30	51000509	 sub         w9,w8,#1
  00d34	0a16012b	 and         w11,w9,w22
  00d38	0b0a016b	 add         w11,w11,w10
  00d3c	b90056eb	 str         w11,[x23,#0x54]

; 575  :                 DROPBITS(state->extra);

  00d40	1acc26d6	 lsr         w22,w22,w12
  00d44	4b0c02b5	 sub         w21,w21,w12
  00d48		 |$LN242@inflateBac|

; 576  :             }
; 577  :             if (state->offset > state->wsize - (state->whave < state->wsize ?

  00d48	2946a2ea	 ldp         w10,w8,[x23,#0x34]
  00d4c	b9401ff9	 ldr         w25,[sp,#0x1C]
  00d50	f9401bf8	 ldr         x24,[sp,#0x30]
  00d54	6b0a011f	 cmp         w8,w10
  00d58	1a9f3329	 csello      w9,w25,wzr
  00d5c	4b09014a	 sub         w10,w10,w9
  00d60	6b0a017f	 cmp         w11,w10
  00d64	54000009	 bls         |$LL246@inflateBac|

; 578  :                                                 left : 0)) {
; 579  :                 strm->msg = (char *)"invalid distance too far back";

  00d68	f94017f3	 ldr         x19,[sp,#0x28]
  00d6c	90000008	 adrp        x8,|??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@|
  00d70	91000108	 add         x8,x8,PageOffset(|??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@|)

; 580  :                 state->mode = BAD;

  00d74	5287ea2f	 mov         w15,#0x3F51
  00d78	f9001268	 str         x8,[x19,#0x20]
  00d7c	b9000aef	 str         w15,[x23,#8]

; 581  :                 break;

  00d80	17ffff3b	 b           |$LN554@inflateBac|
  00d84		 |$LL246@inflateBac|

; 582  :             }
; 583  :             Tracevv((stderr, "inflate:         distance %u\n", state->offset));
; 584  : 
; 585  :             /* copy match from window to output */
; 586  :             do {
; 587  :                 ROOM();

  00d84	35000019	 cbnz        w25,|$LN247@inflateBac|
  00d88	b94036f9	 ldr         w25,[x23,#0x34]
  00d8c	f94022f8	 ldr         x24,[x23,#0x40]
  00d90	a943a3e0	 ldp         x0,x8,[sp,#0x38]
  00d94	2a1903e2	 mov         w2,w25
  00d98	b9003af9	 str         w25,[x23,#0x38]
  00d9c	aa1803e1	 mov         x1,x24
  00da0	d63f0100	 blr         x8
  00da4	35000000	 cbnz        w0,|$LN372@inflateBac|
  00da8		 |$LN247@inflateBac|

; 588  :                 copy = state->wsize - state->offset;

  00da8	b94056ea	 ldr         w10,[x23,#0x54]
  00dac	b94036e8	 ldr         w8,[x23,#0x34]
  00db0	4b0a0109	 sub         w9,w8,w10

; 589  :                 if (copy < left) {

  00db4	6b19013f	 cmp         w9,w25
  00db8	54000002	 bhs         |$LN334@inflateBac|

; 590  :                     from = put + copy;

  00dbc	8b29430b	 add         x11,x24,w9,uxtw #0

; 591  :                     copy = left - copy;

  00dc0	4b09032a	 sub         w10,w25,w9

; 592  :                 }

  00dc4	14000003	 b           |$LN335@inflateBac|
  00dc8		 |$LN334@inflateBac|

; 593  :                 else {
; 594  :                     from = put - state->offset;

  00dc8	cb2a430b	 sub         x11,x24,w10,uxtw #0

; 595  :                     copy = left;

  00dcc	2a1903ea	 mov         w10,w25
  00dd0		 |$LN335@inflateBac|

; 596  :                 }
; 597  :                 if (copy > state->length) copy = state->length;

  00dd0	b94052e8	 ldr         w8,[x23,#0x50]

; 598  :                 state->length -= copy;

  00dd4	6b08015f	 cmp         w10,w8
  00dd8	1a889149	 csells      w9,w10,w8
  00ddc	4b090108	 sub         w8,w8,w9

; 599  :                 left -= copy;

  00de0	4b090339	 sub         w25,w25,w9
  00de4	b90052e8	 str         w8,[x23,#0x50]
  00de8	b9001ff9	 str         w25,[sp,#0x1C]
  00dec	cb18016a	 sub         x10,x11,x24
  00df0		 |$LL252@inflateBac|

; 600  :                 do {
; 601  :                     *put++ = *from++;

  00df0	38786948	 ldrb        w8,[x10,x24]

; 602  :                 } while (--copy);

  00df4	51000529	 sub         w9,w9,#1
  00df8	38001708	 strb        w8,[x24],#1
  00dfc	35000009	 cbnz        w9,|$LL252@inflateBac|

; 603  :             } while (state->length != 0);

  00e00	b94052e8	 ldr         w8,[x23,#0x50]
  00e04	f9001bf8	 str         x24,[sp,#0x30]
  00e08	35000008	 cbnz        w8,|$LL246@inflateBac|

; 443  :                 }
; 444  :             }
; 445  : 
; 446  :             /* handle error breaks in while */
; 447  :             if (state->mode == BAD) break;

  00e0c	17ffff16	 b           |$LN527@inflateBac|
  00e10		 |$LN369@inflateBac|

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00e10	f94017e8	 ldr         x8,[sp,#0x28]
  00e14	d280000e	 mov         x14,#0
  00e18	12800093	 mov         w19,#-5

; 627  :     strm->avail_in = have;
; 628  :     return ret;

  00e1c	2a1303e0	 mov         w0,w19
  00e20	f900010e	 str         x14,[x8]
  00e24	b9000914	 str         w20,[x8,#8]
  00e28	14000025	 b           |$LN1@inflateBac|
  00e2c		 |$LN372@inflateBac|

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00e2c	f94017e8	 ldr         x8,[sp,#0x28]
  00e30	12800093	 mov         w19,#-5
  00e34	f9400bee	 ldr         x14,[sp,#0x10]

; 627  :     strm->avail_in = have;
; 628  :     return ret;

  00e38	2a1303e0	 mov         w0,w19
  00e3c	b9000914	 str         w20,[x8,#8]
  00e40	f900010e	 str         x14,[x8]
  00e44	1400001e	 b           |$LN1@inflateBac|
  00e48		 |$LN337@inflateBac|

; 604  :             break;
; 605  : 
; 606  :         case DONE:
; 607  :             /* inflate stream terminated properly -- write leftover output */
; 608  :             ret = Z_STREAM_END;
; 609  :             if (left < state->wsize) {

  00e48	b94036e8	 ldr         w8,[x23,#0x34]
  00e4c	52800033	 mov         w19,#1
  00e50	6b08033f	 cmp         w25,w8
  00e54	54000002	 bhs         |$inf_leave$587|

; 610  :                 if (out(out_desc, state->window, state->wsize - left))

  00e58	4b190102	 sub         w2,w8,w25
  00e5c	f94022e1	 ldr         x1,[x23,#0x40]
  00e60	a943a3e0	 ldp         x0,x8,[sp,#0x38]
  00e64	d63f0100	 blr         x8
  00e68	f9400bee	 ldr         x14,[sp,#0x10]
  00e6c	34000000	 cbz         w0,|$inf_leave$587|

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00e70	f94017e8	 ldr         x8,[sp,#0x28]
  00e74	12800093	 mov         w19,#-5

; 627  :     strm->avail_in = have;
; 628  :     return ret;

  00e78	2a1303e0	 mov         w0,w19
  00e7c	f900010e	 str         x14,[x8]
  00e80	b9000914	 str         w20,[x8,#8]
  00e84	1400000e	 b           |$LN1@inflateBac|
  00e88		 |$LN340@inflateBac|

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00e88	f94017e8	 ldr         x8,[sp,#0x28]
  00e8c	12800053	 mov         w19,#-3

; 627  :     strm->avail_in = have;
; 628  :     return ret;

  00e90	2a1303e0	 mov         w0,w19
  00e94	f900010e	 str         x14,[x8]
  00e98	b9000914	 str         w20,[x8,#8]
  00e9c	14000008	 b           |$LN1@inflateBac|
  00ea0		 |$LN341@inflateBac|

; 611  :                     ret = Z_BUF_ERROR;
; 612  :             }
; 613  :             goto inf_leave;
; 614  : 
; 615  :         case BAD:
; 616  :             ret = Z_DATA_ERROR;
; 617  :             goto inf_leave;
; 618  : 
; 619  :         default:                /* can't happen, but makes compilers happy */
; 620  :             ret = Z_STREAM_ERROR;

  00ea0	12800033	 mov         w19,#-2
  00ea4		 |$inf_leave$587|

; 621  :             goto inf_leave;
; 622  :         }
; 623  : 
; 624  :     /* Return unused input */
; 625  :   inf_leave:
; 626  :     strm->next_in = next;

  00ea4	f94017e8	 ldr         x8,[sp,#0x28]

; 627  :     strm->avail_in = have;
; 628  :     return ret;

  00ea8	2a1303e0	 mov         w0,w19
  00eac	f900010e	 str         x14,[x8]
  00eb0	b9000914	 str         w20,[x8,#8]
  00eb4	14000002	 b           |$LN1@inflateBac|
  00eb8		 |$LN254@inflateBac|

; 274  :         return Z_STREAM_ERROR;

  00eb8	12800020	 mov         w0,#-2
  00ebc		 |$LN1@inflateBac|
  00ebc	a8c57bfd	 ldp         fp,lr,[sp],#0x50
  00ec0	f94023fb	 ldr         x27,[sp,#0x40]
  00ec4	a9436bf9	 ldp         x25,x26,[sp,#0x30]
  00ec8	a94263f7	 ldp         x23,x24,[sp,#0x20]
  00ecc	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00ed0	a8c553f3	 ldp         x19,x20,[sp],#0x50
  00ed4	d65f03c0	 ret
  00ed8		 |__swt|
  00ed8		 |$LN561@inflateBac|

; 284  :     hold = 0;
; 285  :     bits = 0;
; 286  :     put = state->window;
; 287  :     left = state->wsize;
; 288  : 
; 289  :     /* Inflate until end of block marked as last */
; 290  :     for (;;)
; 291  :         switch (state->mode) {

  00ed8	fffffe33	 DCD         0xfffffe33
  00edc		 |$LN562@inflateBac|
  00edc	000001a7	 DCD         0x1a7
  00ee0		 |$LN563@inflateBac|
  00ee0	fffffe6f	 DCD         0xfffffe6f
  00ee4		 |$LN564@inflateBac|
  00ee4	000001a7	 DCD         0x1a7
  00ee8		 |$LN565@inflateBac|
  00ee8	000001a7	 DCD         0x1a7
  00eec		 |$LN566@inflateBac|
  00eec	fffffeba	 DCD         0xfffffeba
  00ef0		 |$LN567@inflateBac|
  00ef0	000001a7	 DCD         0x1a7
  00ef4		 |$LN568@inflateBac|
  00ef4	000001a7	 DCD         0x1a7
  00ef8		 |$LN569@inflateBac|
  00ef8	000001a7	 DCD         0x1a7
  00efc		 |$LN570@inflateBac|
  00efc	00000000	 DCD         0x0
  00f00		 |$LN571@inflateBac|
  00f00	000001a7	 DCD         0x1a7
  00f04		 |$LN572@inflateBac|
  00f04	000001a7	 DCD         0x1a7
  00f08		 |$LN573@inflateBac|
  00f08	000001a7	 DCD         0x1a7
  00f0c		 |$LN574@inflateBac|
  00f0c	000001a7	 DCD         0x1a7
  00f10		 |$LN575@inflateBac|
  00f10	000001a7	 DCD         0x1a7
  00f14		 |$LN576@inflateBac|
  00f14	000001a7	 DCD         0x1a7
  00f18		 |$LN577@inflateBac|
  00f18	000001a7	 DCD         0x1a7
  00f1c		 |$LN578@inflateBac|
  00f1c	00000191	 DCD         0x191
  00f20		 |$LN579@inflateBac|
  00f20	000001a1	 DCD         0x1a1
  00f24		 |__swt|
  00f24		 |$LN582@inflateBac|

; 302  :             switch (BITS(2)) {

  00f24	fffffff6	 DCD         0xfffffff6
  00f28		 |$LN583@inflateBac|
  00f28	fffffffa	 DCD         0xfffffffa
  00f2c		 |$LN584@inflateBac|
  00f2c	00000000	 DCD         0x0
  00f30		 |$LN585@inflateBac|
  00f30	00000004	 DCD         0x4

			 ENDP  ; |inflateBack|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\infback.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflateBackEnd| PROC

; 633  : {

  00000		 |$LN6|
  00000	f81f0ff3	 str         x19,[sp,#-0x10]!
  00004	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00008	910003fd	 mov         fp,sp
  0000c	aa0003f3	 mov         x19,x0

; 634  :     if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)

  00010	b4000013	 cbz         x19,|$LN3@inflateBac|
  00014	f9401661	 ldr         x1,[x19,#0x28]
  00018	b4000001	 cbz         x1,|$LN3@inflateBac|
  0001c	f9401e68	 ldr         x8,[x19,#0x38]
  00020	b4000008	 cbz         x8,|$LN3@inflateBac|

; 636  :     ZFREE(strm, strm->state);

  00024	f9402260	 ldr         x0,[x19,#0x40]
  00028	d63f0100	 blr         x8

; 637  :     strm->state = Z_NULL;

  0002c	f900167f	 str         xzr,[x19,#0x28]

; 638  :     Tracev((stderr, "inflate: end\n"));
; 639  :     return Z_OK;

  00030	52800000	 mov         w0,#0
  00034	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00038	f84107f3	 ldr         x19,[sp],#0x10
  0003c	d65f03c0	 ret
  00040		 |$LN3@inflateBac|

; 635  :         return Z_STREAM_ERROR;

  00040	12800020	 mov         w0,#-2
  00044	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00048	f84107f3	 ldr         x19,[sp],#0x10
  0004c	d65f03c0	 ret

			 ENDP  ; |inflateBackEnd|

	END
