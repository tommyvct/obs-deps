; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TTL	c:\users\ws103\desktop\zlib-1.2.11\trees.c
	ARM64

	AREA	|.drectve|, DRECTVE

	EXPORT	|_length_code| [ DATA ]
	EXPORT	|_dist_code| [ DATA ]
|_length_code| DCB 0x0
	DCB	0x1
	DCB	0x2
	DCB	0x3
	DCB	0x4
	DCB	0x5
	DCB	0x6
	DCB	0x7
	DCB	0x8
	DCB	0x8
	DCB	0x9
	DCB	0x9
	DCB	0xa
	DCB	0xa
	DCB	0xb
	DCB	0xb
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x10
	DCB	0x11
	DCB	0x11
	DCB	0x11
	DCB	0x11
	DCB	0x11
	DCB	0x11
	DCB	0x11
	DCB	0x11
	DCB	0x12
	DCB	0x12
	DCB	0x12
	DCB	0x12
	DCB	0x12
	DCB	0x12
	DCB	0x12
	DCB	0x12
	DCB	0x13
	DCB	0x13
	DCB	0x13
	DCB	0x13
	DCB	0x13
	DCB	0x13
	DCB	0x13
	DCB	0x13
	DCB	0x14
	DCB	0x14
	DCB	0x14
	DCB	0x14
	DCB	0x14
	DCB	0x14
	DCB	0x14
	DCB	0x14
	DCB	0x14
	DCB	0x14
	DCB	0x14
	DCB	0x14
	DCB	0x14
	DCB	0x14
	DCB	0x14
	DCB	0x14
	DCB	0x15
	DCB	0x15
	DCB	0x15
	DCB	0x15
	DCB	0x15
	DCB	0x15
	DCB	0x15
	DCB	0x15
	DCB	0x15
	DCB	0x15
	DCB	0x15
	DCB	0x15
	DCB	0x15
	DCB	0x15
	DCB	0x15
	DCB	0x15
	DCB	0x16
	DCB	0x16
	DCB	0x16
	DCB	0x16
	DCB	0x16
	DCB	0x16
	DCB	0x16
	DCB	0x16
	DCB	0x16
	DCB	0x16
	DCB	0x16
	DCB	0x16
	DCB	0x16
	DCB	0x16
	DCB	0x16
	DCB	0x16
	DCB	0x17
	DCB	0x17
	DCB	0x17
	DCB	0x17
	DCB	0x17
	DCB	0x17
	DCB	0x17
	DCB	0x17
	DCB	0x17
	DCB	0x17
	DCB	0x17
	DCB	0x17
	DCB	0x17
	DCB	0x17
	DCB	0x17
	DCB	0x17
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1c
|_dist_code| DCB 0x0
	DCB	0x1
	DCB	0x2
	DCB	0x3
	DCB	0x4
	DCB	0x4
	DCB	0x5
	DCB	0x5
	DCB	0x6
	DCB	0x6
	DCB	0x6
	DCB	0x6
	DCB	0x7
	DCB	0x7
	DCB	0x7
	DCB	0x7
	DCB	0x8
	DCB	0x8
	DCB	0x8
	DCB	0x8
	DCB	0x8
	DCB	0x8
	DCB	0x8
	DCB	0x8
	DCB	0x9
	DCB	0x9
	DCB	0x9
	DCB	0x9
	DCB	0x9
	DCB	0x9
	DCB	0x9
	DCB	0x9
	DCB	0xa
	DCB	0xa
	DCB	0xa
	DCB	0xa
	DCB	0xa
	DCB	0xa
	DCB	0xa
	DCB	0xa
	DCB	0xa
	DCB	0xa
	DCB	0xa
	DCB	0xa
	DCB	0xa
	DCB	0xa
	DCB	0xa
	DCB	0xa
	DCB	0xb
	DCB	0xb
	DCB	0xb
	DCB	0xb
	DCB	0xb
	DCB	0xb
	DCB	0xb
	DCB	0xb
	DCB	0xb
	DCB	0xb
	DCB	0xb
	DCB	0xb
	DCB	0xb
	DCB	0xb
	DCB	0xb
	DCB	0xb
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xc
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xd
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xe
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0xf
	DCB	0x0
	DCB	0x0
	DCB	0x10
	DCB	0x11
	DCB	0x12
	DCB	0x12
	DCB	0x13
	DCB	0x13
	DCB	0x14
	DCB	0x14
	DCB	0x14
	DCB	0x14
	DCB	0x15
	DCB	0x15
	DCB	0x15
	DCB	0x15
	DCB	0x16
	DCB	0x16
	DCB	0x16
	DCB	0x16
	DCB	0x16
	DCB	0x16
	DCB	0x16
	DCB	0x16
	DCB	0x17
	DCB	0x17
	DCB	0x17
	DCB	0x17
	DCB	0x17
	DCB	0x17
	DCB	0x17
	DCB	0x17
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x18
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x19
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1a
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1b
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1c
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
	DCB	0x1d
|static_dtree| DCW 0x0
	DCW	0x5
	DCW	0x10
	DCW	0x5
	DCW	0x8
	DCW	0x5
	DCW	0x18
	DCW	0x5
	DCW	0x4
	DCW	0x5
	DCW	0x14
	DCW	0x5
	DCW	0xc
	DCW	0x5
	DCW	0x1c
	DCW	0x5
	DCW	0x2
	DCW	0x5
	DCW	0x12
	DCW	0x5
	DCW	0xa
	DCW	0x5
	DCW	0x1a
	DCW	0x5
	DCW	0x6
	DCW	0x5
	DCW	0x16
	DCW	0x5
	DCW	0xe
	DCW	0x5
	DCW	0x1e
	DCW	0x5
	DCW	0x1
	DCW	0x5
	DCW	0x11
	DCW	0x5
	DCW	0x9
	DCW	0x5
	DCW	0x19
	DCW	0x5
	DCW	0x5
	DCW	0x5
	DCW	0x15
	DCW	0x5
	DCW	0xd
	DCW	0x5
	DCW	0x1d
	DCW	0x5
	DCW	0x3
	DCW	0x5
	DCW	0x13
	DCW	0x5
	DCW	0xb
	DCW	0x5
	DCW	0x1b
	DCW	0x5
	DCW	0x7
	DCW	0x5
	DCW	0x17
	DCW	0x5
	%	8
|extra_blbits| DCD 0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x2
	DCD	0x3
	DCD	0x7
	%	4
|extra_lbits| DCD 0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x1
	DCD	0x1
	DCD	0x1
	DCD	0x1
	DCD	0x2
	DCD	0x2
	DCD	0x2
	DCD	0x2
	DCD	0x3
	DCD	0x3
	DCD	0x3
	DCD	0x3
	DCD	0x4
	DCD	0x4
	DCD	0x4
	DCD	0x4
	DCD	0x5
	DCD	0x5
	DCD	0x5
	DCD	0x5
	DCD	0x0
	%	12
|base_dist| DCD	0x0
	DCD	0x1
	DCD	0x2
	DCD	0x3
	DCD	0x4
	DCD	0x6
	DCD	0x8
	DCD	0xc
	DCD	0x10
	DCD	0x18
	DCD	0x20
	DCD	0x30
	DCD	0x40
	DCD	0x60
	DCD	0x80
	DCD	0xc0
	DCD	0x100
	DCD	0x180
	DCD	0x200
	DCD	0x300
	DCD	0x400
	DCD	0x600
	DCD	0x800
	DCD	0xc00
	DCD	0x1000
	DCD	0x1800
	DCD	0x2000
	DCD	0x3000
	DCD	0x4000
	DCD	0x6000
	%	8
|base_length| DCD 0x0
	DCD	0x1
	DCD	0x2
	DCD	0x3
	DCD	0x4
	DCD	0x5
	DCD	0x6
	DCD	0x7
	DCD	0x8
	DCD	0xa
	DCD	0xc
	DCD	0xe
	DCD	0x10
	DCD	0x14
	DCD	0x18
	DCD	0x1c
	DCD	0x20
	DCD	0x28
	DCD	0x30
	DCD	0x38
	DCD	0x40
	DCD	0x50
	DCD	0x60
	DCD	0x70
	DCD	0x80
	DCD	0xa0
	DCD	0xc0
	DCD	0xe0
	DCD	0x0
	%	4
|static_l_desc| DCQ |static_ltree|, 0
	DCQ	|extra_lbits|, 0
	DCD	0x101
	DCD	0x11e
	DCD	0xf
	%	4
|static_bl_desc| DCQ 0x0, 0x0				;  = 0x0000000000000000
	DCQ	|extra_blbits|, 0
	DCD	0x0
	DCD	0x13
	DCD	0x7
	%	4
	%	8
|extra_dbits| DCD 0x0
	DCD	0x0
	DCD	0x0
	DCD	0x0
	DCD	0x1
	DCD	0x1
	DCD	0x2
	DCD	0x2
	DCD	0x3
	DCD	0x3
	DCD	0x4
	DCD	0x4
	DCD	0x5
	DCD	0x5
	DCD	0x6
	DCD	0x6
	DCD	0x7
	DCD	0x7
	DCD	0x8
	DCD	0x8
	DCD	0x9
	DCD	0x9
	DCD	0xa
	DCD	0xa
	DCD	0xb
	DCD	0xb
	DCD	0xc
	DCD	0xc
	DCD	0xd
	DCD	0xd
	%	8
|static_ltree| DCW 0xc
	DCW	0x8
	DCW	0x8c
	DCW	0x8
	DCW	0x4c
	DCW	0x8
	DCW	0xcc
	DCW	0x8
	DCW	0x2c
	DCW	0x8
	DCW	0xac
	DCW	0x8
	DCW	0x6c
	DCW	0x8
	DCW	0xec
	DCW	0x8
	DCW	0x1c
	DCW	0x8
	DCW	0x9c
	DCW	0x8
	DCW	0x5c
	DCW	0x8
	DCW	0xdc
	DCW	0x8
	DCW	0x3c
	DCW	0x8
	DCW	0xbc
	DCW	0x8
	DCW	0x7c
	DCW	0x8
	DCW	0xfc
	DCW	0x8
	DCW	0x2
	DCW	0x8
	DCW	0x82
	DCW	0x8
	DCW	0x42
	DCW	0x8
	DCW	0xc2
	DCW	0x8
	DCW	0x22
	DCW	0x8
	DCW	0xa2
	DCW	0x8
	DCW	0x62
	DCW	0x8
	DCW	0xe2
	DCW	0x8
	DCW	0x12
	DCW	0x8
	DCW	0x92
	DCW	0x8
	DCW	0x52
	DCW	0x8
	DCW	0xd2
	DCW	0x8
	DCW	0x32
	DCW	0x8
	DCW	0xb2
	DCW	0x8
	DCW	0x72
	DCW	0x8
	DCW	0xf2
	DCW	0x8
	DCW	0xa
	DCW	0x8
	DCW	0x8a
	DCW	0x8
	DCW	0x4a
	DCW	0x8
	DCW	0xca
	DCW	0x8
	DCW	0x2a
	DCW	0x8
	DCW	0xaa
	DCW	0x8
	DCW	0x6a
	DCW	0x8
	DCW	0xea
	DCW	0x8
	DCW	0x1a
	DCW	0x8
	DCW	0x9a
	DCW	0x8
	DCW	0x5a
	DCW	0x8
	DCW	0xda
	DCW	0x8
	DCW	0x3a
	DCW	0x8
	DCW	0xba
	DCW	0x8
	DCW	0x7a
	DCW	0x8
	DCW	0xfa
	DCW	0x8
	DCW	0x6
	DCW	0x8
	DCW	0x86
	DCW	0x8
	DCW	0x46
	DCW	0x8
	DCW	0xc6
	DCW	0x8
	DCW	0x26
	DCW	0x8
	DCW	0xa6
	DCW	0x8
	DCW	0x66
	DCW	0x8
	DCW	0xe6
	DCW	0x8
	DCW	0x16
	DCW	0x8
	DCW	0x96
	DCW	0x8
	DCW	0x56
	DCW	0x8
	DCW	0xd6
	DCW	0x8
	DCW	0x36
	DCW	0x8
	DCW	0xb6
	DCW	0x8
	DCW	0x76
	DCW	0x8
	DCW	0xf6
	DCW	0x8
	DCW	0xe
	DCW	0x8
	DCW	0x8e
	DCW	0x8
	DCW	0x4e
	DCW	0x8
	DCW	0xce
	DCW	0x8
	DCW	0x2e
	DCW	0x8
	DCW	0xae
	DCW	0x8
	DCW	0x6e
	DCW	0x8
	DCW	0xee
	DCW	0x8
	DCW	0x1e
	DCW	0x8
	DCW	0x9e
	DCW	0x8
	DCW	0x5e
	DCW	0x8
	DCW	0xde
	DCW	0x8
	DCW	0x3e
	DCW	0x8
	DCW	0xbe
	DCW	0x8
	DCW	0x7e
	DCW	0x8
	DCW	0xfe
	DCW	0x8
	DCW	0x1
	DCW	0x8
	DCW	0x81
	DCW	0x8
	DCW	0x41
	DCW	0x8
	DCW	0xc1
	DCW	0x8
	DCW	0x21
	DCW	0x8
	DCW	0xa1
	DCW	0x8
	DCW	0x61
	DCW	0x8
	DCW	0xe1
	DCW	0x8
	DCW	0x11
	DCW	0x8
	DCW	0x91
	DCW	0x8
	DCW	0x51
	DCW	0x8
	DCW	0xd1
	DCW	0x8
	DCW	0x31
	DCW	0x8
	DCW	0xb1
	DCW	0x8
	DCW	0x71
	DCW	0x8
	DCW	0xf1
	DCW	0x8
	DCW	0x9
	DCW	0x8
	DCW	0x89
	DCW	0x8
	DCW	0x49
	DCW	0x8
	DCW	0xc9
	DCW	0x8
	DCW	0x29
	DCW	0x8
	DCW	0xa9
	DCW	0x8
	DCW	0x69
	DCW	0x8
	DCW	0xe9
	DCW	0x8
	DCW	0x19
	DCW	0x8
	DCW	0x99
	DCW	0x8
	DCW	0x59
	DCW	0x8
	DCW	0xd9
	DCW	0x8
	DCW	0x39
	DCW	0x8
	DCW	0xb9
	DCW	0x8
	DCW	0x79
	DCW	0x8
	DCW	0xf9
	DCW	0x8
	DCW	0x5
	DCW	0x8
	DCW	0x85
	DCW	0x8
	DCW	0x45
	DCW	0x8
	DCW	0xc5
	DCW	0x8
	DCW	0x25
	DCW	0x8
	DCW	0xa5
	DCW	0x8
	DCW	0x65
	DCW	0x8
	DCW	0xe5
	DCW	0x8
	DCW	0x15
	DCW	0x8
	DCW	0x95
	DCW	0x8
	DCW	0x55
	DCW	0x8
	DCW	0xd5
	DCW	0x8
	DCW	0x35
	DCW	0x8
	DCW	0xb5
	DCW	0x8
	DCW	0x75
	DCW	0x8
	DCW	0xf5
	DCW	0x8
	DCW	0xd
	DCW	0x8
	DCW	0x8d
	DCW	0x8
	DCW	0x4d
	DCW	0x8
	DCW	0xcd
	DCW	0x8
	DCW	0x2d
	DCW	0x8
	DCW	0xad
	DCW	0x8
	DCW	0x6d
	DCW	0x8
	DCW	0xed
	DCW	0x8
	DCW	0x1d
	DCW	0x8
	DCW	0x9d
	DCW	0x8
	DCW	0x5d
	DCW	0x8
	DCW	0xdd
	DCW	0x8
	DCW	0x3d
	DCW	0x8
	DCW	0xbd
	DCW	0x8
	DCW	0x7d
	DCW	0x8
	DCW	0xfd
	DCW	0x8
	DCW	0x13
	DCW	0x9
	DCW	0x113
	DCW	0x9
	DCW	0x93
	DCW	0x9
	DCW	0x193
	DCW	0x9
	DCW	0x53
	DCW	0x9
	DCW	0x153
	DCW	0x9
	DCW	0xd3
	DCW	0x9
	DCW	0x1d3
	DCW	0x9
	DCW	0x33
	DCW	0x9
	DCW	0x133
	DCW	0x9
	DCW	0xb3
	DCW	0x9
	DCW	0x1b3
	DCW	0x9
	DCW	0x73
	DCW	0x9
	DCW	0x173
	DCW	0x9
	DCW	0xf3
	DCW	0x9
	DCW	0x1f3
	DCW	0x9
	DCW	0xb
	DCW	0x9
	DCW	0x10b
	DCW	0x9
	DCW	0x8b
	DCW	0x9
	DCW	0x18b
	DCW	0x9
	DCW	0x4b
	DCW	0x9
	DCW	0x14b
	DCW	0x9
	DCW	0xcb
	DCW	0x9
	DCW	0x1cb
	DCW	0x9
	DCW	0x2b
	DCW	0x9
	DCW	0x12b
	DCW	0x9
	DCW	0xab
	DCW	0x9
	DCW	0x1ab
	DCW	0x9
	DCW	0x6b
	DCW	0x9
	DCW	0x16b
	DCW	0x9
	DCW	0xeb
	DCW	0x9
	DCW	0x1eb
	DCW	0x9
	DCW	0x1b
	DCW	0x9
	DCW	0x11b
	DCW	0x9
	DCW	0x9b
	DCW	0x9
	DCW	0x19b
	DCW	0x9
	DCW	0x5b
	DCW	0x9
	DCW	0x15b
	DCW	0x9
	DCW	0xdb
	DCW	0x9
	DCW	0x1db
	DCW	0x9
	DCW	0x3b
	DCW	0x9
	DCW	0x13b
	DCW	0x9
	DCW	0xbb
	DCW	0x9
	DCW	0x1bb
	DCW	0x9
	DCW	0x7b
	DCW	0x9
	DCW	0x17b
	DCW	0x9
	DCW	0xfb
	DCW	0x9
	DCW	0x1fb
	DCW	0x9
	DCW	0x7
	DCW	0x9
	DCW	0x107
	DCW	0x9
	DCW	0x87
	DCW	0x9
	DCW	0x187
	DCW	0x9
	DCW	0x47
	DCW	0x9
	DCW	0x147
	DCW	0x9
	DCW	0xc7
	DCW	0x9
	DCW	0x1c7
	DCW	0x9
	DCW	0x27
	DCW	0x9
	DCW	0x127
	DCW	0x9
	DCW	0xa7
	DCW	0x9
	DCW	0x1a7
	DCW	0x9
	DCW	0x67
	DCW	0x9
	DCW	0x167
	DCW	0x9
	DCW	0xe7
	DCW	0x9
	DCW	0x1e7
	DCW	0x9
	DCW	0x17
	DCW	0x9
	DCW	0x117
	DCW	0x9
	DCW	0x97
	DCW	0x9
	DCW	0x197
	DCW	0x9
	DCW	0x57
	DCW	0x9
	DCW	0x157
	DCW	0x9
	DCW	0xd7
	DCW	0x9
	DCW	0x1d7
	DCW	0x9
	DCW	0x37
	DCW	0x9
	DCW	0x137
	DCW	0x9
	DCW	0xb7
	DCW	0x9
	DCW	0x1b7
	DCW	0x9
	DCW	0x77
	DCW	0x9
	DCW	0x177
	DCW	0x9
	DCW	0xf7
	DCW	0x9
	DCW	0x1f7
	DCW	0x9
	DCW	0xf
	DCW	0x9
	DCW	0x10f
	DCW	0x9
	DCW	0x8f
	DCW	0x9
	DCW	0x18f
	DCW	0x9
	DCW	0x4f
	DCW	0x9
	DCW	0x14f
	DCW	0x9
	DCW	0xcf
	DCW	0x9
	DCW	0x1cf
	DCW	0x9
	DCW	0x2f
	DCW	0x9
	DCW	0x12f
	DCW	0x9
	DCW	0xaf
	DCW	0x9
	DCW	0x1af
	DCW	0x9
	DCW	0x6f
	DCW	0x9
	DCW	0x16f
	DCW	0x9
	DCW	0xef
	DCW	0x9
	DCW	0x1ef
	DCW	0x9
	DCW	0x1f
	DCW	0x9
	DCW	0x11f
	DCW	0x9
	DCW	0x9f
	DCW	0x9
	DCW	0x19f
	DCW	0x9
	DCW	0x5f
	DCW	0x9
	DCW	0x15f
	DCW	0x9
	DCW	0xdf
	DCW	0x9
	DCW	0x1df
	DCW	0x9
	DCW	0x3f
	DCW	0x9
	DCW	0x13f
	DCW	0x9
	DCW	0xbf
	DCW	0x9
	DCW	0x1bf
	DCW	0x9
	DCW	0x7f
	DCW	0x9
	DCW	0x17f
	DCW	0x9
	DCW	0xff
	DCW	0x9
	DCW	0x1ff
	DCW	0x9
	DCW	0x0
	DCW	0x7
	DCW	0x40
	DCW	0x7
	DCW	0x20
	DCW	0x7
	DCW	0x60
	DCW	0x7
	DCW	0x10
	DCW	0x7
	DCW	0x50
	DCW	0x7
	DCW	0x30
	DCW	0x7
	DCW	0x70
	DCW	0x7
	DCW	0x8
	DCW	0x7
	DCW	0x48
	DCW	0x7
	DCW	0x28
	DCW	0x7
	DCW	0x68
	DCW	0x7
	DCW	0x18
	DCW	0x7
	DCW	0x58
	DCW	0x7
	DCW	0x38
	DCW	0x7
	DCW	0x78
	DCW	0x7
	DCW	0x4
	DCW	0x7
	DCW	0x44
	DCW	0x7
	DCW	0x24
	DCW	0x7
	DCW	0x64
	DCW	0x7
	DCW	0x14
	DCW	0x7
	DCW	0x54
	DCW	0x7
	DCW	0x34
	DCW	0x7
	DCW	0x74
	DCW	0x7
	DCW	0x3
	DCW	0x8
	DCW	0x83
	DCW	0x8
	DCW	0x43
	DCW	0x8
	DCW	0xc3
	DCW	0x8
	DCW	0x23
	DCW	0x8
	DCW	0xa3
	DCW	0x8
	DCW	0x63
	DCW	0x8
	DCW	0xe3
	DCW	0x8
|static_d_desc| DCQ |static_dtree|, 0
	DCQ	|extra_dbits|, 0
	DCD	0x0
	DCD	0x1e
	DCD	0xf
	%	4
|bl_order| DCB	0x10
	DCB	0x11
	DCB	0x12
	DCB	0x0
	DCB	0x8
	DCB	0x7
	DCB	0x9
	DCB	0x6
	DCB	0xa
	DCB	0x5
	DCB	0xb
	DCB	0x4
	DCB	0xc
	DCB	0x3
	DCB	0xd
	DCB	0x2
	DCB	0xe
	DCB	0x1
	DCB	0xf
	EXPORT	|_tr_tally|
	EXPORT	|_tr_align|
	EXPORT	|_tr_init|
	EXPORT	|_tr_flush_block|
	EXPORT	|_tr_flush_bits|
	EXPORT	|_tr_stored_block|

	AREA	|.pdata|, PDATA
|$pdata$compress_block| DCD imagerel |compress_block|
	DCD	imagerel |$unwind$compress_block|

	AREA	|.pdata|, PDATA
|$pdata$send_all_trees| DCD imagerel |send_all_trees|
	DCD	0x162028d
	;Flags[SingleProEpi] functionLength[652] RegF[0] RegI[2] H[0] frameChainReturn[Chained] frameSize[32]

	AREA	|.pdata|, PDATA
|$pdata$build_bl_tree| DCD imagerel |build_bl_tree|
	DCD	0x16100d5
	;Flags[SingleProEpi] functionLength[212] RegF[0] RegI[1] H[0] frameChainReturn[Chained] frameSize[32]

	AREA	|.pdata|, PDATA
|$pdata$send_tree| DCD imagerel |send_tree|
	DCD	imagerel |$unwind$send_tree|

	AREA	|.pdata|, PDATA
|$pdata$build_tree| DCD imagerel |build_tree|
	DCD	0x2e70285
	;Flags[SingleProEpi] functionLength[644] RegF[0] RegI[7] H[0] frameChainReturn[Chained] frameSize[80]

	AREA	|.pdata|, PDATA
|$pdata$gen_codes| DCD imagerel |gen_codes|
	DCD	0x1e00075
	;Flags[SingleProEpi] functionLength[116] RegF[0] RegI[0] H[0] frameChainReturn[Chained] frameSize[48]

	AREA	|.pdata|, PDATA
|$pdata$gen_bitlen| DCD imagerel |gen_bitlen|
	DCD	0x8201e1
	;Flags[SingleProEpi] functionLength[480] RegF[0] RegI[2] H[0] frameChainReturn[UnChained] frameSize[16]

	AREA	|.pdata|, PDATA
|$pdata$_tr_flush_block| DCD imagerel |$LN21|
	DCD	0x1e4024d
	;Flags[SingleProEpi] functionLength[588] RegF[0] RegI[4] H[0] frameChainReturn[Chained] frameSize[48]

	AREA	|.pdata|, PDATA
|$pdata$_tr_stored_block| DCD imagerel |$LN6|
	DCD	0x162012d
	;Flags[SingleProEpi] functionLength[300] RegF[0] RegI[2] H[0] frameChainReturn[Chained] frameSize[32]

	AREA	|.xdata|, DATA
|$unwind$send_tree| DCD 0x10200167
	DCD	0x2c984d1
	DCD	0xe3e485cc
	;Code Words[2], Epilog Start Index[0], E[1], X[0], Function Length[359]=1436 bytes
	;save_reg
	;save_regp
	;save_regp_x
	;end
	;nop

	AREA	|.xdata|, DATA
|$unwind$compress_block| DCD 0x8800116
	DCD	0x10d
	DCD	0x113
	DCD	0xe42482c8
	;Code Words[1], Epilog Count[2], E[0], X[0], Function Length[278]=1112 bytes
	;Epilog Start Index[0], Epilog Start Offset[269]=1076 bytes
	;Epilog Start Index[0], Epilog Start Offset[275]=1100 bytes
	;save_regp
	;save_r19r20_x
	;end
; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\trees.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |_tr_stored_block| PROC

; 868  : {

  00000		 |$LN6|
  00000	a9bf53f3	 stp         x19,x20,[sp,#-0x10]!
  00004	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00008	910003fd	 mov         fp,sp
  0000c	aa0003f3	 mov         x19,x0

; 869  :     send_bits(s, (STORED_BLOCK<<1)+last, 3);    /* send block type */

  00010	d282e208	 mov         x8,#0x1710
  00014	b957166a	 ldr         w10,[x19,#0x1714]
  00018	8b08026c	 add         x12,x19,x8
  0001c	796e2268	 ldrh        w8,[x19,#0x1710]
  00020	d3407c54	 uxtw        x20,w2
  00024	1aca2069	 lsl         w9,w3,w10
  00028	2a080128	 orr         w8,w9,w8
  0002c	53003d0b	 uxth        w11,w8
  00030	7100355f	 cmp         w10,#0xD
  00034	5400000d	 ble         |$LN2@tr_stored_|
  00038	b9402a69	 ldr         w9,[x19,#0x28]
  0003c	7900018b	 strh        w11,[x12]
  00040	f9400a68	 ldr         x8,[x19,#0x10]
  00044	3829490b	 strb        w11,[x8,w9 uxtw #0]
  00048	b9402a69	 ldr         w9,[x19,#0x28]
  0004c	f9400a6a	 ldr         x10,[x19,#0x10]
  00050	39400588	 ldrb        w8,[x12,#1]
  00054	1100052b	 add         w11,w9,#1
  00058	b9002a6b	 str         w11,[x19,#0x28]
  0005c	382b4948	 strb        w8,[x10,w11 uxtw #0]
  00060	b957166b	 ldr         w11,[x19,#0x1714]
  00064	b9402a69	 ldr         w9,[x19,#0x28]
  00068	51003568	 sub         w8,w11,#0xD
  0006c	1100052a	 add         w10,w9,#1
  00070	b9171668	 str         w8,[x19,#0x1714]
  00074	52800209	 mov         w9,#0x10
  00078	b9002a6a	 str         w10,[x19,#0x28]
  0007c	4b0b0129	 sub         w9,w9,w11
  00080	53003c68	 uxth        w8,w3
  00084	1ac9250a	 lsr         w10,w8,w9
  00088	53003d4b	 uxth        w11,w10
  0008c	14000003	 b           |$LN3@tr_stored_|
  00090		 |$LN2@tr_stored_|
  00090	11000d48	 add         w8,w10,#3
  00094	b9171668	 str         w8,[x19,#0x1714]
  00098		 |$LN3@tr_stored_|

; 870  :     bi_windup(s);        /* align on byte boundary */

  00098	aa1303e0	 mov         x0,x19
  0009c	7900018b	 strh        w11,[x12]
  000a0	94000000	 bl          bi_windup

; 871  :     put_short(s, (ush)stored_len);

  000a4	b9402a6e	 ldr         w14,[x19,#0x28]
  000a8	53083e8a	 ubfx        w10,w20,#8,#8
  000ac	f9400a6d	 ldr         x13,[x19,#0x10]

; 872  :     put_short(s, (ush)~stored_len);
; 873  :     zmemcpy(s->pending_buf + s->pending, (Bytef *)buf, stored_len);

  000b0	aa1403e2	 mov         x2,x20
  000b4	382e49b4	 strb        w20,[x13,w14 uxtw #0]
  000b8	b9402a68	 ldr         w8,[x19,#0x28]
  000bc	1100050b	 add         w11,w8,#1
  000c0	f9400a68	 ldr         x8,[x19,#0x10]
  000c4	b9002a6b	 str         w11,[x19,#0x28]
  000c8	382b490a	 strb        w10,[x8,w11 uxtw #0]
  000cc	b9402a69	 ldr         w9,[x19,#0x28]
  000d0	2a3403ea	 mvn         w10,w20
  000d4	f9400a68	 ldr         x8,[x19,#0x10]
  000d8	1100052b	 add         w11,w9,#1
  000dc	b9002a6b	 str         w11,[x19,#0x28]
  000e0	382b490a	 strb        w10,[x8,w11 uxtw #0]
  000e4	b9402a69	 ldr         w9,[x19,#0x28]
  000e8	53083d4a	 ubfx        w10,w10,#8,#8
  000ec	1100052c	 add         w12,w9,#1
  000f0	f9400a69	 ldr         x9,[x19,#0x10]
  000f4	b9002a6c	 str         w12,[x19,#0x28]
  000f8	382c492a	 strb        w10,[x9,w12 uxtw #0]
  000fc	b9402a68	 ldr         w8,[x19,#0x28]
  00100	f9400a69	 ldr         x9,[x19,#0x10]
  00104	1100050b	 add         w11,w8,#1
  00108	8b2b4120	 add         x0,x9,w11,uxtw #0
  0010c	b9002a6b	 str         w11,[x19,#0x28]
  00110	94000000	 bl          memcpy

; 874  :     s->pending += stored_len;

  00114	b9402a68	 ldr         w8,[x19,#0x28]
  00118	0b140109	 add         w9,w8,w20
  0011c	b9002a69	 str         w9,[x19,#0x28]
  00120	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00124	a8c153f3	 ldp         x19,x20,[sp],#0x10
  00128	d65f03c0	 ret

			 ENDP  ; |_tr_stored_block|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\trees.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |_tr_flush_bits| PROC

; 889  :     bi_flush(s);

  00000	14000000	 b           bi_flush

			 ENDP  ; |_tr_flush_bits|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\trees.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |_tr_flush_block| PROC

; 916  : {

  00000		 |$LN21|
  00000	a9be53f3	 stp         x19,x20,[sp,#-0x20]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  0000c	910003fd	 mov         fp,sp
  00010	aa0003f3	 mov         x19,x0

; 917  :     ulg opt_lenb, static_lenb; /* opt_len and static_len in bytes */
; 918  :     int max_blindex = 0;  /* index of last bit length code of non zero freq */
; 919  : 
; 920  :     /* Build the Huffman trees unless a stored block is forced */
; 921  :     if (s->level > 0) {

  00014	b940ae68	 ldr         w8,[x19,#0xAC]
  00018	aa0103f6	 mov         x22,x1
  0001c	2a0203f5	 mov         w21,w2
  00020	2a0303f4	 mov         w20,w3
  00024	52800000	 mov         w0,#0
  00028	7100011f	 cmp         w8,#0
  0002c	5400000d	 ble         |$LN2@tr_flush_b|

; 922  : 
; 923  :         /* Check if the file is binary or text */
; 924  :         if (s->strm->data_type == Z_UNKNOWN)

  00030	f940026c	 ldr         x12,[x19]
  00034	b9404988	 ldr         w8,[x12,#0x48]
  00038	7100091f	 cmp         w8,#2
  0003c	54000001	 bne         |$LN4@tr_flush_b|

; 925  :             s->strm->data_type = detect_data_type(s);

  00040	aa1303e0	 mov         x0,x19
  00044	94000000	 bl          detect_data_type
  00048	b9004980	 str         w0,[x12,#0x48]
  0004c		 |$LN4@tr_flush_b|

; 926  : 
; 927  :         /* Construct the literal and distance trees */
; 928  :         build_tree(s, (tree_desc *)(&(s->l_desc)));

  0004c	912d0261	 add         x1,x19,#0xB40
  00050	aa1303e0	 mov         x0,x19
  00054	94000000	 bl          build_tree

; 929  :         Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
; 930  :                 s->static_len));
; 931  : 
; 932  :         build_tree(s, (tree_desc *)(&(s->d_desc)));

  00058	912d6261	 add         x1,x19,#0xB58
  0005c	aa1303e0	 mov         x0,x19
  00060	94000000	 bl          build_tree

; 933  :         Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
; 934  :                 s->static_len));
; 935  :         /* At this point, opt_len and static_len are the total bit lengths of
; 936  :          * the compressed block data, excluding the tree representations.
; 937  :          */
; 938  : 
; 939  :         /* Build the bit length tree for the above two trees, and get the index
; 940  :          * in bl_order of the last bit length code to send.
; 941  :          */
; 942  :         max_blindex = build_bl_tree(s);

  00064	aa1303e0	 mov         x0,x19
  00068	94000000	 bl          build_bl_tree

; 943  : 
; 944  :         /* Determine the best encoding. Compute the block lengths in bytes. */
; 945  :         opt_lenb = (s->opt_len+3+7)>>3;

  0006c	b9570268	 ldr         w8,[x19,#0x1700]

; 946  :         static_lenb = (s->static_len+3+7)>>3;

  00070	b957066a	 ldr         w10,[x19,#0x1704]
  00074	11002909	 add         w9,w8,#0xA
  00078	11002948	 add         w8,w10,#0xA
  0007c	53037d0c	 lsr         w12,w8,#3
  00080	53037d2b	 lsr         w11,w9,#3

; 947  : 
; 948  :         Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
; 949  :                 opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
; 950  :                 s->last_lit));
; 951  : 
; 952  :         if (static_lenb <= opt_lenb) opt_lenb = static_lenb;
; 953  : 
; 954  :     } else {

  00084	6b0b019f	 cmp         w12,w11
  00088	1a8c8169	 cselhi      w9,w11,w12
  0008c	14000003	 b           |$LN3@tr_flush_b|
  00090		 |$LN2@tr_flush_b|

; 955  :         Assert(buf != (char*)0, "lost buf");
; 956  :         opt_lenb = static_lenb = stored_len + 5; /* force a stored block */

  00090	110016ac	 add         w12,w21,#5
  00094	2a0c03e9	 mov         w9,w12
  00098		 |$LN3@tr_flush_b|

; 957  :     }
; 958  : 
; 959  : #ifdef FORCE_STORED
; 960  :     if (buf != (char*)0) { /* force stored block */
; 961  : #else
; 962  :     if (stored_len+4 <= opt_lenb && buf != (char*)0) {

  00098	110012a8	 add         w8,w21,#4
  0009c	6b09011f	 cmp         w8,w9
  000a0	54000008	 bhi         |$LN6@tr_flush_b|
  000a4	6b09011f	 cmp         w8,w9
  000a8	1a9f9108	 csells      w8,w8,wzr
  000ac	d503229f	 csdb
  000b0	b4000016	 cbz         x22,|$LN6@tr_flush_b|

; 963  :                        /* 4: two words for the lengths */
; 964  : #endif
; 965  :         /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
; 966  :          * Otherwise we can't have processed more than WSIZE input bytes since
; 967  :          * the last block flush, because compression would have been
; 968  :          * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
; 969  :          * transform a block into a stored block.
; 970  :          */
; 971  :         _tr_stored_block(s, buf, stored_len, last);

  000b4	2a1403e3	 mov         w3,w20
  000b8	2a1503e2	 mov         w2,w21
  000bc	aa1603e1	 mov         x1,x22
  000c0	aa1303e0	 mov         x0,x19
  000c4	94000000	 bl          _tr_stored_block
  000c8	14000059	 b           |$LN9@tr_flush_b|
  000cc		 |$LN6@tr_flush_b|

; 972  : 
; 973  : #ifdef FORCE_STATIC
; 974  :     } else if (static_lenb >= 0) { /* force static trees */
; 975  : #else
; 976  :     } else if (s->strategy == Z_FIXED || static_lenb == opt_lenb) {

  000cc	b940b268	 ldr         w8,[x19,#0xB0]
  000d0	796e226a	 ldrh        w10,[x19,#0x1710]
  000d4	7100111f	 cmp         w8,#4
  000d8	d282e208	 mov         x8,#0x1710
  000dc	7a491184	 ccmpne      w12,w9,#4
  000e0	b9571669	 ldr         w9,[x19,#0x1714]
  000e4	8b08026d	 add         x13,x19,x8
  000e8	54000000	 beq         |$LN10@tr_flush_b|

; 980  :                        (const ct_data *)static_dtree);
; 981  : #ifdef ZLIB_DEBUG
; 982  :         s->compressed_len += 3 + s->static_len;
; 983  : #endif
; 984  :     } else {
; 985  :         send_bits(s, (DYN_TREES<<1)+last, 3);

  000ec	1100128e	 add         w14,w20,#4
  000f0	7100353f	 cmp         w9,#0xD
  000f4	5400000d	 ble         |$LN13@tr_flush_b|
  000f8	1ac921c8	 lsl         w8,w14,w9
  000fc	2a0a0109	 orr         w9,w8,w10
  00100	b9402a6a	 ldr         w10,[x19,#0x28]
  00104	f9400a68	 ldr         x8,[x19,#0x10]
  00108	790001a9	 strh        w9,[x13]
  0010c	382a4909	 strb        w9,[x8,w10 uxtw #0]
  00110	b9402a69	 ldr         w9,[x19,#0x28]
  00114	f9400a6a	 ldr         x10,[x19,#0x10]
  00118	394005a8	 ldrb        w8,[x13,#1]
  0011c	1100052c	 add         w12,w9,#1
  00120	b9002a6c	 str         w12,[x19,#0x28]
  00124	382c4948	 strb        w8,[x10,w12 uxtw #0]
  00128	b9402a69	 ldr         w9,[x19,#0x28]
  0012c	b957166b	 ldr         w11,[x19,#0x1714]
  00130	1100052a	 add         w10,w9,#1
  00134	51003568	 sub         w8,w11,#0xD
  00138	b9002a6a	 str         w10,[x19,#0x28]
  0013c	52800209	 mov         w9,#0x10
  00140	b9171668	 str         w8,[x19,#0x1714]
  00144	4b0b0129	 sub         w9,w9,w11
  00148	53003dc8	 uxth        w8,w14
  0014c	1ac9250a	 lsr         w10,w8,w9
  00150	14000005	 b           |$LN17@tr_flush_b|
  00154		 |$LN13@tr_flush_b|
  00154	11000d28	 add         w8,w9,#3
  00158	1ac921c9	 lsl         w9,w14,w9
  0015c	b9171668	 str         w8,[x19,#0x1714]
  00160	2a0a012a	 orr         w10,w9,w10
  00164		 |$LN17@tr_flush_b|

; 986  :         send_all_trees(s, s->l_desc.max_code+1, s->d_desc.max_code+1,

  00164	53003d49	 uxth        w9,w10
  00168	790001a9	 strh        w9,[x13]
  0016c	b94b6268	 ldr         w8,[x19,#0xB60]
  00170	11000403	 add         w3,w0,#1
  00174	b94b4a69	 ldr         w9,[x19,#0xB48]
  00178	aa1303e0	 mov         x0,x19
  0017c	11000502	 add         w2,w8,#1
  00180	11000521	 add         w1,w9,#1
  00184	94000000	 bl          send_all_trees

; 987  :                        max_blindex+1);
; 988  :         compress_block(s, (const ct_data *)s->dyn_ltree,

  00188	9126c262	 add         x2,x19,#0x9B0
  0018c	9102f261	 add         x1,x19,#0xBC
  00190	14000025	 b           |$LN18@tr_flush_b|
  00194		 |$LN10@tr_flush_b|

; 977  : #endif
; 978  :         send_bits(s, (STATIC_TREES<<1)+last, 3);

  00194	11000a8e	 add         w14,w20,#2
  00198	7100353f	 cmp         w9,#0xD
  0019c	5400000d	 ble         |$LN11@tr_flush_b|
  001a0	1ac921c8	 lsl         w8,w14,w9
  001a4	2a0a0109	 orr         w9,w8,w10
  001a8	b9402a6a	 ldr         w10,[x19,#0x28]
  001ac	f9400a68	 ldr         x8,[x19,#0x10]
  001b0	790001a9	 strh        w9,[x13]
  001b4	382a4909	 strb        w9,[x8,w10 uxtw #0]
  001b8	b9402a69	 ldr         w9,[x19,#0x28]
  001bc	f9400a6a	 ldr         x10,[x19,#0x10]
  001c0	394005a8	 ldrb        w8,[x13,#1]
  001c4	1100052c	 add         w12,w9,#1
  001c8	b9002a6c	 str         w12,[x19,#0x28]
  001cc	382c4948	 strb        w8,[x10,w12 uxtw #0]
  001d0	b9402a69	 ldr         w9,[x19,#0x28]
  001d4	b957166b	 ldr         w11,[x19,#0x1714]
  001d8	1100052a	 add         w10,w9,#1
  001dc	51003568	 sub         w8,w11,#0xD
  001e0	b9002a6a	 str         w10,[x19,#0x28]
  001e4	52800209	 mov         w9,#0x10
  001e8	b9171668	 str         w8,[x19,#0x1714]
  001ec	4b0b0129	 sub         w9,w9,w11
  001f0	53003dc8	 uxth        w8,w14
  001f4	1ac9250a	 lsr         w10,w8,w9
  001f8	14000005	 b           |$LN19@tr_flush_b|
  001fc		 |$LN11@tr_flush_b|
  001fc	11000d28	 add         w8,w9,#3
  00200	1ac921c9	 lsl         w9,w14,w9
  00204	b9171668	 str         w8,[x19,#0x1714]
  00208	2a0a012a	 orr         w10,w9,w10
  0020c		 |$LN19@tr_flush_b|

; 979  :         compress_block(s, (const ct_data *)static_ltree,

  0020c	90000008	 adrp        x8,static_dtree
  00210	91000108	 add         x8,x8,PageOffset(static_dtree)
  00214	53003d49	 uxth        w9,w10
  00218	aa0803e2	 mov         x2,x8
  0021c	790001a9	 strh        w9,[x13]
  00220	910c4101	 add         x1,x8,#0x310
  00224		 |$LN18@tr_flush_b|

; 989  :                        (const ct_data *)s->dyn_dtree);
; 990  : #ifdef ZLIB_DEBUG
; 991  :         s->compressed_len += 3 + s->opt_len;
; 992  : #endif
; 993  :     }
; 994  :     Assert (s->compressed_len == s->bits_sent, "bad compressed size");
; 995  :     /* The above check is made mod 2^32, for files larger than 512 MB
; 996  :      * and uLong implemented on 32 bits.
; 997  :      */
; 998  :     init_block(s);

  00224	aa1303e0	 mov         x0,x19
  00228	94000000	 bl          compress_block
  0022c		 |$LN9@tr_flush_b|
  0022c	aa1303e0	 mov         x0,x19
  00230	94000000	 bl          init_block

; 999  : 
; 1000 :     if (last) {

  00234	34000014	 cbz         w20,|$LN15@tr_flush_b|

; 1001 :         bi_windup(s);

  00238	94000000	 bl          bi_windup
  0023c		 |$LN15@tr_flush_b|
  0023c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00240	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00244	a8c253f3	 ldp         x19,x20,[sp],#0x20
  00248	d65f03c0	 ret

			 ENDP  ; |_tr_flush_block|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\trees.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |_tr_init| PROC

; 382  :     tr_static_init();
; 383  : 
; 384  :     s->l_desc.dyn_tree = s->dyn_ltree;
; 385  :     s->l_desc.stat_desc = &static_l_desc;

  00000	90000009	 adrp        x9,static_l_desc
  00004	9100012a	 add         x10,x9,PageOffset(static_l_desc)

; 386  : 
; 387  :     s->d_desc.dyn_tree = s->dyn_dtree;
; 388  :     s->d_desc.stat_desc = &static_d_desc;
; 389  : 
; 390  :     s->bl_desc.dyn_tree = s->bl_tree;
; 391  :     s->bl_desc.stat_desc = &static_bl_desc;
; 392  : 
; 393  :     s->bi_buf = 0;

  00008	792e201f	 strh        wzr,[x0,#0x1710]
  0000c	9102f008	 add         x8,x0,#0xBC
  00010	f905a80a	 str         x10,[x0,#0xB50]
  00014	91152149	 add         x9,x10,#0x548

; 394  :     s->bi_valid = 0;

  00018	b917141f	 str         wzr,[x0,#0x1714]
  0001c	f905a008	 str         x8,[x0,#0xB40]
  00020	9126c008	 add         x8,x0,#0x9B0
  00024	f905b409	 str         x9,[x0,#0xB68]
  00028	91008149	 add         x9,x10,#0x20
  0002c	f905ac08	 str         x8,[x0,#0xB58]
  00030	912a9008	 add         x8,x0,#0xAA4
  00034	f905c009	 str         x9,[x0,#0xB80]
  00038	f905b808	 str         x8,[x0,#0xB70]

; 395  : #ifdef ZLIB_DEBUG
; 396  :     s->compressed_len = 0L;
; 397  :     s->bits_sent = 0L;
; 398  : #endif
; 399  : 
; 400  :     /* Initialize the first block of the first file: */
; 401  :     init_block(s);

  0003c	14000000	 b           init_block

			 ENDP  ; |_tr_init|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\trees.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |_tr_align| PROC

; 899  :     send_bits(s, STATIC_TREES<<1, 3);

  00000	d282e288	 mov         x8,#0x1714
  00004	b957140a	 ldr         w10,[x0,#0x1714]
  00008	8b08000d	 add         x13,x0,x8
  0000c	d282e208	 mov         x8,#0x1710
  00010	8b08000c	 add         x12,x0,x8
  00014	796e2008	 ldrh        w8,[x0,#0x1710]
  00018	52800049	 mov         w9,#2
  0001c	1aca2129	 lsl         w9,w9,w10
  00020	7100355f	 cmp         w10,#0xD
  00024	2a080128	 orr         w8,w9,w8
  00028	53003d0b	 uxth        w11,w8
  0002c	5400000d	 ble         |$LN2@tr_align|
  00030	b9402809	 ldr         w9,[x0,#0x28]
  00034	7900018b	 strh        w11,[x12]
  00038	f9400808	 ldr         x8,[x0,#0x10]
  0003c	3829490b	 strb        w11,[x8,w9 uxtw #0]
  00040	b9402809	 ldr         w9,[x0,#0x28]
  00044	f940080a	 ldr         x10,[x0,#0x10]
  00048	39400588	 ldrb        w8,[x12,#1]
  0004c	1100052b	 add         w11,w9,#1
  00050	b900280b	 str         w11,[x0,#0x28]
  00054	382b4948	 strb        w8,[x10,w11 uxtw #0]
  00058	b9402809	 ldr         w9,[x0,#0x28]
  0005c	5280004b	 mov         w11,#2
  00060	b94001a8	 ldr         w8,[x13]
  00064	1100052a	 add         w10,w9,#1
  00068	52800209	 mov         w9,#0x10
  0006c	b900280a	 str         w10,[x0,#0x28]
  00070	5100350a	 sub         w10,w8,#0xD
  00074	4b080128	 sub         w8,w9,w8
  00078	1ac82569	 lsr         w9,w11,w8
  0007c	53003d2b	 uxth        w11,w9
  00080	14000002	 b           |$LN7@tr_align|
  00084		 |$LN2@tr_align|
  00084	11000d4a	 add         w10,w10,#3
  00088		 |$LN7@tr_align|

; 900  :     send_code(s, END_BLOCK, static_ltree);

  00088	b90001aa	 str         w10,[x13]
  0008c	7100255f	 cmp         w10,#9
  00090	7900018b	 strh        w11,[x12]
  00094	53003d6b	 uxth        w11,w11
  00098	5400000d	 ble         |$LN4@tr_align|
  0009c	b9402809	 ldr         w9,[x0,#0x28]
  000a0	f9400808	 ldr         x8,[x0,#0x10]
  000a4	3829490b	 strb        w11,[x8,w9 uxtw #0]
  000a8	b9402809	 ldr         w9,[x0,#0x28]
  000ac	f940080a	 ldr         x10,[x0,#0x10]
  000b0	39400588	 ldrb        w8,[x12,#1]
  000b4	1100052b	 add         w11,w9,#1
  000b8	b900280b	 str         w11,[x0,#0x28]
  000bc	382b4948	 strb        w8,[x10,w11 uxtw #0]
  000c0	b9402809	 ldr         w9,[x0,#0x28]
  000c4	5280000b	 mov         w11,#0
  000c8	b94001a8	 ldr         w8,[x13]
  000cc	1100052a	 add         w10,w9,#1
  000d0	51002509	 sub         w9,w8,#9
  000d4	b900280a	 str         w10,[x0,#0x28]
  000d8	b90001a9	 str         w9,[x13]

; 901  : #ifdef ZLIB_DEBUG
; 902  :     s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
; 903  : #endif
; 904  :     bi_flush(s);

  000dc	7900018b	 strh        w11,[x12]
  000e0	14000000	 b           bi_flush
  000e4		 |$LN4@tr_align|

; 900  :     send_code(s, END_BLOCK, static_ltree);

  000e4	11001d48	 add         w8,w10,#7
  000e8	b90001a8	 str         w8,[x13]

; 901  : #ifdef ZLIB_DEBUG
; 902  :     s->compressed_len += 10L; /* 3 for block type, 7 for EOB */
; 903  : #endif
; 904  :     bi_flush(s);

  000ec	7900018b	 strh        w11,[x12]
  000f0	14000000	 b           bi_flush

			 ENDP  ; |_tr_align|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\trees.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |tr_static_init| PROC

; 233  : {

  00000	d65f03c0	 ret

			 ENDP  ; |tr_static_init|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\trees.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |init_block| PROC

; 409  : {

  00000	91030008	 add         x8,x0,#0xC0
  00004	d28011e9	 mov         x9,#0x8F
  00008		 |$LL4@init_block|

; 410  :     int n; /* iterates over tree elements */
; 411  : 
; 412  :     /* Initialize the trees. */
; 413  :     for (n = 0; n < L_CODES;  n++) s->dyn_ltree[n].Freq = 0;

  00008	781fc11f	 sturh       wzr,[x8,#-4]
  0000c	d1000529	 sub         x9,x9,#1
  00010	7800851f	 strh        wzr,[x8],#8
  00014	b5000009	 cbnz        x9,|$LL4@init_block|

; 414  :     for (n = 0; n < D_CODES;  n++) s->dyn_dtree[n].Freq = 0;

  00018	7913601f	 strh        wzr,[x0,#0x9B0]

; 415  :     for (n = 0; n < BL_CODES; n++) s->bl_tree[n].Freq = 0;
; 416  : 
; 417  :     s->dyn_ltree[END_BLOCK].Freq = 1;

  0001c	52800028	 mov         w8,#1
  00020	7913681f	 strh        wzr,[x0,#0x9B4]
  00024	7913701f	 strh        wzr,[x0,#0x9B8]
  00028	7913781f	 strh        wzr,[x0,#0x9BC]
  0002c	7913801f	 strh        wzr,[x0,#0x9C0]
  00030	7913881f	 strh        wzr,[x0,#0x9C4]
  00034	7913901f	 strh        wzr,[x0,#0x9C8]
  00038	7913981f	 strh        wzr,[x0,#0x9CC]
  0003c	7913a01f	 strh        wzr,[x0,#0x9D0]
  00040	7913a81f	 strh        wzr,[x0,#0x9D4]
  00044	7913b01f	 strh        wzr,[x0,#0x9D8]
  00048	7913b81f	 strh        wzr,[x0,#0x9DC]
  0004c	7913c01f	 strh        wzr,[x0,#0x9E0]
  00050	7913c81f	 strh        wzr,[x0,#0x9E4]
  00054	7913d01f	 strh        wzr,[x0,#0x9E8]
  00058	7913d81f	 strh        wzr,[x0,#0x9EC]
  0005c	7913e01f	 strh        wzr,[x0,#0x9F0]
  00060	7913e81f	 strh        wzr,[x0,#0x9F4]
  00064	7913f01f	 strh        wzr,[x0,#0x9F8]
  00068	7913f81f	 strh        wzr,[x0,#0x9FC]
  0006c	7914001f	 strh        wzr,[x0,#0xA00]
  00070	7914081f	 strh        wzr,[x0,#0xA04]
  00074	7914101f	 strh        wzr,[x0,#0xA08]
  00078	7914181f	 strh        wzr,[x0,#0xA0C]
  0007c	7914201f	 strh        wzr,[x0,#0xA10]
  00080	7914281f	 strh        wzr,[x0,#0xA14]
  00084	7914301f	 strh        wzr,[x0,#0xA18]
  00088	7914381f	 strh        wzr,[x0,#0xA1C]
  0008c	7914401f	 strh        wzr,[x0,#0xA20]
  00090	7914481f	 strh        wzr,[x0,#0xA24]
  00094	7915481f	 strh        wzr,[x0,#0xAA4]
  00098	7915501f	 strh        wzr,[x0,#0xAA8]
  0009c	7915581f	 strh        wzr,[x0,#0xAAC]
  000a0	7915601f	 strh        wzr,[x0,#0xAB0]
  000a4	7915681f	 strh        wzr,[x0,#0xAB4]
  000a8	7915701f	 strh        wzr,[x0,#0xAB8]
  000ac	7915781f	 strh        wzr,[x0,#0xABC]
  000b0	7915801f	 strh        wzr,[x0,#0xAC0]
  000b4	7915881f	 strh        wzr,[x0,#0xAC4]
  000b8	7915901f	 strh        wzr,[x0,#0xAC8]
  000bc	7915981f	 strh        wzr,[x0,#0xACC]
  000c0	7915a01f	 strh        wzr,[x0,#0xAD0]
  000c4	7915a81f	 strh        wzr,[x0,#0xAD4]
  000c8	7915b01f	 strh        wzr,[x0,#0xAD8]
  000cc	7915b81f	 strh        wzr,[x0,#0xADC]
  000d0	7915c01f	 strh        wzr,[x0,#0xAE0]
  000d4	7915c81f	 strh        wzr,[x0,#0xAE4]
  000d8	7915d01f	 strh        wzr,[x0,#0xAE8]
  000dc	7915d81f	 strh        wzr,[x0,#0xAEC]
  000e0	79097808	 strh        w8,[x0,#0x4BC]

; 418  :     s->opt_len = s->static_len = 0L;

  000e4	b917041f	 str         wzr,[x0,#0x1704]
  000e8	b917001f	 str         wzr,[x0,#0x1700]

; 419  :     s->last_lit = s->matches = 0;

  000ec	b917081f	 str         wzr,[x0,#0x1708]
  000f0	b916f41f	 str         wzr,[x0,#0x16F4]
  000f4	d65f03c0	 ret

			 ENDP  ; |init_block|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\trees.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |pqdownheap| PROC

; 456  :     int v = s->heap[k];

  00000	93407c48	 sxtw        x8,w2
  00004	910ba909	 add         x9,x8,#0x2EA
  00008	b869780f	 ldr         w15,[x0,x9 lsl #2]

; 457  :     int j = k << 1;  /* left son of k */

  0000c	531f784b	 lsl         w11,w2,#1

; 458  :     while (j <= s->heap_len) {

  00010	b9549c09	 ldr         w9,[x0,#0x149C]
  00014	6b09017f	 cmp         w11,w9
  00018	5400000c	 bgt         |$LN10@pqdownheap|

; 459  :         /* Set j to the smallest of the two sons: */
; 460  :         if (j < s->heap_len &&

  0001c	93407de8	 sxtw        x8,w15
  00020	d37ef507	 lsl         x7,x8,#2
  00024	8b00010e	 add         x14,x8,x0
  00028	d2829484	 mov         x4,#0x14A4
  0002c	d2829483	 mov         x3,#0x14A4
  00030	d2829486	 mov         x6,#0x14A4
  00034	d2829485	 mov         x5,#0x14A4
  00038	6b09017f	 cmp         w11,w9
  0003c		 |$LN16@pqdownheap|
  0003c	5400000a	 bge         |$LN4@pqdownheap|
  00040	93407d69	 sxtw        x9,w11
  00044	910bad28	 add         x8,x9,#0x2EB
  00048	910ba929	 add         x9,x9,#0x2EA
  0004c	b8a8780c	 ldrsw       x12,[x0,x8 lsl #2]
  00050	b8a9780d	 ldrsw       x13,[x0,x9 lsl #2]
  00054	d37ef588	 lsl         x8,x12,#2
  00058	d37ef5a9	 lsl         x9,x13,#2
  0005c	7861690a	 ldrh        w10,[x8,x1]
  00060	78616928	 ldrh        w8,[x9,x1]
  00064	6b08015f	 cmp         w10,w8
  00068	54000003	 blo         |$LN5@pqdownheap|
  0006c	54000001	 bne         |$LN4@pqdownheap|
  00070	8b0001a8	 add         x8,x13,x0
  00074	8b000189	 add         x9,x12,x0
  00078	3864690a	 ldrb        w10,[x8,x4]
  0007c	38636928	 ldrb        w8,[x9,x3]
  00080	6b0a011f	 cmp         w8,w10
  00084	54000008	 bhi         |$LN4@pqdownheap|
  00088		 |$LN5@pqdownheap|

; 461  :             smaller(tree, s->heap[j+1], s->heap[j], s->depth)) {
; 462  :             j++;

  00088	1100056b	 add         w11,w11,#1
  0008c		 |$LN4@pqdownheap|

; 463  :         }
; 464  :         /* Exit if v is smaller than both sons */
; 465  :         if (smaller(tree, v, s->heap[j], s->depth)) break;

  0008c	93407d68	 sxtw        x8,w11
  00090	910ba909	 add         x9,x8,#0x2EA
  00094	b869780d	 ldr         w13,[x0,x9 lsl #2]
  00098	786168e9	 ldrh        w9,[x7,x1]
  0009c	93407dac	 sxtw        x12,w13
  000a0	d37ef588	 lsl         x8,x12,#2
  000a4	7861690a	 ldrh        w10,[x8,x1]
  000a8	6b0a013f	 cmp         w9,w10
  000ac	54000003	 blo         |$LN10@pqdownheap|
  000b0	54000001	 bne         |$LN13@pqdownheap|
  000b4	8b000188	 add         x8,x12,x0
  000b8	386669c9	 ldrb        w9,[x14,x6]
  000bc	3865690a	 ldrb        w10,[x8,x5]
  000c0	6b0a013f	 cmp         w9,w10
  000c4	54000009	 bls         |$LN10@pqdownheap|
  000c8		 |$LN13@pqdownheap|

; 466  : 
; 467  :         /* Exchange v with the smallest son */
; 468  :         s->heap[k] = s->heap[j];  k = j;

  000c8	93407c48	 sxtw        x8,w2
  000cc	910ba909	 add         x9,x8,#0x2EA
  000d0	b829780d	 str         w13,[x0,x9 lsl #2]
  000d4	b9549c09	 ldr         w9,[x0,#0x149C]
  000d8	2a0b03e2	 mov         w2,w11

; 469  : 
; 470  :         /* And continue down the tree, setting j to the left son of k */
; 471  :         j <<= 1;

  000dc	531f796b	 lsl         w11,w11,#1
  000e0	6b09017f	 cmp         w11,w9
  000e4	5400000d	 ble         |$LN16@pqdownheap|
  000e8		 |$LN10@pqdownheap|

; 472  :     }
; 473  :     s->heap[k] = v;

  000e8	93407c48	 sxtw        x8,w2
  000ec	910ba909	 add         x9,x8,#0x2EA
  000f0	b829780f	 str         w15,[x0,x9 lsl #2]
  000f4	d65f03c0	 ret

			 ENDP  ; |pqdownheap|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\trees.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gen_bitlen| PROC

; 489  : {

  00000	a9bf53f3	 stp         x19,x20,[sp,#-0x10]!

; 490  :     ct_data *tree        = desc->dyn_tree;
; 491  :     int max_code         = desc->max_code;
; 492  :     const ct_data *stree = desc->stat_desc->static_tree;

  00004	f9400828	 ldr         x8,[x1,#0x10]

; 493  :     const intf *extra    = desc->stat_desc->extra_bits;
; 494  :     int base             = desc->stat_desc->extra_base;
; 495  :     int max_length       = desc->stat_desc->max_length;
; 496  :     int h;              /* heap index */
; 497  :     int n, m;           /* iterate over the tree elements */
; 498  :     int bits;           /* bit length */
; 499  :     int xbits;          /* extra bits */
; 500  :     ush f;              /* frequency */
; 501  :     int overflow = 0;   /* number of elements with bit length too large */

  00008	52800002	 mov         w2,#0
  0000c	f9400026	 ldr         x6,[x1]
  00010	b9400825	 ldr         w5,[x1,#8]
  00014	a9400503	 ldp         x3,x1,[x8]
  00018	b9401104	 ldr         w4,[x8,#0x10]
  0001c	b940190d	 ldr         w13,[x8,#0x18]

; 502  : 
; 503  :     for (bits = 0; bits <= MAX_BITS; bits++) s->bl_count[bits] = 0;

  00020	f905c41f	 str         xzr,[x0,#0xB88]
  00024	f905c81f	 str         xzr,[x0,#0xB90]
  00028	f905cc1f	 str         xzr,[x0,#0xB98]
  0002c	f905d01f	 str         xzr,[x0,#0xBA0]

; 504  : 
; 505  :     /* In a first pass, compute the optimal bit lengths (which may
; 506  :      * overflow in the case of the bit length tree).
; 507  :      */
; 508  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

  00030	b994a008	 ldrsw       x8,[x0,#0x14A0]
  00034	910ba908	 add         x8,x8,#0x2EA
  00038	b8687809	 ldr         w9,[x0,x8 lsl #2]
  0003c	8b29c8ca	 add         x10,x6,w9,sxtw #2
  00040	7900055f	 strh        wzr,[x10,#2]

; 509  : 
; 510  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  00044	b954a008	 ldr         w8,[x0,#0x14A0]
  00048	93407d0a	 sxtw        x10,w8
  0004c	f108f15f	 cmp         x10,#0x23C
  00050	11000509	 add         w9,w8,#1
  00054	5400000a	 bge         |$LN14@gen_bitlen|

; 504  : 
; 505  :     /* In a first pass, compute the optimal bit lengths (which may
; 506  :      * overflow in the case of the bit length tree).
; 507  :      */
; 508  :     tree[s->heap[s->heap_max]].Len = 0; /* root of the heap */

  00058	d28047ab	 mov         x11,#0x23D
  0005c	cb29c16c	 sub         x12,x11,w9,sxtw #0
  00060	910bad48	 add         x8,x10,#0x2EB
  00064	8b080813	 add         x19,x0,x8,lsl #2
  00068	0b090194	 add         w20,w12,w9
  0006c		 |$LL7@gen_bitlen|

; 511  :         n = s->heap[h];

  0006c	b840466e	 ldr         w14,[x19],#4

; 512  :         bits = tree[tree[n].Dad].Len + 1;

  00070	93407dc8	 sxtw        x8,w14
  00074	8b0808cb	 add         x11,x6,x8,lsl #2
  00078	d37ef507	 lsl         x7,x8,#2
  0007c	79400569	 ldrh        w9,[x11,#2]
  00080	8b0908c8	 add         x8,x6,x9,lsl #2
  00084	7940050a	 ldrh        w10,[x8,#2]
  00088	11000549	 add         w9,w10,#1

; 513  :         if (bits > max_length) bits = max_length, overflow++;
; 514  :         tree[n].Len = (ush)bits;

  0008c	6b0d013f	 cmp         w9,w13
  00090	1a8dd12f	 cselle      w15,w9,w13
  00094	6b0d013f	 cmp         w9,w13
  00098	7900056f	 strh        w15,[x11,#2]
  0009c	1a82d442	 cincgt      w2,w2

; 515  :         /* We overwrite tree[n].Dad which is no longer needed */
; 516  : 
; 517  :         if (n > max_code) continue; /* not a leaf node */

  000a0	6b0501df	 cmp         w14,w5
  000a4	5400000c	 bgt         |$LN5@gen_bitlen|

; 518  : 
; 519  :         s->bl_count[bits]++;

  000a8	93407de8	 sxtw        x8,w15
  000ac	9117110a	 add         x10,x8,#0x5C4
  000b0	786a7809	 ldrh        w9,[x0,x10 lsl #1]

; 520  :         xbits = 0;

  000b4	5280000b	 mov         w11,#0

; 521  :         if (n >= base) xbits = extra[n-base];

  000b8	6b0401df	 cmp         w14,w4
  000bc	11000528	 add         w8,w9,#1
  000c0	782a7808	 strh        w8,[x0,x10 lsl #1]
  000c4	5400000b	 blt         |$LN20@gen_bitlen|
  000c8	4b0401c8	 sub         w8,w14,w4
  000cc	b868d82b	 ldr         w11,[x1,w8 sxtw #2]
  000d0		 |$LN20@gen_bitlen|

; 522  :         f = tree[n].Freq;
; 523  :         s->opt_len += (ulg)f * (unsigned)(bits + xbits);

  000d0	786668ee	 ldrh        w14,[x7,x6]
  000d4	0b0b01e9	 add         w9,w15,w11
  000d8	b9570008	 ldr         w8,[x0,#0x1700]
  000dc	1b0e2129	 madd        w9,w9,w14,w8
  000e0	b9170009	 str         w9,[x0,#0x1700]

; 524  :         if (stree) s->static_len += (ulg)f * (unsigned)(stree[n].Len + xbits);

  000e4	b4000003	 cbz         x3,|$LN5@gen_bitlen|
  000e8	8b0300e8	 add         x8,x7,x3
  000ec	79400509	 ldrh        w9,[x8,#2]
  000f0	b9570408	 ldr         w8,[x0,#0x1704]
  000f4	0b0b012a	 add         w10,w9,w11
  000f8	1b0e2149	 madd        w9,w10,w14,w8
  000fc	b9170409	 str         w9,[x0,#0x1704]
  00100		 |$LN5@gen_bitlen|

; 509  : 
; 510  :     for (h = s->heap_max+1; h < HEAP_SIZE; h++) {

  00100	d100058c	 sub         x12,x12,#1
  00104	b500000c	 cbnz        x12,|$LL7@gen_bitlen|

; 525  :     }
; 526  :     if (overflow == 0) return;

  00108	34000002	 cbz         w2,|$LN14@gen_bitlen|
  0010c	93407dae	 sxtw        x14,w13
  00110	91170dcc	 add         x12,x14,#0x5C3
  00114	911711cf	 add         x15,x14,#0x5C4
  00118	529fffe7	 mov         w7,#0xFFFF
  0011c	529fffe4	 mov         w4,#0xFFFF
  00120		 |$LL10@gen_bitlen|

; 534  :         while (s->bl_count[bits] == 0) bits--;

  00120	786c7808	 ldrh        w8,[x0,x12 lsl #1]
  00124	d10005cb	 sub         x11,x14,#1
  00128	35000008	 cbnz        w8,|$LN12@gen_bitlen|

; 527  : 
; 528  :     Tracev((stderr,"\nbit length overflow\n"));
; 529  :     /* This happens for example on obj2 and pic of the Calgary corpus */
; 530  : 
; 531  :     /* Find the first bit length which could increase: */
; 532  :     do {
; 533  :         bits = max_length-1;

  0012c	8b0c0409	 add         x9,x0,x12,lsl #1
  00130		 |$LL11@gen_bitlen|

; 534  :         while (s->bl_count[bits] == 0) bits--;

  00130	785fed28	 ldrh        w8,[x9,#-2]!
  00134	d100056b	 sub         x11,x11,#1
  00138	34000008	 cbz         w8,|$LL11@gen_bitlen|
  0013c		 |$LN12@gen_bitlen|

; 535  :         s->bl_count[bits]--;      /* move one leaf down the tree */

  0013c	9117116a	 add         x10,x11,#0x5C4
  00140	786a7808	 ldrh        w8,[x0,x10 lsl #1]

; 536  :         s->bl_count[bits+1] += 2; /* move one overflow item as its brother */

  00144	9117156b	 add         x11,x11,#0x5C5

; 537  :         s->bl_count[max_length]--;
; 538  :         /* The brother of the overflow item also moves one step up,
; 539  :          * but this does not affect bl_count[max_length]
; 540  :          */
; 541  :         overflow -= 2;

  00148	51000842	 sub         w2,w2,#2

; 542  :     } while (overflow > 0);

  0014c	7100005f	 cmp         w2,#0
  00150	0b070108	 add         w8,w8,w7
  00154	782a7808	 strh        w8,[x0,x10 lsl #1]
  00158	786b7808	 ldrh        w8,[x0,x11 lsl #1]
  0015c	11000908	 add         w8,w8,#2
  00160	782b7808	 strh        w8,[x0,x11 lsl #1]
  00164	786f780a	 ldrh        w10,[x0,x15 lsl #1]
  00168	0b040148	 add         w8,w10,w4
  0016c	782f7808	 strh        w8,[x0,x15 lsl #1]
  00170	5400000c	 bgt         |$LL10@gen_bitlen|

; 543  : 
; 544  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 545  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 546  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 547  :      * from 'ar' written by Haruhiko Okumura.)
; 548  :      */
; 549  :     for (bits = max_length; bits != 0; bits--) {

  00174	3400000d	 cbz         w13,|$LN14@gen_bitlen|
  00178	93407e8e	 sxtw        x14,w20
  0017c	8b0f0404	 add         x4,x0,x15,lsl #1
  00180		 |$LL15@gen_bitlen|

; 550  :         n = s->bl_count[bits];

  00180	785fe48b	 ldrh        w11,[x4],#-2

; 551  :         while (n != 0) {

  00184	3400000b	 cbz         w11,|$LN13@gen_bitlen|

; 550  :         n = s->bl_count[bits];

  00188	910ba9c8	 add         x8,x14,#0x2EA
  0018c	8b08080f	 add         x15,x0,x8,lsl #2
  00190		 |$LL16@gen_bitlen|

; 552  :             m = s->heap[--h];

  00190	b85fcde8	 ldr         w8,[x15,#-4]!
  00194	d10005ce	 sub         x14,x14,#1

; 553  :             if (m > max_code) continue;

  00198	6b05011f	 cmp         w8,w5
  0019c	5400000c	 bgt         |$LN36@gen_bitlen|

; 554  :             if ((unsigned) tree[m].Len != (unsigned) bits) {

  001a0	8b28c8cc	 add         x12,x6,w8,sxtw #2
  001a4	79400589	 ldrh        w9,[x12,#2]
  001a8	6b0d013f	 cmp         w9,w13
  001ac	54000000	 beq         |$LN24@gen_bitlen|

; 555  :                 Tracev((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
; 556  :                 s->opt_len += ((ulg)bits - tree[m].Len) * tree[m].Freq;

  001b0	4b0901aa	 sub         w10,w13,w9
  001b4	b9570008	 ldr         w8,[x0,#0x1700]
  001b8	79400189	 ldrh        w9,[x12]
  001bc	1b092149	 madd        w9,w10,w9,w8
  001c0	b9170009	 str         w9,[x0,#0x1700]

; 557  :                 tree[m].Len = (ush)bits;

  001c4	7900058d	 strh        w13,[x12,#2]
  001c8		 |$LN24@gen_bitlen|

; 558  :             }
; 559  :             n--;

  001c8	5100056b	 sub         w11,w11,#1
  001cc		 |$LN36@gen_bitlen|

; 551  :         while (n != 0) {

  001cc	3500000b	 cbnz        w11,|$LL16@gen_bitlen|
  001d0		 |$LN13@gen_bitlen|

; 543  : 
; 544  :     /* Now recompute all bit lengths, scanning in increasing frequency.
; 545  :      * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
; 546  :      * lengths instead of fixing only the wrong ones. This idea is taken
; 547  :      * from 'ar' written by Haruhiko Okumura.)
; 548  :      */
; 549  :     for (bits = max_length; bits != 0; bits--) {

  001d0	510005ad	 sub         w13,w13,#1
  001d4	3500000d	 cbnz        w13,|$LL15@gen_bitlen|
  001d8		 |$LN14@gen_bitlen|
  001d8	a8c153f3	 ldp         x19,x20,[sp],#0x10
  001dc	d65f03c0	 ret

			 ENDP  ; |gen_bitlen|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\trees.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gen_codes| PROC

; 576  : {

  00000	a9bd7bfd	 stp         fp,lr,[sp,#-0x30]!
  00004	910003fd	 mov         fp,sp

; 577  :     ush next_code[MAX_BITS+1]; /* next code value for each bit length */
; 578  :     unsigned code = 0;         /* running code value */

  00008	91004be8	 add         x8,sp,#0x12
  0000c	cb08004e	 sub         x14,x2,x8
  00010	aa0003ec	 mov         x12,x0
  00014	5280000d	 mov         w13,#0
  00018	91004bea	 add         x10,sp,#0x12
  0001c	d28001eb	 mov         x11,#0xF
  00020		 |$LL14@gen_codes|

; 579  :     int bits;                  /* bit index */
; 580  :     int n;                     /* code index */
; 581  : 
; 582  :     /* The distribution counts are first used to generate the code values
; 583  :      * without bit reversal.
; 584  :      */
; 585  :     for (bits = 1; bits <= MAX_BITS; bits++) {
; 586  :         code = (code + bl_count[bits-1]) << 1;

  00020	786a69c8	 ldrh        w8,[x14,x10]
  00024	d100056b	 sub         x11,x11,#1
  00028	0b0d0108	 add         w8,w8,w13
  0002c	531f790d	 lsl         w13,w8,#1

; 587  :         next_code[bits] = (ush)code;

  00030	7800254d	 strh        w13,[x10],#2
  00034	b500000b	 cbnz        x11,|$LL14@gen_codes|

; 588  :     }
; 589  :     /* Check that the bit counts in bl_count are consistent. The last code
; 590  :      * must be all ones.
; 591  :      */
; 592  :     Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
; 593  :             "inconsistent bit counts");
; 594  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 595  : 
; 596  :     for (n = 0;  n <= max_code; n++) {

  00038	37f80001	 tbnz        x1,#0x1F,|$LN6@gen_codes|
  0003c	1100042b	 add         w11,w1,#1
  00040	910043ed	 add         x13,sp,#0x10
  00044		 |$LL7@gen_codes|

; 597  :         int len = tree[n].Len;

  00044	79400581	 ldrh        w1,[x12,#2]

; 598  :         if (len == 0) continue;

  00048	34000001	 cbz         w1,|$LN5@gen_codes|

; 599  :         /* Now reverse the bits */
; 600  :         tree[n].Code = (ush)bi_reverse(next_code[len]++, len);

  0004c	7861d9a0	 ldrh        w0,[x13,w1 sxtw #1]
  00050	11000408	 add         w8,w0,#1
  00054	7821d9a8	 strh        w8,[x13,w1 sxtw #1]
  00058	94000000	 bl          bi_reverse
  0005c	79000180	 strh        w0,[x12]
  00060		 |$LN5@gen_codes|

; 588  :     }
; 589  :     /* Check that the bit counts in bl_count are consistent. The last code
; 590  :      * must be all ones.
; 591  :      */
; 592  :     Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
; 593  :             "inconsistent bit counts");
; 594  :     Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
; 595  : 
; 596  :     for (n = 0;  n <= max_code; n++) {

  00060	9100118c	 add         x12,x12,#4
  00064	5100056b	 sub         w11,w11,#1
  00068	3500000b	 cbnz        w11,|$LL7@gen_codes|
  0006c		 |$LN6@gen_codes|
  0006c	a8c37bfd	 ldp         fp,lr,[sp],#0x30
  00070	d65f03c0	 ret

			 ENDP  ; |gen_codes|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\trees.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |build_tree| PROC

; 618  : {

  00000	a9bc53f3	 stp         x19,x20,[sp,#-0x40]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	a90263f7	 stp         x23,x24,[sp,#0x20]
  0000c	f9001bf9	 str         x25,[sp,#0x30]
  00010	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00014	910003fd	 mov         fp,sp
  00018	aa0103f7	 mov         x23,x1

; 620  :     const ct_data *stree  = desc->stat_desc->static_tree;

  0001c	f9400ae8	 ldr         x8,[x23,#0x10]

; 621  :     int elems             = desc->stat_desc->elems;
; 622  :     int n, m;          /* iterate over heap elements */
; 623  :     int max_code = -1; /* largest code with non zero frequency */

  00020	12800014	 mov         w20,#-1
  00024	f94002f5	 ldr         x21,[x23]
  00028	5280000b	 mov         w11,#0
  0002c	5280000c	 mov         w12,#0
  00030	b9401516	 ldr         w22,[x8,#0x14]
  00034	f940010f	 ldr         x15,[x8]

; 624  :     int node;          /* new node being created */
; 625  : 
; 626  :     /* Construct the initial heap, with least frequent element in
; 627  :      * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
; 628  :      * heap[0] is not used.
; 629  :      */
; 630  :     s->heap_len = 0, s->heap_max = HEAP_SIZE;

  00038	528047a8	 mov         w8,#0x23D
  0003c	b9149c1f	 str         wzr,[x0,#0x149C]
  00040	b914a008	 str         w8,[x0,#0x14A0]

; 631  : 
; 632  :     for (n = 0; n < elems; n++) {

  00044	710002df	 cmp         w22,#0
  00048	5400000d	 ble         |$LN35@build_tree|

; 619  :     ct_data *tree         = desc->dyn_tree;

  0004c	d2829488	 mov         x8,#0x14A4
  00050	8b08000c	 add         x12,x0,x8
  00054	aa1503ed	 mov         x13,x21
  00058		 |$LL4@build_tree|

; 633  :         if (tree[n].Freq != 0) {

  00058	784045a8	 ldrh        w8,[x13],#4
  0005c	34000008	 cbz         w8,|$LN13@build_tree|

; 634  :             s->heap[++(s->heap_len)] = max_code = n;

  00060	b9549c09	 ldr         w9,[x0,#0x149C]
  00064	2a0b03f4	 mov         w20,w11
  00068	11000528	 add         w8,w9,#1
  0006c	93407d29	 sxtw        x9,w9
  00070	b9149c08	 str         w8,[x0,#0x149C]
  00074	910bad2a	 add         x10,x9,#0x2EB
  00078	b82a780b	 str         w11,[x0,x10 lsl #2]

; 635  :             s->depth[n] = 0;

  0007c	3900019f	 strb        wzr,[x12]

; 636  :         } else {

  00080	14000002	 b           |$LN2@build_tree|
  00084		 |$LN13@build_tree|

; 637  :             tree[n].Len = 0;

  00084	781fe1bf	 sturh       wzr,[x13,#-2]
  00088		 |$LN2@build_tree|

; 631  : 
; 632  :     for (n = 0; n < elems; n++) {

  00088	1100056b	 add         w11,w11,#1
  0008c	6b16017f	 cmp         w11,w22
  00090	9100058c	 add         x12,x12,#1
  00094	5400000b	 blt         |$LL4@build_tree|

; 638  :         }
; 639  :     }
; 640  : 
; 641  :     /* The pkzip format requires that at least one distance code exists,
; 642  :      * and that at least one bit should be sent even if there is only one
; 643  :      * possible code. So to avoid special checks later on we force at least
; 644  :      * two codes of non zero frequency.
; 645  :      */
; 646  :     while (s->heap_len < 2) {

  00098	b9549c0c	 ldr         w12,[x0,#0x149C]
  0009c	7100099f	 cmp         w12,#2
  000a0	5400000a	 bge         |$LN6@build_tree|
  000a4		 |$LN35@build_tree|
  000a4	93407e8d	 sxtw        x13,w20
  000a8	52800027	 mov         w7,#1
  000ac	d2829486	 mov         x6,#0x14A4
  000b0		 |$LL5@build_tree|

; 647  :         node = s->heap[++(s->heap_len)] = (max_code < 2 ? ++max_code : 0);

  000b0	910005ab	 add         x11,x13,#1
  000b4	71000a9f	 cmp         w20,#2
  000b8	9a8ba1ad	 cselge      x13,x13,x11
  000bc	11000689	 add         w9,w20,#1
  000c0	71000a9f	 cmp         w20,#2
  000c4	1a89a28e	 cselge      w14,w20,w9
  000c8	11000588	 add         w8,w12,#1
  000cc	71000a9f	 cmp         w20,#2
  000d0	b9149c08	 str         w8,[x0,#0x149C]
  000d4	1a89a3ea	 cselge      w10,wzr,w9
  000d8	93407d88	 sxtw        x8,w12
  000dc	71000a9f	 cmp         w20,#2
  000e0	910bad09	 add         x9,x8,#0x2EB
  000e4	9a8ba3e8	 cselge      x8,xzr,x11
  000e8	b829780a	 str         w10,[x0,x9 lsl #2]

; 648  :         tree[node].Freq = 1;

  000ec	d37ef50c	 lsl         x12,x8,#2

; 649  :         s->depth[node] = 0;

  000f0	8b000108	 add         x8,x8,x0
  000f4	78356987	 strh        w7,[x12,x21]
  000f8	3826691f	 strb        wzr,[x8,x6]

; 650  :         s->opt_len--; if (stree) s->static_len -= stree[node].Len;

  000fc	b9570009	 ldr         w9,[x0,#0x1700]
  00100	5100052a	 sub         w10,w9,#1
  00104	b917000a	 str         w10,[x0,#0x1700]
  00108	b400000f	 cbz         x15,|$LN15@build_tree|
  0010c	8b0f0188	 add         x8,x12,x15
  00110	b9570409	 ldr         w9,[x0,#0x1704]
  00114	7940050a	 ldrh        w10,[x8,#2]
  00118	4b0a0128	 sub         w8,w9,w10
  0011c	b9170408	 str         w8,[x0,#0x1704]
  00120		 |$LN15@build_tree|

; 638  :         }
; 639  :     }
; 640  : 
; 641  :     /* The pkzip format requires that at least one distance code exists,
; 642  :      * and that at least one bit should be sent even if there is only one
; 643  :      * possible code. So to avoid special checks later on we force at least
; 644  :      * two codes of non zero frequency.
; 645  :      */
; 646  :     while (s->heap_len < 2) {

  00120	b9549c0c	 ldr         w12,[x0,#0x149C]
  00124	2a0e03f4	 mov         w20,w14
  00128	7100099f	 cmp         w12,#2
  0012c	5400000b	 blt         |$LL5@build_tree|
  00130		 |$LN6@build_tree|

; 651  :         /* node is 0 or 1 so it does not have extra bits */
; 652  :     }
; 653  :     desc->max_code = max_code;

  00130	b9000af4	 str         w20,[x23,#8]

; 654  : 
; 655  :     /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
; 656  :      * establish sub-heaps of increasing lengths:
; 657  :      */
; 658  :     for (n = s->heap_len/2; n >= 1; n--) pqdownheap(s, tree, n);

  00134	b9549c0b	 ldr         w11,[x0,#0x149C]
  00138	0b4b7d68	 add         w8,w11,w11,lsr #0x1F
  0013c	13017d13	 asr         w19,w8,#1
  00140	7100067f	 cmp         w19,#1
  00144	5400000b	 blt         |$LN8@build_tree|
  00148		 |$LL9@build_tree|
  00148	2a1303e2	 mov         w2,w19
  0014c	aa1503e1	 mov         x1,x21
  00150	94000000	 bl          pqdownheap
  00154	51000673	 sub         w19,w19,#1
  00158	7100067f	 cmp         w19,#1
  0015c	5400000a	 bge         |$LL9@build_tree|
  00160	b9549c0b	 ldr         w11,[x0,#0x149C]
  00164		 |$LN8@build_tree|

; 659  : 
; 660  :     /* Construct the Huffman tree by repeatedly combining the least two
; 661  :      * frequent nodes.
; 662  :      */
; 663  :     node = elems;              /* next internal node of the tree */

  00164	8b36c008	 add         x8,x0,w22,sxtw #0
  00168	d2829489	 mov         x9,#0x14A4
  0016c	8b36cab9	 add         x25,x21,w22,sxtw #2
  00170	8b090118	 add         x24,x8,x9
  00174		 |$LL12@build_tree|

; 664  :     do {
; 665  :         pqremove(s, tree, n);  /* n = node of least frequency */

  00174	93407d68	 sxtw        x8,w11
  00178	b94bac13	 ldr         w19,[x0,#0xBAC]
  0017c	910ba909	 add         x9,x8,#0x2EA
  00180	b869780a	 ldr         w10,[x0,x9 lsl #2]
  00184	51000568	 sub         w8,w11,#1
  00188	52800022	 mov         w2,#1
  0018c	b9149c08	 str         w8,[x0,#0x149C]
  00190	aa1503e1	 mov         x1,x21
  00194	b90bac0a	 str         w10,[x0,#0xBAC]
  00198	94000000	 bl          pqdownheap

; 666  :         m = s->heap[SMALLEST]; /* m = node of next least frequency */
; 667  : 
; 668  :         s->heap[--(s->heap_max)] = n; /* keep the nodes sorted by frequency */

  0019c	b954a001	 ldr         w1,[x0,#0x14A0]
  001a0	b94bac0e	 ldr         w14,[x0,#0xBAC]

; 669  :         s->heap[--(s->heap_max)] = m;
; 670  : 
; 671  :         /* Create a new node father of n and m */
; 672  :         tree[node].Freq = tree[n].Freq + tree[m].Freq;

  001a4	8b33caad	 add         x13,x21,w19,sxtw #2

; 673  :         s->depth[node] = (uch)((s->depth[n] >= s->depth[m] ?
; 674  :                                 s->depth[n] : s->depth[m]) + 1);
; 675  :         tree[n].Dad = tree[m].Dad = (ush)node;
; 676  : #ifdef DUMP_BL_TREE
; 677  :         if (tree == s->bl_tree) {
; 678  :             fprintf(stderr,"\nnode %d(%d), sons %d(%d) %d(%d)",
; 679  :                     node, tree[node].Freq, n, tree[n].Freq, m, tree[m].Freq);
; 680  :         }
; 681  : #endif
; 682  :         /* and insert the new node in the heap */
; 683  :         s->heap[SMALLEST] = node++;
; 684  :         pqdownheap(s, tree, SMALLEST);

  001a8	52800022	 mov         w2,#1
  001ac	93407c29	 sxtw        x9,w1
  001b0	51000428	 sub         w8,w1,#1
  001b4	8b2ecaac	 add         x12,x21,w14,sxtw #2
  001b8	b914a008	 str         w8,[x0,#0x14A0]
  001bc	910ba52a	 add         x10,x9,#0x2E9
  001c0	b82a7813	 str         w19,[x0,x10 lsl #2]
  001c4	b954a00b	 ldr         w11,[x0,#0x14A0]
  001c8	aa1503e1	 mov         x1,x21
  001cc	93407d69	 sxtw        x9,w11
  001d0	51000568	 sub         w8,w11,#1
  001d4	910ba52a	 add         x10,x9,#0x2E9
  001d8	b914a008	 str         w8,[x0,#0x14A0]
  001dc	b82a780e	 str         w14,[x0,x10 lsl #2]
  001e0	79400189	 ldrh        w9,[x12]
  001e4	8b33c00a	 add         x10,x0,w19,sxtw #0
  001e8	794001a8	 ldrh        w8,[x13]
  001ec	0b080128	 add         w8,w9,w8
  001f0	78004728	 strh        w8,[x25],#4
  001f4	d2829488	 mov         x8,#0x14A4
  001f8	3868694b	 ldrb        w11,[x10,x8]
  001fc	8b2ec008	 add         x8,x0,w14,sxtw #0
  00200	d2829489	 mov         x9,#0x14A4
  00204	38696909	 ldrb        w9,[x8,x9]
  00208	6b09017f	 cmp         w11,w9
  0020c	1a8b3128	 csello      w8,w9,w11
  00210	11000509	 add         w9,w8,#1
  00214	38001709	 strb        w9,[x24],#1
  00218	79000596	 strh        w22,[x12,#2]
  0021c	790005b6	 strh        w22,[x13,#2]
  00220	b90bac16	 str         w22,[x0,#0xBAC]
  00224	110006d6	 add         w22,w22,#1
  00228	94000000	 bl          pqdownheap

; 685  : 
; 686  :     } while (s->heap_len >= 2);

  0022c	b9549c0b	 ldr         w11,[x0,#0x149C]
  00230	7100097f	 cmp         w11,#2
  00234	5400000a	 bge         |$LL12@build_tree|

; 687  : 
; 688  :     s->heap[--(s->heap_max)] = s->heap[SMALLEST];

  00238	b954a009	 ldr         w9,[x0,#0x14A0]

; 689  : 
; 690  :     /* At this point, the fields freq and dad are set. We can now
; 691  :      * generate the bit lengths.
; 692  :      */
; 693  :     gen_bitlen(s, (tree_desc *)desc);

  0023c	aa1703e1	 mov         x1,x23
  00240	51000528	 sub         w8,w9,#1
  00244	b914a008	 str         w8,[x0,#0x14A0]
  00248	b94bac08	 ldr         w8,[x0,#0xBAC]
  0024c	93407d29	 sxtw        x9,w9
  00250	910ba52a	 add         x10,x9,#0x2E9
  00254	b82a7808	 str         w8,[x0,x10 lsl #2]
  00258	94000000	 bl          gen_bitlen

; 694  : 
; 695  :     /* The field len is now set, we can generate the bit codes */
; 696  :     gen_codes ((ct_data *)tree, max_code, s->bl_count);

  0025c	912e2002	 add         x2,x0,#0xB88
  00260	aa1503e0	 mov         x0,x21
  00264	2a1403e1	 mov         w1,w20
  00268	94000000	 bl          gen_codes
  0026c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00270	f9401bf9	 ldr         x25,[sp,#0x30]
  00274	a94263f7	 ldp         x23,x24,[sp,#0x20]
  00278	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  0027c	a8c453f3	 ldp         x19,x20,[sp],#0x40
  00280	d65f03c0	 ret

			 ENDP  ; |build_tree|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\trees.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |scan_tree| PROC

; 708  :     int n;                     /* iterates over all tree elements */
; 709  :     int prevlen = -1;          /* last emitted length */
; 710  :     int curlen;                /* length of current code */
; 711  :     int nextlen = tree[0].Len; /* length of next code */
; 712  :     int count = 0;             /* repeat count of the current code */
; 713  :     int max_count = 7;         /* max repeat count */
; 714  :     int min_count = 4;         /* min repeat count */
; 715  : 
; 716  :     if (nextlen == 0) max_count = 138, min_count = 3;
; 717  :     tree[max_code+1].Len = (ush)0xffff; /* guard */

  00000	8b22c828	 add         x8,x1,w2,sxtw #2
  00004	529fffe9	 mov         w9,#0xFFFF
  00008	7940042e	 ldrh        w14,[x1,#2]
  0000c	1280000a	 mov         w10,#-1
  00010	79000d09	 strh        w9,[x8,#6]
  00014	5280000c	 mov         w12,#0

; 718  : 
; 719  :     for (n = 0; n <= max_code; n++) {

  00018	37f80002	 tbnz        x2,#0x1F,|$LN3@scan_tree|

; 708  :     int n;                     /* iterates over all tree elements */
; 709  :     int prevlen = -1;          /* last emitted length */
; 710  :     int curlen;                /* length of current code */
; 711  :     int nextlen = tree[0].Len; /* length of next code */
; 712  :     int count = 0;             /* repeat count of the current code */
; 713  :     int max_count = 7;         /* max repeat count */
; 714  :     int min_count = 4;         /* min repeat count */
; 715  : 
; 716  :     if (nextlen == 0) max_count = 138, min_count = 3;
; 717  :     tree[max_code+1].Len = (ush)0xffff; /* guard */

  0001c	710001df	 cmp         w14,#0
  00020	52801148	 mov         w8,#0x8A
  00024	528000e9	 mov         w9,#7
  00028	1a881129	 cselne      w9,w9,w8
  0002c	710001df	 cmp         w14,#0
  00030	52800068	 mov         w8,#3
  00034	5280008b	 mov         w11,#4
  00038	1a881168	 cselne      w8,w11,w8
  0003c	91001826	 add         x6,x1,#6
  00040	11000447	 add         w7,w2,#1
  00044		 |$LL4@scan_tree|

; 720  :         curlen = nextlen; nextlen = tree[n+1].Len;

  00044	2a0e03ed	 mov         w13,w14
  00048	2a0e03ef	 mov         w15,w14
  0004c	784044ce	 ldrh        w14,[x6],#4

; 721  :         if (++count < max_count && curlen == nextlen) {

  00050	1100058c	 add         w12,w12,#1
  00054	6b09019f	 cmp         w12,w9
  00058	7a4eb1a0	 ccmplt      w13,w14,#0
  0005c	54000000	 beq         |$LN2@scan_tree|

; 722  :             continue;
; 723  :         } else if (count < min_count) {

  00060	6b08019f	 cmp         w12,w8
  00064	5400000a	 bge         |$LN8@scan_tree|

; 724  :             s->bl_tree[curlen].Freq += count;

  00068	d3407da8	 uxtw        x8,w13
  0006c	910aa509	 add         x9,x8,#0x2A9
  00070	d37ef52b	 lsl         x11,x9,#2
  00074	7860696a	 ldrh        w10,[x11,x0]
  00078	0b0c0148	 add         w8,w10,w12
  0007c	78206968	 strh        w8,[x11,x0]
  00080	14000017	 b           |$LN14@scan_tree|
  00084		 |$LN8@scan_tree|

; 725  :         } else if (curlen != 0) {

  00084	3400000d	 cbz         w13,|$LN10@scan_tree|

; 726  :             if (curlen != prevlen) s->bl_tree[curlen].Freq++;

  00088	6b0a01ff	 cmp         w15,w10
  0008c	54000000	 beq         |$LN25@scan_tree|
  00090	d3407da8	 uxtw        x8,w13
  00094	910aa509	 add         x9,x8,#0x2A9
  00098	d37ef52b	 lsl         x11,x9,#2
  0009c	7860696a	 ldrh        w10,[x11,x0]
  000a0	11000548	 add         w8,w10,#1
  000a4	78206968	 strh        w8,[x11,x0]
  000a8		 |$LN25@scan_tree|

; 727  :             s->bl_tree[REP_3_6].Freq++;

  000a8	7955c808	 ldrh        w8,[x0,#0xAE4]
  000ac	11000508	 add         w8,w8,#1
  000b0	7915c808	 strh        w8,[x0,#0xAE4]
  000b4	1400000a	 b           |$LN14@scan_tree|
  000b8		 |$LN10@scan_tree|

; 728  :         } else if (count <= 10) {

  000b8	7100299f	 cmp         w12,#0xA
  000bc	5400000c	 bgt         |$LN13@scan_tree|

; 729  :             s->bl_tree[REPZ_3_10].Freq++;

  000c0	7955d008	 ldrh        w8,[x0,#0xAE8]
  000c4	11000508	 add         w8,w8,#1
  000c8	7915d008	 strh        w8,[x0,#0xAE8]

; 730  :         } else {

  000cc	14000004	 b           |$LN14@scan_tree|
  000d0		 |$LN13@scan_tree|

; 731  :             s->bl_tree[REPZ_11_138].Freq++;

  000d0	7955d808	 ldrh        w8,[x0,#0xAEC]
  000d4	11000508	 add         w8,w8,#1
  000d8	7915d808	 strh        w8,[x0,#0xAEC]
  000dc		 |$LN14@scan_tree|

; 732  :         }
; 733  :         count = 0; prevlen = curlen;

  000dc	5280000c	 mov         w12,#0
  000e0	2a0f03ea	 mov         w10,w15

; 734  :         if (nextlen == 0) {

  000e4	3500000e	 cbnz        w14,|$LN15@scan_tree|

; 735  :             max_count = 138, min_count = 3;

  000e8	52801149	 mov         w9,#0x8A
  000ec	52800068	 mov         w8,#3
  000f0	14000008	 b           |$LN2@scan_tree|
  000f4		 |$LN15@scan_tree|

; 736  :         } else if (curlen == nextlen) {

  000f4	6b0e01bf	 cmp         w13,w14
  000f8	54000001	 bne         |$LN17@scan_tree|

; 737  :             max_count = 6, min_count = 3;

  000fc	528000c9	 mov         w9,#6
  00100	52800068	 mov         w8,#3

; 738  :         } else {

  00104	14000003	 b           |$LN2@scan_tree|
  00108		 |$LN17@scan_tree|

; 739  :             max_count = 7, min_count = 4;

  00108	528000e9	 mov         w9,#7
  0010c	52800088	 mov         w8,#4
  00110		 |$LN2@scan_tree|

; 718  : 
; 719  :     for (n = 0; n <= max_code; n++) {

  00110	510004e7	 sub         w7,w7,#1
  00114	35000007	 cbnz        w7,|$LL4@scan_tree|
  00118		 |$LN3@scan_tree|
  00118	d65f03c0	 ret

			 ENDP  ; |scan_tree|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\trees.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |send_tree| PROC

; 752  : {

  00000	a9bd5bf5	 stp         x21,x22,[sp,#-0x30]!
  00004	a90163f7	 stp         x23,x24,[sp,#0x10]
  00008	f90013f9	 str         x25,[sp,#0x20]

; 753  :     int n;                     /* iterates over all tree elements */
; 754  :     int prevlen = -1;          /* last emitted length */
; 755  :     int curlen;                /* length of current code */
; 756  :     int nextlen = tree[0].Len; /* length of next code */

  0000c	79400425	 ldrh        w5,[x1,#2]
  00010	1280000a	 mov         w10,#-1

; 757  :     int count = 0;             /* repeat count of the current code */

  00014	5280000c	 mov         w12,#0

; 758  :     int max_count = 7;         /* max repeat count */
; 759  :     int min_count = 4;         /* min repeat count */
; 760  : 
; 761  :     /* tree[max_code+1].Len = -1; */  /* guard already set */
; 762  :     if (nextlen == 0) max_count = 138, min_count = 3;
; 763  : 
; 764  :     for (n = 0; n <= max_code; n++) {

  00018	37f80002	 tbnz        x2,#0x1F,|$LN3@send_tree|
  0001c	710000bf	 cmp         w5,#0
  00020	52801148	 mov         w8,#0x8A
  00024	528000e9	 mov         w9,#7
  00028	1a881129	 cselne      w9,w9,w8
  0002c	710000bf	 cmp         w5,#0
  00030	52800068	 mov         w8,#3
  00034	5280008b	 mov         w11,#4
  00038	1a881168	 cselne      w8,w11,w8
  0003c	91001837	 add         x23,x1,#6
  00040	11000455	 add         w21,w2,#1
  00044		 |$LL4@send_tree|

; 765  :         curlen = nextlen; nextlen = tree[n+1].Len;

  00044	2a0503e4	 mov         w4,w5
  00048	2a0503f6	 mov         w22,w5
  0004c	784046e5	 ldrh        w5,[x23],#4
  00050	2a0c03ef	 mov         w15,w12

; 766  :         if (++count < max_count && curlen == nextlen) {

  00054	1100058c	 add         w12,w12,#1
  00058	6b09019f	 cmp         w12,w9
  0005c	7a45b080	 ccmplt      w4,w5,#0
  00060	54000000	 beq         |$LN2@send_tree|

; 767  :             continue;
; 768  :         } else if (count < min_count) {

  00064	6b08019f	 cmp         w12,w8
  00068	5400000a	 bge         |$LN11@send_tree|
  0006c	d3407c88	 uxtw        x8,w4
  00070	8b080803	 add         x3,x0,x8,lsl #2
  00074	910aa508	 add         x8,x8,#0x2A9
  00078	8b080802	 add         x2,x0,x8,lsl #2
  0007c	d282e209	 mov         x9,#0x1710
  00080	d282e288	 mov         x8,#0x1714
  00084	8b08000f	 add         x15,x0,x8
  00088	8b09000d	 add         x13,x0,x9
  0008c	52800218	 mov         w24,#0x10
  00090	52800219	 mov         w25,#0x10
  00094		 |$LL7@send_tree|

; 769  :             do { send_code(s, curlen, s->bl_tree); } while (--count != 0);

  00094	b94001ea	 ldr         w10,[x15]
  00098	79400046	 ldrh        w6,[x2]
  0009c	794001a8	 ldrh        w8,[x13]
  000a0	79554c6e	 ldrh        w14,[x3,#0xAA6]
  000a4	1aca20c9	 lsl         w9,w6,w10
  000a8	2a080128	 orr         w8,w9,w8
  000ac	4b0e0309	 sub         w9,w24,w14
  000b0	6b09015f	 cmp         w10,w9
  000b4	53003d07	 uxth        w7,w8
  000b8	5400000d	 ble         |$LN13@send_tree|
  000bc	b9402809	 ldr         w9,[x0,#0x28]
  000c0	790001a7	 strh        w7,[x13]
  000c4	f9400808	 ldr         x8,[x0,#0x10]
  000c8	38294907	 strb        w7,[x8,w9 uxtw #0]
  000cc	b9402809	 ldr         w9,[x0,#0x28]
  000d0	f940080a	 ldr         x10,[x0,#0x10]
  000d4	394005a8	 ldrb        w8,[x13,#1]
  000d8	1100052b	 add         w11,w9,#1
  000dc	b900280b	 str         w11,[x0,#0x28]
  000e0	382b4948	 strb        w8,[x10,w11 uxtw #0]
  000e4	b94001eb	 ldr         w11,[x15]
  000e8	b9402809	 ldr         w9,[x0,#0x28]
  000ec	4b0b0328	 sub         w8,w25,w11
  000f0	1100052a	 add         w10,w9,#1
  000f4	1ac824c9	 lsr         w9,w6,w8
  000f8	b900280a	 str         w10,[x0,#0x28]
  000fc	0b0e0168	 add         w8,w11,w14
  00100	5100410a	 sub         w10,w8,#0x10
  00104	53003d27	 uxth        w7,w9
  00108	14000002	 b           |$LN5@send_tree|
  0010c		 |$LN13@send_tree|
  0010c	0b0e014a	 add         w10,w10,w14
  00110		 |$LN5@send_tree|
  00110	b90001ea	 str         w10,[x15]
  00114	5100058c	 sub         w12,w12,#1
  00118	790001a7	 strh        w7,[x13]
  0011c	3500000c	 cbnz        w12,|$LL7@send_tree|

; 770  : 
; 771  :         } else if (curlen != 0) {

  00120	1400010c	 b           |$LN33@send_tree|
  00124		 |$LN11@send_tree|
  00124	34000004	 cbz         w4,|$LN15@send_tree|

; 772  :             if (curlen != prevlen) {

  00128	6b0a02df	 cmp         w22,w10
  0012c	54000000	 beq         |$LN46@send_tree|

; 773  :                 send_code(s, curlen, s->bl_tree); count--;

  00130	d3407c89	 uxtw        x9,w4
  00134	b957140a	 ldr         w10,[x0,#0x1714]
  00138	8b090808	 add         x8,x0,x9,lsl #2
  0013c	5280020b	 mov         w11,#0x10
  00140	79554d0e	 ldrh        w14,[x8,#0xAA6]
  00144	d282e208	 mov         x8,#0x1710
  00148	8b08000c	 add         x12,x0,x8
  0014c	910aa528	 add         x8,x9,#0x2A9
  00150	d37ef509	 lsl         x9,x8,#2
  00154	79400188	 ldrh        w8,[x12]
  00158	78606927	 ldrh        w7,[x9,x0]
  0015c	1aca20e9	 lsl         w9,w7,w10
  00160	2a080128	 orr         w8,w9,w8
  00164	4b0e0169	 sub         w9,w11,w14
  00168	6b09015f	 cmp         w10,w9
  0016c	53003d0d	 uxth        w13,w8
  00170	5400000d	 ble         |$LN18@send_tree|
  00174	b9402809	 ldr         w9,[x0,#0x28]
  00178	7900018d	 strh        w13,[x12]
  0017c	f9400808	 ldr         x8,[x0,#0x10]
  00180	3829490d	 strb        w13,[x8,w9 uxtw #0]
  00184	b9402809	 ldr         w9,[x0,#0x28]
  00188	f940080a	 ldr         x10,[x0,#0x10]
  0018c	39400588	 ldrb        w8,[x12,#1]
  00190	1100052b	 add         w11,w9,#1
  00194	b900280b	 str         w11,[x0,#0x28]
  00198	382b4948	 strb        w8,[x10,w11 uxtw #0]
  0019c	b957140b	 ldr         w11,[x0,#0x1714]
  001a0	52800208	 mov         w8,#0x10
  001a4	b9402809	 ldr         w9,[x0,#0x28]
  001a8	4b0b0108	 sub         w8,w8,w11
  001ac	1100052a	 add         w10,w9,#1
  001b0	1ac824e9	 lsr         w9,w7,w8
  001b4	b900280a	 str         w10,[x0,#0x28]
  001b8	0b0e0168	 add         w8,w11,w14
  001bc	5100410a	 sub         w10,w8,#0x10
  001c0	53003d2d	 uxth        w13,w9
  001c4	14000002	 b           |$LN19@send_tree|
  001c8		 |$LN18@send_tree|
  001c8	0b0e014a	 add         w10,w10,w14
  001cc		 |$LN19@send_tree|
  001cc	b917140a	 str         w10,[x0,#0x1714]
  001d0	7900018d	 strh        w13,[x12]
  001d4	2a0f03ec	 mov         w12,w15
  001d8		 |$LN46@send_tree|

; 774  :             }
; 775  :             Assert(count >= 3 && count <= 6, " 3_6?");
; 776  :             send_code(s, REP_3_6, s->bl_tree); send_bits(s, count-3, 2);

  001d8	d282e288	 mov         x8,#0x1714
  001dc	b957140a	 ldr         w10,[x0,#0x1714]
  001e0	8b08000f	 add         x15,x0,x8
  001e4	7955c806	 ldrh        w6,[x0,#0xAE4]
  001e8	d282e208	 mov         x8,#0x1710
  001ec	7955cc0d	 ldrh        w13,[x0,#0xAE6]
  001f0	8b08000e	 add         x14,x0,x8
  001f4	796e2008	 ldrh        w8,[x0,#0x1710]
  001f8	5280020b	 mov         w11,#0x10
  001fc	1aca20c9	 lsl         w9,w6,w10
  00200	2a080128	 orr         w8,w9,w8
  00204	4b0d0169	 sub         w9,w11,w13
  00208	6b09015f	 cmp         w10,w9
  0020c	53003d07	 uxth        w7,w8
  00210	5400000d	 ble         |$LN20@send_tree|
  00214	b9402809	 ldr         w9,[x0,#0x28]
  00218	790001c7	 strh        w7,[x14]
  0021c	f9400808	 ldr         x8,[x0,#0x10]
  00220	38294907	 strb        w7,[x8,w9 uxtw #0]
  00224	b9402809	 ldr         w9,[x0,#0x28]
  00228	f940080a	 ldr         x10,[x0,#0x10]
  0022c	394005c8	 ldrb        w8,[x14,#1]
  00230	1100052b	 add         w11,w9,#1
  00234	b900280b	 str         w11,[x0,#0x28]
  00238	382b4948	 strb        w8,[x10,w11 uxtw #0]
  0023c	b94001eb	 ldr         w11,[x15]
  00240	52800208	 mov         w8,#0x10
  00244	b9402809	 ldr         w9,[x0,#0x28]
  00248	4b0b0108	 sub         w8,w8,w11
  0024c	1100052a	 add         w10,w9,#1
  00250	1ac824c9	 lsr         w9,w6,w8
  00254	b900280a	 str         w10,[x0,#0x28]
  00258	0b0d0168	 add         w8,w11,w13
  0025c	5100410a	 sub         w10,w8,#0x10
  00260	53003d27	 uxth        w7,w9
  00264	14000002	 b           |$LN21@send_tree|
  00268		 |$LN20@send_tree|
  00268	0b0d014a	 add         w10,w10,w13
  0026c		 |$LN21@send_tree|
  0026c	b90001ea	 str         w10,[x15]
  00270	53003ceb	 uxth        w11,w7
  00274	790001c7	 strh        w7,[x14]
  00278	7100395f	 cmp         w10,#0xE
  0027c	5400000d	 ble         |$LN22@send_tree|
  00280	51000d8d	 sub         w13,w12,#3
  00284	1aca21a8	 lsl         w8,w13,w10
  00288	b940280a	 ldr         w10,[x0,#0x28]
  0028c	2a0b0109	 orr         w9,w8,w11
  00290	f9400808	 ldr         x8,[x0,#0x10]
  00294	790001c9	 strh        w9,[x14]
  00298	382a4909	 strb        w9,[x8,w10 uxtw #0]
  0029c	b9402809	 ldr         w9,[x0,#0x28]
  002a0	f940080a	 ldr         x10,[x0,#0x10]
  002a4	394005c8	 ldrb        w8,[x14,#1]
  002a8	1100052c	 add         w12,w9,#1
  002ac	b900280c	 str         w12,[x0,#0x28]
  002b0	382c4948	 strb        w8,[x10,w12 uxtw #0]
  002b4	b9402809	 ldr         w9,[x0,#0x28]
  002b8	b94001eb	 ldr         w11,[x15]
  002bc	1100052a	 add         w10,w9,#1
  002c0	51003968	 sub         w8,w11,#0xE
  002c4	b900280a	 str         w10,[x0,#0x28]
  002c8	52800209	 mov         w9,#0x10
  002cc	b90001e8	 str         w8,[x15]
  002d0	4b0b0129	 sub         w9,w9,w11
  002d4	53003da8	 uxth        w8,w13
  002d8	1ac9250a	 lsr         w10,w8,w9
  002dc	53003d49	 uxth        w9,w10
  002e0	790001c9	 strh        w9,[x14]
  002e4	1400009b	 b           |$LN33@send_tree|
  002e8		 |$LN22@send_tree|
  002e8	529fffa9	 mov         w9,#0xFFFD
  002ec	11000948	 add         w8,w10,#2
  002f0	0b090189	 add         w9,w12,w9
  002f4	b90001e8	 str         w8,[x15]
  002f8	1aca2128	 lsl         w8,w9,w10
  002fc	2a0b010a	 orr         w10,w8,w11
  00300	53003d49	 uxth        w9,w10
  00304	790001c9	 strh        w9,[x14]
  00308	14000092	 b           |$LN33@send_tree|
  0030c		 |$LN15@send_tree|

; 777  : 
; 778  :         } else if (count <= 10) {

  0030c	d282e209	 mov         x9,#0x1710
  00310	b957140a	 ldr         w10,[x0,#0x1714]
  00314	d282e288	 mov         x8,#0x1714
  00318	8b09000e	 add         x14,x0,x9
  0031c	796e2009	 ldrh        w9,[x0,#0x1710]
  00320	8b08000f	 add         x15,x0,x8
  00324	7100299f	 cmp         w12,#0xA
  00328	5280020b	 mov         w11,#0x10
  0032c	5400000c	 bgt         |$LN24@send_tree|

; 779  :             send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);

  00330	7955d006	 ldrh        w6,[x0,#0xAE8]
  00334	7955d40d	 ldrh        w13,[x0,#0xAEA]
  00338	1aca20c8	 lsl         w8,w6,w10
  0033c	2a090108	 orr         w8,w8,w9
  00340	4b0d0169	 sub         w9,w11,w13
  00344	6b09015f	 cmp         w10,w9
  00348	53003d07	 uxth        w7,w8
  0034c	5400000d	 ble         |$LN26@send_tree|
  00350	b9402809	 ldr         w9,[x0,#0x28]
  00354	790001c7	 strh        w7,[x14]
  00358	f9400808	 ldr         x8,[x0,#0x10]
  0035c	38294907	 strb        w7,[x8,w9 uxtw #0]
  00360	b9402809	 ldr         w9,[x0,#0x28]
  00364	f940080a	 ldr         x10,[x0,#0x10]
  00368	394005c8	 ldrb        w8,[x14,#1]
  0036c	1100052b	 add         w11,w9,#1
  00370	b900280b	 str         w11,[x0,#0x28]
  00374	382b4948	 strb        w8,[x10,w11 uxtw #0]
  00378	b94001eb	 ldr         w11,[x15]
  0037c	52800208	 mov         w8,#0x10
  00380	b9402809	 ldr         w9,[x0,#0x28]
  00384	4b0b0108	 sub         w8,w8,w11
  00388	1100052a	 add         w10,w9,#1
  0038c	1ac824c9	 lsr         w9,w6,w8
  00390	b900280a	 str         w10,[x0,#0x28]
  00394	0b0d0168	 add         w8,w11,w13
  00398	5100410a	 sub         w10,w8,#0x10
  0039c	53003d27	 uxth        w7,w9
  003a0	14000002	 b           |$LN27@send_tree|
  003a4		 |$LN26@send_tree|
  003a4	0b0d014a	 add         w10,w10,w13
  003a8		 |$LN27@send_tree|
  003a8	b90001ea	 str         w10,[x15]
  003ac	53003ceb	 uxth        w11,w7
  003b0	790001c7	 strh        w7,[x14]
  003b4	7100355f	 cmp         w10,#0xD
  003b8	5400000d	 ble         |$LN28@send_tree|
  003bc	51000d8d	 sub         w13,w12,#3
  003c0	1aca21a8	 lsl         w8,w13,w10
  003c4	b940280a	 ldr         w10,[x0,#0x28]
  003c8	2a0b0109	 orr         w9,w8,w11
  003cc	f9400808	 ldr         x8,[x0,#0x10]
  003d0	790001c9	 strh        w9,[x14]
  003d4	382a4909	 strb        w9,[x8,w10 uxtw #0]
  003d8	b9402809	 ldr         w9,[x0,#0x28]
  003dc	f940080a	 ldr         x10,[x0,#0x10]
  003e0	394005c8	 ldrb        w8,[x14,#1]
  003e4	1100052c	 add         w12,w9,#1
  003e8	b900280c	 str         w12,[x0,#0x28]
  003ec	382c4948	 strb        w8,[x10,w12 uxtw #0]
  003f0	b9402809	 ldr         w9,[x0,#0x28]
  003f4	b94001eb	 ldr         w11,[x15]
  003f8	1100052a	 add         w10,w9,#1
  003fc	51003568	 sub         w8,w11,#0xD
  00400	b900280a	 str         w10,[x0,#0x28]
  00404	52800209	 mov         w9,#0x10
  00408	b90001e8	 str         w8,[x15]
  0040c	4b0b0129	 sub         w9,w9,w11
  00410	53003da8	 uxth        w8,w13
  00414	1ac9250a	 lsr         w10,w8,w9

; 780  : 
; 781  :         } else {

  00418	53003d49	 uxth        w9,w10
  0041c	790001c9	 strh        w9,[x14]
  00420	1400004c	 b           |$LN33@send_tree|
  00424		 |$LN28@send_tree|

; 779  :             send_code(s, REPZ_3_10, s->bl_tree); send_bits(s, count-3, 3);

  00424	529fffa9	 mov         w9,#0xFFFD
  00428	11000d48	 add         w8,w10,#3
  0042c	0b090189	 add         w9,w12,w9
  00430	b90001e8	 str         w8,[x15]
  00434	1aca2128	 lsl         w8,w9,w10
  00438	2a0b010a	 orr         w10,w8,w11

; 780  : 
; 781  :         } else {

  0043c	53003d49	 uxth        w9,w10
  00440	790001c9	 strh        w9,[x14]
  00444	14000043	 b           |$LN33@send_tree|
  00448		 |$LN24@send_tree|

; 782  :             send_code(s, REPZ_11_138, s->bl_tree); send_bits(s, count-11, 7);

  00448	7955d807	 ldrh        w7,[x0,#0xAEC]
  0044c	7955dc0d	 ldrh        w13,[x0,#0xAEE]
  00450	1aca20e8	 lsl         w8,w7,w10
  00454	2a090108	 orr         w8,w8,w9
  00458	4b0d0169	 sub         w9,w11,w13
  0045c	6b09015f	 cmp         w10,w9
  00460	53003d06	 uxth        w6,w8
  00464	5400000d	 ble         |$LN30@send_tree|
  00468	b9402809	 ldr         w9,[x0,#0x28]
  0046c	790001c6	 strh        w6,[x14]
  00470	f9400808	 ldr         x8,[x0,#0x10]
  00474	38294906	 strb        w6,[x8,w9 uxtw #0]
  00478	b9402809	 ldr         w9,[x0,#0x28]
  0047c	f940080a	 ldr         x10,[x0,#0x10]
  00480	394005c8	 ldrb        w8,[x14,#1]
  00484	1100052b	 add         w11,w9,#1
  00488	b900280b	 str         w11,[x0,#0x28]
  0048c	382b4948	 strb        w8,[x10,w11 uxtw #0]
  00490	b94001eb	 ldr         w11,[x15]
  00494	52800208	 mov         w8,#0x10
  00498	b9402809	 ldr         w9,[x0,#0x28]
  0049c	4b0b0108	 sub         w8,w8,w11
  004a0	1100052a	 add         w10,w9,#1
  004a4	1ac824e9	 lsr         w9,w7,w8
  004a8	b900280a	 str         w10,[x0,#0x28]
  004ac	0b0d0168	 add         w8,w11,w13
  004b0	51004107	 sub         w7,w8,#0x10
  004b4	53003d26	 uxth        w6,w9
  004b8	14000002	 b           |$LN31@send_tree|
  004bc		 |$LN30@send_tree|
  004bc	0b0d0147	 add         w7,w10,w13
  004c0		 |$LN31@send_tree|
  004c0	b90001e7	 str         w7,[x15]
  004c4	53003cca	 uxth        w10,w6
  004c8	790001c6	 strh        w6,[x14]
  004cc	710024ff	 cmp         w7,#9
  004d0	5400000d	 ble         |$LN32@send_tree|
  004d4	51002d8d	 sub         w13,w12,#0xB
  004d8	1ac721a8	 lsl         w8,w13,w7
  004dc	2a0a0109	 orr         w9,w8,w10
  004e0	b940280a	 ldr         w10,[x0,#0x28]
  004e4	f9400808	 ldr         x8,[x0,#0x10]
  004e8	790001c9	 strh        w9,[x14]
  004ec	382a4909	 strb        w9,[x8,w10 uxtw #0]
  004f0	b9402809	 ldr         w9,[x0,#0x28]
  004f4	f940080a	 ldr         x10,[x0,#0x10]
  004f8	394005c8	 ldrb        w8,[x14,#1]
  004fc	1100052c	 add         w12,w9,#1
  00500	b900280c	 str         w12,[x0,#0x28]
  00504	382c4948	 strb        w8,[x10,w12 uxtw #0]
  00508	b9402809	 ldr         w9,[x0,#0x28]
  0050c	52800208	 mov         w8,#0x10
  00510	b94001eb	 ldr         w11,[x15]
  00514	1100052a	 add         w10,w9,#1
  00518	53003da9	 uxth        w9,w13
  0051c	b900280a	 str         w10,[x0,#0x28]
  00520	4b0b0108	 sub         w8,w8,w11
  00524	1ac8252a	 lsr         w10,w9,w8
  00528	51002569	 sub         w9,w11,#9
  0052c	b90001e9	 str         w9,[x15]
  00530	14000007	 b           |$LN49@send_tree|
  00534		 |$LN32@send_tree|
  00534	529ffea8	 mov         w8,#0xFFF5
  00538	0b080188	 add         w8,w12,w8
  0053c	1ac72109	 lsl         w9,w8,w7
  00540	11001ce8	 add         w8,w7,#7
  00544	b90001e8	 str         w8,[x15]
  00548	2a0a012a	 orr         w10,w9,w10
  0054c		 |$LN49@send_tree|

; 783  :         }
; 784  :         count = 0; prevlen = curlen;

  0054c	790001ca	 strh        w10,[x14]
  00550		 |$LN33@send_tree|
  00550	5280000c	 mov         w12,#0
  00554	2a1603ea	 mov         w10,w22

; 785  :         if (nextlen == 0) {

  00558	35000005	 cbnz        w5,|$LN34@send_tree|

; 786  :             max_count = 138, min_count = 3;

  0055c	52801149	 mov         w9,#0x8A
  00560	52800068	 mov         w8,#3
  00564	14000008	 b           |$LN2@send_tree|
  00568		 |$LN34@send_tree|

; 787  :         } else if (curlen == nextlen) {

  00568	6b05009f	 cmp         w4,w5
  0056c	54000001	 bne         |$LN36@send_tree|

; 788  :             max_count = 6, min_count = 3;

  00570	528000c9	 mov         w9,#6
  00574	52800068	 mov         w8,#3

; 789  :         } else {

  00578	14000003	 b           |$LN2@send_tree|
  0057c		 |$LN36@send_tree|

; 790  :             max_count = 7, min_count = 4;

  0057c	528000e9	 mov         w9,#7
  00580	52800088	 mov         w8,#4
  00584		 |$LN2@send_tree|

; 758  :     int max_count = 7;         /* max repeat count */
; 759  :     int min_count = 4;         /* min repeat count */
; 760  : 
; 761  :     /* tree[max_code+1].Len = -1; */  /* guard already set */
; 762  :     if (nextlen == 0) max_count = 138, min_count = 3;
; 763  : 
; 764  :     for (n = 0; n <= max_code; n++) {

  00584	510006b5	 sub         w21,w21,#1
  00588	35000015	 cbnz        w21,|$LL4@send_tree|
  0058c		 |$LN3@send_tree|
  0058c	f94013f9	 ldr         x25,[sp,#0x20]
  00590	a94163f7	 ldp         x23,x24,[sp,#0x10]
  00594	a8c35bf5	 ldp         x21,x22,[sp],#0x30
  00598	d65f03c0	 ret

			 ENDP  ; |send_tree|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\trees.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |build_bl_tree| PROC

; 801  : {

  00000	f81f0ff3	 str         x19,[sp,#-0x10]!
  00004	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00008	910003fd	 mov         fp,sp
  0000c	aa0003f3	 mov         x19,x0

; 802  :     int max_blindex;  /* index of last bit length code of non zero freq */
; 803  : 
; 804  :     /* Determine the bit length frequencies for literal and distance trees */
; 805  :     scan_tree(s, (ct_data *)s->dyn_ltree, s->l_desc.max_code);

  00010	b94b4a62	 ldr         w2,[x19,#0xB48]
  00014	9102f261	 add         x1,x19,#0xBC
  00018	94000000	 bl          scan_tree

; 806  :     scan_tree(s, (ct_data *)s->dyn_dtree, s->d_desc.max_code);

  0001c	b94b6262	 ldr         w2,[x19,#0xB60]
  00020	9126c261	 add         x1,x19,#0x9B0
  00024	94000000	 bl          scan_tree

; 807  : 
; 808  :     /* Build the bit length tree: */
; 809  :     build_tree(s, (tree_desc *)(&(s->bl_desc)));

  00028	912dc261	 add         x1,x19,#0xB70
  0002c	94000000	 bl          build_tree
  00030	90000008	 adrp        x8,bl_order
  00034	91000108	 add         x8,x8,PageOffset(bl_order)
  00038	9100410a	 add         x10,x8,#0x10
  0003c	91004108	 add         x8,x8,#0x10
  00040	d2800249	 mov         x9,#0x12

; 810  :     /* opt_len now includes the length of the tree representations, except
; 811  :      * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
; 812  :      */
; 813  : 
; 814  :     /* Determine the number of bit length codes to send. The pkzip format
; 815  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 816  :      * 3 but the actual value used is 4.)
; 817  :      */
; 818  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  00044	52800240	 mov         w0,#0x12
  00048	cb08012b	 sub         x11,x9,x8
  0004c		 |$LL4@build_bl_t|

; 819  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  0004c	39400948	 ldrb        w8,[x10,#2]
  00050	8b080a68	 add         x8,x19,x8,lsl #2
  00054	79554d09	 ldrh        w9,[x8,#0xAA6]
  00058	35000009	 cbnz        w9,|$LN14@build_bl_t|
  0005c	39400548	 ldrb        w8,[x10,#1]
  00060	8b080a68	 add         x8,x19,x8,lsl #2
  00064	79554d09	 ldrh        w9,[x8,#0xAA6]
  00068	35000009	 cbnz        w9,|$LN11@build_bl_t|
  0006c	385fc548	 ldrb        w8,[x10],#-4
  00070	8b080a68	 add         x8,x19,x8,lsl #2
  00074	79554d09	 ldrh        w9,[x8,#0xAA6]
  00078	35000009	 cbnz        w9,|$LN12@build_bl_t|
  0007c	39400d48	 ldrb        w8,[x10,#3]
  00080	8b080a68	 add         x8,x19,x8,lsl #2
  00084	79554d09	 ldrh        w9,[x8,#0xAA6]
  00088	35000009	 cbnz        w9,|$LN13@build_bl_t|

; 810  :     /* opt_len now includes the length of the tree representations, except
; 811  :      * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
; 812  :      */
; 813  : 
; 814  :     /* Determine the number of bit length codes to send. The pkzip format
; 815  :      * requires that at least 4 bit length codes be sent. (appnote.txt says
; 816  :      * 3 but the actual value used is 4.)
; 817  :      */
; 818  :     for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {

  0008c	8b0a0168	 add         x8,x11,x10
  00090	f1000d1f	 cmp         x8,#3
  00094	51001000	 sub         w0,w0,#4
  00098	5400000a	 bge         |$LL4@build_bl_t|
  0009c	14000006	 b           |$LN14@build_bl_t|
  000a0		 |$LN13@build_bl_t|

; 819  :         if (s->bl_tree[bl_order[max_blindex]].Len != 0) break;

  000a0	51000c00	 sub         w0,w0,#3
  000a4	14000004	 b           |$LN14@build_bl_t|
  000a8		 |$LN12@build_bl_t|
  000a8	51000800	 sub         w0,w0,#2
  000ac	14000002	 b           |$LN14@build_bl_t|
  000b0		 |$LN11@build_bl_t|
  000b0	51000400	 sub         w0,w0,#1
  000b4		 |$LN14@build_bl_t|

; 820  :     }
; 821  :     /* Update opt_len to include the bit length tree and counts */
; 822  :     s->opt_len += 3*((ulg)max_blindex+1) + 5+5+4;

  000b4	b9570268	 ldr         w8,[x19,#0x1700]
  000b8	0b000409	 add         w9,w0,w0,lsl #1
  000bc	0b080129	 add         w9,w9,w8
  000c0	1100452a	 add         w10,w9,#0x11
  000c4	b917026a	 str         w10,[x19,#0x1700]
  000c8	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000cc	f84107f3	 ldr         x19,[sp],#0x10
  000d0	d65f03c0	 ret

			 ENDP  ; |build_bl_tree|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\trees.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |send_all_trees| PROC

; 837  : {

  00000	a9bf53f3	 stp         x19,x20,[sp,#-0x10]!
  00004	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00008	910003fd	 mov         fp,sp
  0000c	aa0003f3	 mov         x19,x0

; 838  :     int rank;                    /* index in bl_order */
; 839  : 
; 840  :     Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
; 841  :     Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
; 842  :             "too many codes");
; 843  :     Tracev((stderr, "\nbl counts: "));
; 844  :     send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */

  00010	d282e288	 mov         x8,#0x1714
  00014	b9571669	 ldr         w9,[x19,#0x1714]
  00018	8b08026f	 add         x15,x19,x8
  0001c	796e226a	 ldrh        w10,[x19,#0x1710]
  00020	d282e208	 mov         x8,#0x1710
  00024	2a0203f4	 mov         w20,w2
  00028	71002d3f	 cmp         w9,#0xB
  0002c	8b08026e	 add         x14,x19,x8
  00030	5400000d	 ble         |$LN5@send_all_t|
  00034	5104042d	 sub         w13,w1,#0x101
  00038	1ac921a8	 lsl         w8,w13,w9
  0003c	2a0a0109	 orr         w9,w8,w10
  00040	b9402a6a	 ldr         w10,[x19,#0x28]
  00044	f9400a68	 ldr         x8,[x19,#0x10]
  00048	790001c9	 strh        w9,[x14]
  0004c	382a4909	 strb        w9,[x8,w10 uxtw #0]
  00050	b9402a69	 ldr         w9,[x19,#0x28]
  00054	f9400a6a	 ldr         x10,[x19,#0x10]
  00058	394005c8	 ldrb        w8,[x14,#1]
  0005c	1100052c	 add         w12,w9,#1
  00060	b9002a6c	 str         w12,[x19,#0x28]
  00064	382c4948	 strb        w8,[x10,w12 uxtw #0]
  00068	b9402a69	 ldr         w9,[x19,#0x28]
  0006c	b94001e8	 ldr         w8,[x15]
  00070	1100052a	 add         w10,w9,#1
  00074	52800209	 mov         w9,#0x10
  00078	b9002a6a	 str         w10,[x19,#0x28]
  0007c	51002d0b	 sub         w11,w8,#0xB
  00080	4b080128	 sub         w8,w9,w8
  00084	53003da9	 uxth        w9,w13
  00088	1ac8252a	 lsr         w10,w9,w8
  0008c	14000006	 b           |$LN18@send_all_t|
  00090		 |$LN5@send_all_t|
  00090	529fdfe8	 mov         w8,#0xFEFF
  00094	0b080028	 add         w8,w1,w8
  00098	1100152b	 add         w11,w9,#5
  0009c	1ac92109	 lsl         w9,w8,w9
  000a0	2a0a012a	 orr         w10,w9,w10
  000a4		 |$LN18@send_all_t|

; 845  :     send_bits(s, dcodes-1,   5);

  000a4	53003d48	 uxth        w8,w10
  000a8	b90001eb	 str         w11,[x15]
  000ac	790001c8	 strh        w8,[x14]
  000b0	53003d0a	 uxth        w10,w8
  000b4	71002d7f	 cmp         w11,#0xB
  000b8	5400000d	 ble         |$LN7@send_all_t|
  000bc	5100068d	 sub         w13,w20,#1
  000c0	1acb21a8	 lsl         w8,w13,w11
  000c4	2a0a0109	 orr         w9,w8,w10
  000c8	b9402a6a	 ldr         w10,[x19,#0x28]
  000cc	f9400a68	 ldr         x8,[x19,#0x10]
  000d0	790001c9	 strh        w9,[x14]
  000d4	382a4909	 strb        w9,[x8,w10 uxtw #0]
  000d8	b9402a69	 ldr         w9,[x19,#0x28]
  000dc	f9400a6a	 ldr         x10,[x19,#0x10]
  000e0	394005c8	 ldrb        w8,[x14,#1]
  000e4	1100052c	 add         w12,w9,#1
  000e8	b9002a6c	 str         w12,[x19,#0x28]
  000ec	382c4948	 strb        w8,[x10,w12 uxtw #0]
  000f0	b9402a69	 ldr         w9,[x19,#0x28]
  000f4	b94001e8	 ldr         w8,[x15]
  000f8	1100052a	 add         w10,w9,#1
  000fc	52800209	 mov         w9,#0x10
  00100	b9002a6a	 str         w10,[x19,#0x28]
  00104	51002d0c	 sub         w12,w8,#0xB
  00108	4b080128	 sub         w8,w9,w8
  0010c	53003da9	 uxth        w9,w13
  00110	1ac8252a	 lsr         w10,w9,w8
  00114	14000006	 b           |$LN19@send_all_t|
  00118		 |$LN7@send_all_t|
  00118	529fffe8	 mov         w8,#0xFFFF
  0011c	0b080288	 add         w8,w20,w8
  00120	1acb2109	 lsl         w9,w8,w11
  00124	2a0a012a	 orr         w10,w9,w10
  00128	1100156c	 add         w12,w11,#5
  0012c		 |$LN19@send_all_t|

; 846  :     send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */

  0012c	53003d48	 uxth        w8,w10
  00130	b90001ec	 str         w12,[x15]
  00134	790001c8	 strh        w8,[x14]
  00138	53003d0a	 uxth        w10,w8
  0013c	7100319f	 cmp         w12,#0xC
  00140	5400000d	 ble         |$LN9@send_all_t|
  00144	5100106d	 sub         w13,w3,#4
  00148	1acc21a8	 lsl         w8,w13,w12
  0014c	2a0a0109	 orr         w9,w8,w10
  00150	b9402a6a	 ldr         w10,[x19,#0x28]
  00154	f9400a68	 ldr         x8,[x19,#0x10]
  00158	790001c9	 strh        w9,[x14]
  0015c	382a4909	 strb        w9,[x8,w10 uxtw #0]
  00160	b9402a69	 ldr         w9,[x19,#0x28]
  00164	f9400a6a	 ldr         x10,[x19,#0x10]
  00168	394005c8	 ldrb        w8,[x14,#1]
  0016c	1100052c	 add         w12,w9,#1
  00170	b9002a6c	 str         w12,[x19,#0x28]
  00174	382c4948	 strb        w8,[x10,w12 uxtw #0]
  00178	b9402a69	 ldr         w9,[x19,#0x28]
  0017c	b94001e8	 ldr         w8,[x15]
  00180	1100052a	 add         w10,w9,#1
  00184	52800209	 mov         w9,#0x10
  00188	b9002a6a	 str         w10,[x19,#0x28]
  0018c	5100310b	 sub         w11,w8,#0xC
  00190	4b080128	 sub         w8,w9,w8
  00194	53003da9	 uxth        w9,w13
  00198	1ac8252a	 lsr         w10,w9,w8
  0019c	14000006	 b           |$LN20@send_all_t|
  001a0		 |$LN9@send_all_t|
  001a0	529fff88	 mov         w8,#0xFFFC
  001a4	0b080068	 add         w8,w3,w8
  001a8	1acc2109	 lsl         w9,w8,w12
  001ac	2a0a012a	 orr         w10,w9,w10
  001b0	1100118b	 add         w11,w12,#4
  001b4		 |$LN20@send_all_t|

; 847  :     for (rank = 0; rank < blcodes; rank++) {

  001b4	53003d48	 uxth        w8,w10
  001b8	b90001eb	 str         w11,[x15]
  001bc	790001c8	 strh        w8,[x14]
  001c0	7100007f	 cmp         w3,#0
  001c4	5400000d	 ble         |$LN3@send_all_t|
  001c8	90000008	 adrp        x8,bl_order
  001cc	9100010d	 add         x13,x8,PageOffset(bl_order)
  001d0		 |$LL4@send_all_t|

; 848  :         Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
; 849  :         send_bits(s, s->bl_tree[bl_order[rank]].Len, 3);

  001d0	384015a8	 ldrb        w8,[x13],#1
  001d4	2a0b03e9	 mov         w9,w11
  001d8	794001ca	 ldrh        w10,[x14]
  001dc	7100353f	 cmp         w9,#0xD
  001e0	8b080a68	 add         x8,x19,x8,lsl #2
  001e4	79554d0c	 ldrh        w12,[x8,#0xAA6]
  001e8	1ac92188	 lsl         w8,w12,w9
  001ec	2a0a0108	 orr         w8,w8,w10
  001f0	5400000d	 ble         |$LN11@send_all_t|
  001f4	53003d0a	 uxth        w10,w8
  001f8	b9402a69	 ldr         w9,[x19,#0x28]
  001fc	f9400a68	 ldr         x8,[x19,#0x10]
  00200	790001ca	 strh        w10,[x14]
  00204	3829490a	 strb        w10,[x8,w9 uxtw #0]
  00208	b9402a69	 ldr         w9,[x19,#0x28]
  0020c	f9400a6a	 ldr         x10,[x19,#0x10]
  00210	394005c8	 ldrb        w8,[x14,#1]
  00214	1100052b	 add         w11,w9,#1
  00218	b9002a6b	 str         w11,[x19,#0x28]
  0021c	382b4948	 strb        w8,[x10,w11 uxtw #0]
  00220	b9402a69	 ldr         w9,[x19,#0x28]
  00224	b94001e8	 ldr         w8,[x15]
  00228	1100052a	 add         w10,w9,#1
  0022c	52800209	 mov         w9,#0x10
  00230	b9002a6a	 str         w10,[x19,#0x28]
  00234	5100350b	 sub         w11,w8,#0xD
  00238	4b080128	 sub         w8,w9,w8
  0023c	1ac82589	 lsr         w9,w12,w8
  00240	53003d28	 uxth        w8,w9
  00244	14000003	 b           |$LN21@send_all_t|
  00248		 |$LN11@send_all_t|
  00248	11000d2b	 add         w11,w9,#3
  0024c	53003d08	 uxth        w8,w8
  00250		 |$LN21@send_all_t|

; 847  :     for (rank = 0; rank < blcodes; rank++) {

  00250	b90001eb	 str         w11,[x15]
  00254	51000463	 sub         w3,w3,#1
  00258	790001c8	 strh        w8,[x14]
  0025c	35000003	 cbnz        w3,|$LL4@send_all_t|
  00260		 |$LN3@send_all_t|

; 850  :     }
; 851  :     Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
; 852  : 
; 853  :     send_tree(s, (ct_data *)s->dyn_ltree, lcodes-1); /* literal tree */

  00260	51000422	 sub         w2,w1,#1
  00264	9102f261	 add         x1,x19,#0xBC
  00268	aa1303e0	 mov         x0,x19
  0026c	94000000	 bl          send_tree

; 854  :     Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
; 855  : 
; 856  :     send_tree(s, (ct_data *)s->dyn_dtree, dcodes-1); /* distance tree */

  00270	51000682	 sub         w2,w20,#1
  00274	9126c261	 add         x1,x19,#0x9B0
  00278	aa1303e0	 mov         x0,x19
  0027c	94000000	 bl          send_tree
  00280	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00284	a8c153f3	 ldp         x19,x20,[sp],#0x10
  00288	d65f03c0	 ret

			 ENDP  ; |send_all_trees|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\trees.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |_tr_tally| PROC

; 1019 :     s->d_buf[s->last_lit] = (ush)dist;

  00000	b956f409	 ldr         w9,[x0,#0x16F4]

; 1020 :     s->l_buf[s->last_lit++] = (uch)lc;

  00004	d3407c4d	 uxtw        x13,w2
  00008	f94b7c08	 ldr         x8,[x0,#0x16F8]
  0000c	78295901	 strh        w1,[x8,w9 uxtw #1]
  00010	b956f40a	 ldr         w10,[x0,#0x16F4]
  00014	f94b7409	 ldr         x9,[x0,#0x16E8]
  00018	382a4922	 strb        w2,[x9,w10 uxtw #0]
  0001c	b956f408	 ldr         w8,[x0,#0x16F4]
  00020	1100050a	 add         w10,w8,#1
  00024	b916f40a	 str         w10,[x0,#0x16F4]

; 1021 :     if (dist == 0) {

  00028	35000001	 cbnz        w1,|$LN2@tr_tally|

; 1022 :         /* lc is the unmatched char */
; 1023 :         s->dyn_ltree[lc].Freq++;

  0002c	9100bda8	 add         x8,x13,#0x2F

; 1024 :     } else {

  00030	1400001d	 b           |$LN7@tr_tally|
  00034		 |$LN2@tr_tally|

; 1025 :         s->matches++;

  00034	b9570808	 ldr         w8,[x0,#0x1708]

; 1026 :         /* Here, lc is the match length - MIN_MATCH */
; 1027 :         dist--;             /* dist = match distance - 1 */

  00038	5100042b	 sub         w11,w1,#1

; 1028 :         Assert((ush)dist < (ush)MAX_DIST(s) &&
; 1029 :                (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
; 1030 :                (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");
; 1031 : 
; 1032 :         s->dyn_ltree[_length_code[lc]+LITERALS+1].Freq++;
; 1033 :         s->dyn_dtree[d_code(dist)].Freq++;

  0003c	7104017f	 cmp         w11,#0x100
  00040	11000509	 add         w9,w8,#1
  00044	90000008	 adrp        x8,_length_code
  00048	9100010c	 add         x12,x8,PageOffset(_length_code)
  0004c	b9170809	 str         w9,[x0,#0x1708]
  00050	386c69a8	 ldrb        w8,[x13,x12]
  00054	9104c108	 add         x8,x8,#0x130
  00058	d37ef50a	 lsl         x10,x8,#2
  0005c	78606949	 ldrh        w9,[x10,x0]
  00060	11000528	 add         w8,w9,#1
  00064	78206948	 strh        w8,[x10,x0]
  00068	54000002	 bhs         |$LN5@tr_tally|
  0006c	7104017f	 cmp         w11,#0x100
  00070	1a9f316b	 csello      w11,w11,wzr
  00074	d503229f	 csdb
  00078	91040188	 add         x8,x12,#0x100
  0007c	386b4909	 ldrb        w9,[x8,w11 uxtw #0]
  00080	14000008	 b           |$LN6@tr_tally|
  00084		 |$LN5@tr_tally|
  00084	7104017f	 cmp         w11,#0x100
  00088	1a9f216b	 cselhs      w11,w11,wzr
  0008c	d503229f	 csdb
  00090	53077d68	 lsr         w8,w11,#7
  00094	1104010a	 add         w10,w8,#0x100
  00098	91040189	 add         x9,x12,#0x100
  0009c	386a4929	 ldrb        w9,[x9,w10 uxtw #0]
  000a0		 |$LN6@tr_tally|
  000a0	9109b128	 add         x8,x9,#0x26C
  000a4		 |$LN7@tr_tally|

; 1034 :     }
; 1035 : 
; 1036 : #ifdef TRUNCATE_BLOCK
; 1037 :     /* Try to guess if it is profitable to stop the current block here */
; 1038 :     if ((s->last_lit & 0x1fff) == 0 && s->level > 2) {
; 1039 :         /* Compute an upper bound for the compressed length */
; 1040 :         ulg out_length = (ulg)s->last_lit*8L;
; 1041 :         ulg in_length = (ulg)((long)s->strstart - s->block_start);
; 1042 :         int dcode;
; 1043 :         for (dcode = 0; dcode < D_CODES; dcode++) {
; 1044 :             out_length += (ulg)s->dyn_dtree[dcode].Freq *
; 1045 :                 (5L+extra_dbits[dcode]);
; 1046 :         }
; 1047 :         out_length >>= 3;
; 1048 :         Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
; 1049 :                s->last_lit, in_length, out_length,
; 1050 :                100L - out_length*100L/in_length));
; 1051 :         if (s->matches < s->last_lit/2 && out_length < in_length/2) return 1;
; 1052 :     }
; 1053 : #endif
; 1054 :     return (s->last_lit == s->lit_bufsize-1);

  000a4	d37ef50a	 lsl         x10,x8,#2
  000a8	78606949	 ldrh        w9,[x10,x0]
  000ac	11000528	 add         w8,w9,#1
  000b0	78206948	 strh        w8,[x10,x0]
  000b4	b956f008	 ldr         w8,[x0,#0x16F0]
  000b8	b956f409	 ldr         w9,[x0,#0x16F4]
  000bc	5100050a	 sub         w10,w8,#1
  000c0	6b0a013f	 cmp         w9,w10
  000c4	1a9f17e0	 cseteq      w0
  000c8	d65f03c0	 ret

			 ENDP  ; |_tr_tally|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\trees.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |compress_block| PROC

; 1068 : {

  00000	a9be53f3	 stp         x19,x20,[sp,#-0x20]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]

; 1069 :     unsigned dist;      /* distance of matched string */
; 1070 :     int lc;             /* match length or unmatched char (if dist == 0) */
; 1071 :     unsigned lx = 0;    /* running index in l_buf */
; 1072 :     unsigned code;      /* the code to send */
; 1073 :     int extra;          /* number of extra bits to send */
; 1074 : 
; 1075 :     if (s->last_lit != 0) do {

  00008	d282de88	 mov         x8,#0x16F4
  0000c	8b080013	 add         x19,x0,x8
  00010	b956f408	 ldr         w8,[x0,#0x16F4]
  00014	aa0203f6	 mov         x22,x2
  00018	52800005	 mov         w5,#0
  0001c	34000008	 cbz         w8,|$LN3@compress_b|
  00020	d282df08	 mov         x8,#0x16F8
  00024	8b080014	 add         x20,x0,x8
  00028	d282e208	 mov         x8,#0x1710
  0002c	d282dd09	 mov         x9,#0x16E8
  00030	8b08000e	 add         x14,x0,x8
  00034	8b090015	 add         x21,x0,x9
  00038	90000008	 adrp        x8,_length_code
  0003c	91000106	 add         x6,x8,PageOffset(_length_code)
  00040	d282e289	 mov         x9,#0x1714
  00044	8b09000d	 add         x13,x0,x9
  00048		 |$LL4@compress_b|

; 1076 :         dist = s->d_buf[lx];

  00048	f9400288	 ldr         x8,[x20]

; 1077 :         lc = s->l_buf[lx++];
; 1078 :         if (dist == 0) {

  0004c	5280020b	 mov         w11,#0x10
  00050	b94001aa	 ldr         w10,[x13]
  00054	7865590f	 ldrh        w15,[x8,w5 uxtw #1]
  00058	f94002a8	 ldr         x8,[x21]
  0005c	38654907	 ldrb        w7,[x8,w5 uxtw #0]
  00060	110004a5	 add         w5,w5,#1
  00064	3500000f	 cbnz        w15,|$LN6@compress_b|

; 1079 :             send_code(s, lc, ltree); /* send a literal byte */

  00068	8b27c828	 add         x8,x1,w7,sxtw #2
  0006c	79400107	 ldrh        w7,[x8]
  00070	7940050c	 ldrh        w12,[x8,#2]
  00074	794001c8	 ldrh        w8,[x14]
  00078	1aca20e9	 lsl         w9,w7,w10
  0007c	2a080128	 orr         w8,w9,w8
  00080	4b0c0169	 sub         w9,w11,w12
  00084	6b09015f	 cmp         w10,w9
  00088	53003d0f	 uxth        w15,w8
  0008c	5400000d	 ble         |$LN8@compress_b|
  00090	b9402809	 ldr         w9,[x0,#0x28]
  00094	790001cf	 strh        w15,[x14]
  00098	f9400808	 ldr         x8,[x0,#0x10]
  0009c	3829490f	 strb        w15,[x8,w9 uxtw #0]
  000a0	b9402809	 ldr         w9,[x0,#0x28]
  000a4	f940080a	 ldr         x10,[x0,#0x10]
  000a8	394005c8	 ldrb        w8,[x14,#1]
  000ac	1100052b	 add         w11,w9,#1
  000b0	b900280b	 str         w11,[x0,#0x28]
  000b4	382b4948	 strb        w8,[x10,w11 uxtw #0]
  000b8	b94001ab	 ldr         w11,[x13]
  000bc	52800208	 mov         w8,#0x10
  000c0	b9402809	 ldr         w9,[x0,#0x28]
  000c4	4b0b0108	 sub         w8,w8,w11
  000c8	1100052a	 add         w10,w9,#1
  000cc	1ac824e9	 lsr         w9,w7,w8
  000d0	b900280a	 str         w10,[x0,#0x28]
  000d4	0b0c0168	 add         w8,w11,w12
  000d8	5100410a	 sub         w10,w8,#0x10
  000dc	53003d2f	 uxth        w15,w9

; 1080 :             Tracecv(isgraph(lc), (stderr," '%c' ", lc));
; 1081 :         } else {

  000e0	b90001aa	 str         w10,[x13]
  000e4	790001cf	 strh        w15,[x14]
  000e8	140000ad	 b           |$LN2@compress_b|
  000ec		 |$LN8@compress_b|

; 1079 :             send_code(s, lc, ltree); /* send a literal byte */

  000ec	0b0c014a	 add         w10,w10,w12

; 1080 :             Tracecv(isgraph(lc), (stderr," '%c' ", lc));
; 1081 :         } else {

  000f0	b90001aa	 str         w10,[x13]
  000f4	790001cf	 strh        w15,[x14]
  000f8	140000a9	 b           |$LN2@compress_b|
  000fc		 |$LN6@compress_b|

; 1082 :             /* Here, lc is the match length - MIN_MATCH */
; 1083 :             code = _length_code[lc];

  000fc	3867c8c4	 ldrb        w4,[x6,w7 sxtw #0]

; 1084 :             send_code(s, code+LITERALS+1, ltree); /* send the length code */

  00100	11040488	 add         w8,w4,#0x101
  00104	8b284829	 add         x9,x1,w8,uxtw #2
  00108	794001c8	 ldrh        w8,[x14]
  0010c	79400122	 ldrh        w2,[x9]
  00110	7940052c	 ldrh        w12,[x9,#2]
  00114	1aca2049	 lsl         w9,w2,w10
  00118	2a080128	 orr         w8,w9,w8
  0011c	4b0c0169	 sub         w9,w11,w12
  00120	6b09015f	 cmp         w10,w9
  00124	53003d03	 uxth        w3,w8
  00128	5400000d	 ble         |$LN10@compress_b|
  0012c	b9402809	 ldr         w9,[x0,#0x28]
  00130	790001c3	 strh        w3,[x14]
  00134	f9400808	 ldr         x8,[x0,#0x10]
  00138	38294903	 strb        w3,[x8,w9 uxtw #0]
  0013c	b9402809	 ldr         w9,[x0,#0x28]
  00140	f940080a	 ldr         x10,[x0,#0x10]
  00144	394005c8	 ldrb        w8,[x14,#1]
  00148	1100052b	 add         w11,w9,#1
  0014c	b900280b	 str         w11,[x0,#0x28]
  00150	382b4948	 strb        w8,[x10,w11 uxtw #0]
  00154	b94001ab	 ldr         w11,[x13]
  00158	52800208	 mov         w8,#0x10
  0015c	b9402809	 ldr         w9,[x0,#0x28]
  00160	4b0b0108	 sub         w8,w8,w11
  00164	1100052a	 add         w10,w9,#1
  00168	1ac82449	 lsr         w9,w2,w8
  0016c	b900280a	 str         w10,[x0,#0x28]
  00170	0b0c0168	 add         w8,w11,w12
  00174	5100410a	 sub         w10,w8,#0x10
  00178	53003d23	 uxth        w3,w9
  0017c	14000002	 b           |$LN11@compress_b|
  00180		 |$LN10@compress_b|
  00180	0b0c014a	 add         w10,w10,w12
  00184		 |$LN11@compress_b|

; 1085 :             extra = extra_lbits[code];

  00184	b90001aa	 str         w10,[x13]
  00188	910f40c8	 add         x8,x6,#0x3D0
  0018c	790001c3	 strh        w3,[x14]
  00190	b864590c	 ldr         w12,[x8,w4 uxtw #2]

; 1086 :             if (extra != 0) {

  00194	3400000c	 cbz         w12,|$LN14@compress_b|

; 1087 :                 lc -= base_length[code];

  00198	911340c8	 add         x8,x6,#0x4D0

; 1088 :                 send_bits(s, lc, extra);       /* send the extra length bits */

  0019c	b94001ab	 ldr         w11,[x13]
  001a0	b8645909	 ldr         w9,[x8,w4 uxtw #2]
  001a4	52800208	 mov         w8,#0x10
  001a8	4b0c010a	 sub         w10,w8,w12
  001ac	794001c8	 ldrh        w8,[x14]
  001b0	6b0a017f	 cmp         w11,w10
  001b4	4b0900e3	 sub         w3,w7,w9
  001b8	1acb2069	 lsl         w9,w3,w11
  001bc	2a080128	 orr         w8,w9,w8
  001c0	53003d07	 uxth        w7,w8
  001c4	790001c7	 strh        w7,[x14]
  001c8	5400000d	 ble         |$LN13@compress_b|
  001cc	b9402809	 ldr         w9,[x0,#0x28]
  001d0	f9400808	 ldr         x8,[x0,#0x10]
  001d4	38294907	 strb        w7,[x8,w9 uxtw #0]
  001d8	b9402809	 ldr         w9,[x0,#0x28]
  001dc	394005c8	 ldrb        w8,[x14,#1]
  001e0	f940080a	 ldr         x10,[x0,#0x10]
  001e4	1100052b	 add         w11,w9,#1
  001e8	b900280b	 str         w11,[x0,#0x28]
  001ec	382b4948	 strb        w8,[x10,w11 uxtw #0]
  001f0	b9402809	 ldr         w9,[x0,#0x28]
  001f4	52800208	 mov         w8,#0x10
  001f8	b94001ab	 ldr         w11,[x13]
  001fc	1100052a	 add         w10,w9,#1
  00200	53003c69	 uxth        w9,w3
  00204	b900280a	 str         w10,[x0,#0x28]
  00208	4b0b0108	 sub         w8,w8,w11
  0020c	1ac8252a	 lsr         w10,w9,w8
  00210	0b0c0169	 add         w9,w11,w12
  00214	790001ca	 strh        w10,[x14]
  00218	5100412a	 sub         w10,w9,#0x10
  0021c	b90001aa	 str         w10,[x13]
  00220	14000003	 b           |$LN14@compress_b|
  00224		 |$LN13@compress_b|
  00224	0b0c0168	 add         w8,w11,w12
  00228	b90001a8	 str         w8,[x13]
  0022c		 |$LN14@compress_b|

; 1089 :             }
; 1090 :             dist--; /* dist is now the match distance - 1 */

  0022c	510005ec	 sub         w12,w15,#1

; 1091 :             code = d_code(dist);

  00230	7104019f	 cmp         w12,#0x100
  00234	54000002	 bhs         |$LN23@compress_b|
  00238	7104019f	 cmp         w12,#0x100
  0023c	1a9f318c	 csello      w12,w12,wzr
  00240	d503229f	 csdb
  00244	910400c8	 add         x8,x6,#0x100
  00248	386c4907	 ldrb        w7,[x8,w12 uxtw #0]
  0024c	14000008	 b           |$LN24@compress_b|
  00250		 |$LN23@compress_b|
  00250	7104019f	 cmp         w12,#0x100
  00254	1a9f218c	 cselhs      w12,w12,wzr
  00258	d503229f	 csdb
  0025c	53077d88	 lsr         w8,w12,#7
  00260	1104010a	 add         w10,w8,#0x100
  00264	910400c9	 add         x9,x6,#0x100
  00268	386a4927	 ldrb        w7,[x9,w10 uxtw #0]
  0026c		 |$LN24@compress_b|

; 1092 :             Assert (code < D_CODES, "bad d_code");
; 1093 : 
; 1094 :             send_code(s, code, dtree);       /* send the distance code */

  0026c	8b070ac8	 add         x8,x22,x7,lsl #2
  00270	b94001aa	 ldr         w10,[x13]
  00274	5280020b	 mov         w11,#0x10
  00278	79400103	 ldrh        w3,[x8]
  0027c	7940050f	 ldrh        w15,[x8,#2]
  00280	794001c8	 ldrh        w8,[x14]
  00284	1aca2069	 lsl         w9,w3,w10
  00288	2a080128	 orr         w8,w9,w8
  0028c	4b0f0169	 sub         w9,w11,w15
  00290	6b09015f	 cmp         w10,w9
  00294	53003d04	 uxth        w4,w8
  00298	5400000d	 ble         |$LN15@compress_b|
  0029c	b9402809	 ldr         w9,[x0,#0x28]
  002a0	790001c4	 strh        w4,[x14]
  002a4	f9400808	 ldr         x8,[x0,#0x10]
  002a8	38294904	 strb        w4,[x8,w9 uxtw #0]
  002ac	b9402809	 ldr         w9,[x0,#0x28]
  002b0	f940080a	 ldr         x10,[x0,#0x10]
  002b4	394005c8	 ldrb        w8,[x14,#1]
  002b8	1100052b	 add         w11,w9,#1
  002bc	b900280b	 str         w11,[x0,#0x28]
  002c0	382b4948	 strb        w8,[x10,w11 uxtw #0]
  002c4	b94001ab	 ldr         w11,[x13]
  002c8	52800208	 mov         w8,#0x10
  002cc	b9402809	 ldr         w9,[x0,#0x28]
  002d0	4b0b0108	 sub         w8,w8,w11
  002d4	1100052a	 add         w10,w9,#1
  002d8	1ac82469	 lsr         w9,w3,w8
  002dc	b900280a	 str         w10,[x0,#0x28]
  002e0	0b0f0168	 add         w8,w11,w15
  002e4	5100410a	 sub         w10,w8,#0x10
  002e8	53003d24	 uxth        w4,w9
  002ec	14000002	 b           |$LN16@compress_b|
  002f0		 |$LN15@compress_b|
  002f0	0b0f014a	 add         w10,w10,w15
  002f4		 |$LN16@compress_b|

; 1095 :             extra = extra_dbits[code];

  002f4	b90001aa	 str         w10,[x13]
  002f8	911640c8	 add         x8,x6,#0x590
  002fc	790001c4	 strh        w4,[x14]
  00300	b867790f	 ldr         w15,[x8,x7 lsl #2]

; 1096 :             if (extra != 0) {

  00304	3400000f	 cbz         w15,|$LN2@compress_b|

; 1097 :                 dist -= (unsigned)base_dist[code];

  00308	911140c8	 add         x8,x6,#0x450

; 1098 :                 send_bits(s, dist, extra);   /* send the extra distance bits */

  0030c	b94001ab	 ldr         w11,[x13]
  00310	b8677909	 ldr         w9,[x8,x7 lsl #2]
  00314	52800208	 mov         w8,#0x10
  00318	4b0f010a	 sub         w10,w8,w15
  0031c	794001c8	 ldrh        w8,[x14]
  00320	6b0a017f	 cmp         w11,w10
  00324	4b090184	 sub         w4,w12,w9
  00328	1acb2089	 lsl         w9,w4,w11
  0032c	2a080128	 orr         w8,w9,w8
  00330	53003d0c	 uxth        w12,w8
  00334	790001cc	 strh        w12,[x14]
  00338	5400000d	 ble         |$LN18@compress_b|
  0033c	b9402809	 ldr         w9,[x0,#0x28]
  00340	f9400808	 ldr         x8,[x0,#0x10]
  00344	3829490c	 strb        w12,[x8,w9 uxtw #0]
  00348	b9402809	 ldr         w9,[x0,#0x28]
  0034c	394005c8	 ldrb        w8,[x14,#1]
  00350	f940080a	 ldr         x10,[x0,#0x10]
  00354	1100052b	 add         w11,w9,#1
  00358	b900280b	 str         w11,[x0,#0x28]
  0035c	382b4948	 strb        w8,[x10,w11 uxtw #0]
  00360	b9402809	 ldr         w9,[x0,#0x28]
  00364	52800208	 mov         w8,#0x10
  00368	b94001ab	 ldr         w11,[x13]
  0036c	1100052a	 add         w10,w9,#1
  00370	53003c89	 uxth        w9,w4
  00374	b900280a	 str         w10,[x0,#0x28]
  00378	4b0b0108	 sub         w8,w8,w11
  0037c	1ac8252a	 lsr         w10,w9,w8
  00380	0b0f0169	 add         w9,w11,w15
  00384	790001ca	 strh        w10,[x14]
  00388	5100412a	 sub         w10,w9,#0x10
  0038c	b90001aa	 str         w10,[x13]
  00390	14000003	 b           |$LN2@compress_b|
  00394		 |$LN18@compress_b|
  00394	0b0f0168	 add         w8,w11,w15
  00398	b90001a8	 str         w8,[x13]
  0039c		 |$LN2@compress_b|

; 1099 :             }
; 1100 :         } /* literal or match pair ? */
; 1101 : 
; 1102 :         /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
; 1103 :         Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
; 1104 :                "pendingBuf overflow");
; 1105 : 
; 1106 :     } while (lx < s->last_lit);

  0039c	b9400268	 ldr         w8,[x19]
  003a0	6b0800bf	 cmp         w5,w8
  003a4	54000003	 blo         |$LL4@compress_b|
  003a8		 |$LN3@compress_b|

; 1107 : 
; 1108 :     send_code(s, END_BLOCK, ltree);

  003a8	d282e208	 mov         x8,#0x1710
  003ac	b957140b	 ldr         w11,[x0,#0x1714]
  003b0	7948002e	 ldrh        w14,[x1,#0x400]
  003b4	8b08000c	 add         x12,x0,x8
  003b8	796e2008	 ldrh        w8,[x0,#0x1710]
  003bc	5280020f	 mov         w15,#0x10
  003c0	7948042d	 ldrh        w13,[x1,#0x402]
  003c4	1acb21c9	 lsl         w9,w14,w11
  003c8	2a080128	 orr         w8,w9,w8
  003cc	4b0d01e9	 sub         w9,w15,w13
  003d0	6b09017f	 cmp         w11,w9
  003d4	53003d0a	 uxth        w10,w8
  003d8	5400000d	 ble         |$LN20@compress_b|
  003dc	b9402809	 ldr         w9,[x0,#0x28]
  003e0	7900018a	 strh        w10,[x12]
  003e4	f9400808	 ldr         x8,[x0,#0x10]
  003e8	3829490a	 strb        w10,[x8,w9 uxtw #0]
  003ec	b9402809	 ldr         w9,[x0,#0x28]
  003f0	f940080a	 ldr         x10,[x0,#0x10]
  003f4	39400588	 ldrb        w8,[x12,#1]
  003f8	1100052b	 add         w11,w9,#1
  003fc	b900280b	 str         w11,[x0,#0x28]
  00400	382b4948	 strb        w8,[x10,w11 uxtw #0]
  00404	b957140b	 ldr         w11,[x0,#0x1714]
  00408	52800208	 mov         w8,#0x10
  0040c	b9402809	 ldr         w9,[x0,#0x28]
  00410	4b0b0108	 sub         w8,w8,w11
  00414	1100052a	 add         w10,w9,#1
  00418	1ac825c9	 lsr         w9,w14,w8
  0041c	b900280a	 str         w10,[x0,#0x28]
  00420	0b0d0168	 add         w8,w11,w13
  00424	5100410e	 sub         w14,w8,#0x10
  00428	53003d2a	 uxth        w10,w9

; 1109 : }

  0042c	b917140e	 str         w14,[x0,#0x1714]
  00430	7900018a	 strh        w10,[x12]
  00434	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00438	a8c253f3	 ldp         x19,x20,[sp],#0x20
  0043c	d65f03c0	 ret
  00440		 |$LN20@compress_b|

; 1107 : 
; 1108 :     send_code(s, END_BLOCK, ltree);

  00440	0b0d016e	 add         w14,w11,w13

; 1109 : }

  00444	b917140e	 str         w14,[x0,#0x1714]
  00448	7900018a	 strh        w10,[x12]
  0044c	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00450	a8c253f3	 ldp         x19,x20,[sp],#0x20
  00454	d65f03c0	 ret

			 ENDP  ; |compress_block|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\trees.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |detect_data_type| PROC

; 1127 :     /* black_mask is the bit mask of black-listed bytes
; 1128 :      * set bits 0..6, 14..25, and 28..31
; 1129 :      * 0xf3ffc07f = binary 11110011111111111100000001111111
; 1130 :      */
; 1131 :     unsigned long black_mask = 0xf3ffc07fUL;

  00000	52980fe9	 mov         w9,#0xC07F
  00004	72be7fe9	 movk        w9,#0xF3FF,lsl #0x10
  00008	d280000b	 mov         x11,#0
  0000c	9102f00a	 add         x10,x0,#0xBC
  00010		 |$LL4@detect_dat|

; 1136 :         if ((black_mask & 1) && (s->dyn_ltree[n].Freq != 0))

  00010	36000009	 tbz         x9,#0,|$LN2@detect_dat|
  00014	79400148	 ldrh        w8,[x10]
  00018	35000008	 cbnz        w8,|$LN15@detect_dat|
  0001c		 |$LN2@detect_dat|

; 1132 :     int n;
; 1133 : 
; 1134 :     /* Check for non-textual ("black-listed") bytes. */
; 1135 :     for (n = 0; n <= 31; n++, black_mask >>= 1)

  0001c	9100056b	 add         x11,x11,#1
  00020	f1007d7f	 cmp         x11,#0x1F
  00024	9100114a	 add         x10,x10,#4
  00028	53017d29	 lsr         w9,w9,#1
  0002c	5400000d	 ble         |$LL4@detect_dat|

; 1137 :             return Z_BINARY;
; 1138 : 
; 1139 :     /* Check for textual ("white-listed") bytes. */
; 1140 :     if (s->dyn_ltree[9].Freq != 0 || s->dyn_ltree[10].Freq != 0
; 1141 :             || s->dyn_ltree[13].Freq != 0)

  00030	7941c008	 ldrh        w8,[x0,#0xE0]
  00034	35000008	 cbnz        w8,|$LN10@detect_dat|
  00038	7941c808	 ldrh        w8,[x0,#0xE4]
  0003c	35000008	 cbnz        w8,|$LN10@detect_dat|
  00040	7941e008	 ldrh        w8,[x0,#0xF0]
  00044	35000008	 cbnz        w8,|$LN10@detect_dat|
  00048	d2800409	 mov         x9,#0x20
  0004c	9104f00a	 add         x10,x0,#0x13C
  00050		 |$LL7@detect_dat|

; 1144 :         if (s->dyn_ltree[n].Freq != 0)

  00050	78404548	 ldrh        w8,[x10],#4
  00054	35000008	 cbnz        w8,|$LN10@detect_dat|

; 1143 :     for (n = 32; n < LITERALS; n++)

  00058	91000529	 add         x9,x9,#1
  0005c	f104013f	 cmp         x9,#0x100
  00060	5400000b	 blt         |$LL7@detect_dat|
  00064		 |$LN15@detect_dat|

; 1145 :             return Z_TEXT;
; 1146 : 
; 1147 :     /* There are no "black-listed" or "white-listed" bytes:
; 1148 :      * this stream either is empty or has tolerated ("gray-listed") bytes only.
; 1149 :      */
; 1150 :     return Z_BINARY;
; 1151 : }

  00064	52800000	 mov         w0,#0
  00068	d65f03c0	 ret
  0006c		 |$LN10@detect_dat|

; 1142 :         return Z_TEXT;

  0006c	52800020	 mov         w0,#1
  00070	d65f03c0	 ret

			 ENDP  ; |detect_data_type|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\trees.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |bi_reverse| PROC

; 1162 :     register unsigned res = 0;

  00000	52800009	 mov         w9,#0
  00004		 |$LL4@bi_reverse|

; 1163 :     do {
; 1164 :         res |= code & 1;

  00004	12000008	 and         w8,w0,#1
  00008	2a090109	 orr         w9,w8,w9

; 1165 :         code >>= 1, res <<= 1;
; 1166 :     } while (--len > 0);

  0000c	51000421	 sub         w1,w1,#1
  00010	531f7929	 lsl         w9,w9,#1
  00014	53017c00	 lsr         w0,w0,#1
  00018	7100003f	 cmp         w1,#0
  0001c	5400000c	 bgt         |$LL4@bi_reverse|

; 1167 :     return res >> 1;

  00020	53017d20	 lsr         w0,w9,#1
  00024	d65f03c0	 ret

			 ENDP  ; |bi_reverse|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\trees.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |bi_flush| PROC

; 1176 :     if (s->bi_valid == 16) {

  00000	b9571408	 ldr         w8,[x0,#0x1714]
  00004	7100411f	 cmp         w8,#0x10
  00008	54000001	 bne         |$LN2@bi_flush|

; 1177 :         put_short(s, s->bi_buf);

  0000c	d282e209	 mov         x9,#0x1710
  00010	f9400808	 ldr         x8,[x0,#0x10]
  00014	3869680a	 ldrb        w10,[x0,x9]
  00018	8b09000c	 add         x12,x0,x9
  0001c	b9402809	 ldr         w9,[x0,#0x28]
  00020	3829490a	 strb        w10,[x8,w9 uxtw #0]
  00024	b9402809	 ldr         w9,[x0,#0x28]
  00028	f940080a	 ldr         x10,[x0,#0x10]
  0002c	39400588	 ldrb        w8,[x12,#1]
  00030	1100052b	 add         w11,w9,#1
  00034	b900280b	 str         w11,[x0,#0x28]
  00038	382b4948	 strb        w8,[x10,w11 uxtw #0]
  0003c	b9402809	 ldr         w9,[x0,#0x28]

; 1178 :         s->bi_buf = 0;

  00040	7900019f	 strh        wzr,[x12]

; 1179 :         s->bi_valid = 0;

  00044	b917141f	 str         wzr,[x0,#0x1714]
  00048	1100052a	 add         w10,w9,#1

; 1184 :     }
; 1185 : }

  0004c	b900280a	 str         w10,[x0,#0x28]
  00050	d65f03c0	 ret
  00054		 |$LN2@bi_flush|

; 1180 :     } else if (s->bi_valid >= 8) {

  00054	7100211f	 cmp         w8,#8
  00058	5400000b	 blt         |$LN4@bi_flush|

; 1181 :         put_byte(s, (Byte)s->bi_buf);

  0005c	d282e208	 mov         x8,#0x1710
  00060	b9402809	 ldr         w9,[x0,#0x28]
  00064	3868680a	 ldrb        w10,[x0,x8]
  00068	8b08000b	 add         x11,x0,x8
  0006c	f9400808	 ldr         x8,[x0,#0x10]
  00070	3829490a	 strb        w10,[x8,w9 uxtw #0]

; 1182 :         s->bi_buf >>= 8;

  00074	39400568	 ldrb        w8,[x11,#1]
  00078	b9402809	 ldr         w9,[x0,#0x28]
  0007c	79000168	 strh        w8,[x11]

; 1183 :         s->bi_valid -= 8;

  00080	b9571408	 ldr         w8,[x0,#0x1714]
  00084	1100052a	 add         w10,w9,#1

; 1184 :     }
; 1185 : }

  00088	b900280a	 str         w10,[x0,#0x28]
  0008c	51002109	 sub         w9,w8,#8
  00090	b9171409	 str         w9,[x0,#0x1714]
  00094		 |$LN4@bi_flush|
  00094	d65f03c0	 ret

			 ENDP  ; |bi_flush|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\trees.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |bi_windup| PROC

; 1193 :     if (s->bi_valid > 8) {

  00000	b9571408	 ldr         w8,[x0,#0x1714]
  00004	7100211f	 cmp         w8,#8
  00008	5400000d	 ble         |$LN2@bi_windup|

; 1194 :         put_short(s, s->bi_buf);

  0000c	d282e209	 mov         x9,#0x1710
  00010	f9400808	 ldr         x8,[x0,#0x10]
  00014	3869680a	 ldrb        w10,[x0,x9]
  00018	8b09000c	 add         x12,x0,x9
  0001c	b9402809	 ldr         w9,[x0,#0x28]
  00020	3829490a	 strb        w10,[x8,w9 uxtw #0]
  00024	b9402809	 ldr         w9,[x0,#0x28]
  00028	f940080a	 ldr         x10,[x0,#0x10]
  0002c	39400588	 ldrb        w8,[x12,#1]
  00030	1100052b	 add         w11,w9,#1
  00034	b900280b	 str         w11,[x0,#0x28]
  00038	382b4948	 strb        w8,[x10,w11 uxtw #0]
  0003c	14000007	 b           |$LN6@bi_windup|
  00040		 |$LN2@bi_windup|

; 1195 :     } else if (s->bi_valid > 0) {

  00040	7100011f	 cmp         w8,#0
  00044	5400000d	 ble         |$LN4@bi_windup|

; 1196 :         put_byte(s, (Byte)s->bi_buf);

  00048	796e200a	 ldrh        w10,[x0,#0x1710]
  0004c	b9402809	 ldr         w9,[x0,#0x28]
  00050	f9400808	 ldr         x8,[x0,#0x10]
  00054	3829490a	 strb        w10,[x8,w9 uxtw #0]
  00058		 |$LN6@bi_windup|

; 1197 :     }
; 1198 :     s->bi_buf = 0;

  00058	b9402809	 ldr         w9,[x0,#0x28]
  0005c	1100052a	 add         w10,w9,#1
  00060	b900280a	 str         w10,[x0,#0x28]
  00064		 |$LN4@bi_windup|
  00064	792e201f	 strh        wzr,[x0,#0x1710]

; 1199 :     s->bi_valid = 0;

  00068	b917141f	 str         wzr,[x0,#0x1714]
  0006c	d65f03c0	 ret

			 ENDP  ; |bi_windup|

	END
