; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TTL	c:\users\ws103\desktop\zlib-1.2.11\inflate.c
	ARM64

	AREA	|.drectve|, DRECTVE

	EXPORT	|??_C@_0BH@LIBMMIGA@incorrect?5header?5check@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BL@IHKGDAEE@unknown?5compression?5method@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BE@EMOGCLGO@invalid?5window?5size@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BJ@BLBBCOMO@unknown?5header?5flags?5set@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BE@GONKLEPM@header?5crc?5mismatch@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BF@MEIGEHBE@incorrect?5data?5check@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BH@FGKKJGOC@incorrect?5length?5check@| [ DATA ] ; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0BH@FGKKJGOC@incorrect?5length?5check@| DCB "incorrect length chec"
	DCB	"k", 0x0				; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0BF@MEIGEHBE@incorrect?5data?5check@| DCB "incorrect data check", 0x0 ; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0BE@GONKLEPM@header?5crc?5mismatch@| DCB "header crc mismatch", 0x0 ; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0BJ@BLBBCOMO@unknown?5header?5flags?5set@| DCB "unknown header fla"
	DCB	"gs set", 0x0				; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0BE@EMOGCLGO@invalid?5window?5size@| DCB "invalid window size", 0x0 ; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0BL@IHKGDAEE@unknown?5compression?5method@| DCB "unknown compressi"
	DCB	"on method", 0x0			; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0BH@LIBMMIGA@incorrect?5header?5check@| DCB "incorrect header chec"
	DCB	"k", 0x0				; `string'
	%	10
|?lenfix@?1??fixedtables@@9@9| DCB 0x60			; `fixedtables'::`2'::lenfix
	DCB	0x7
	DCW	0x0
	DCB	0x0
	DCB	0x8
	DCW	0x50
	DCB	0x0
	DCB	0x8
	DCW	0x10
	DCB	0x14
	DCB	0x8
	DCW	0x73
	DCB	0x12
	DCB	0x7
	DCW	0x1f
	DCB	0x0
	DCB	0x8
	DCW	0x70
	DCB	0x0
	DCB	0x8
	DCW	0x30
	DCB	0x0
	DCB	0x9
	DCW	0xc0
	DCB	0x10
	DCB	0x7
	DCW	0xa
	DCB	0x0
	DCB	0x8
	DCW	0x60
	DCB	0x0
	DCB	0x8
	DCW	0x20
	DCB	0x0
	DCB	0x9
	DCW	0xa0
	DCB	0x0
	DCB	0x8
	DCW	0x0
	DCB	0x0
	DCB	0x8
	DCW	0x80
	DCB	0x0
	DCB	0x8
	DCW	0x40
	DCB	0x0
	DCB	0x9
	DCW	0xe0
	DCB	0x10
	DCB	0x7
	DCW	0x6
	DCB	0x0
	DCB	0x8
	DCW	0x58
	DCB	0x0
	DCB	0x8
	DCW	0x18
	DCB	0x0
	DCB	0x9
	DCW	0x90
	DCB	0x13
	DCB	0x7
	DCW	0x3b
	DCB	0x0
	DCB	0x8
	DCW	0x78
	DCB	0x0
	DCB	0x8
	DCW	0x38
	DCB	0x0
	DCB	0x9
	DCW	0xd0
	DCB	0x11
	DCB	0x7
	DCW	0x11
	DCB	0x0
	DCB	0x8
	DCW	0x68
	DCB	0x0
	DCB	0x8
	DCW	0x28
	DCB	0x0
	DCB	0x9
	DCW	0xb0
	DCB	0x0
	DCB	0x8
	DCW	0x8
	DCB	0x0
	DCB	0x8
	DCW	0x88
	DCB	0x0
	DCB	0x8
	DCW	0x48
	DCB	0x0
	DCB	0x9
	DCW	0xf0
	DCB	0x10
	DCB	0x7
	DCW	0x4
	DCB	0x0
	DCB	0x8
	DCW	0x54
	DCB	0x0
	DCB	0x8
	DCW	0x14
	DCB	0x15
	DCB	0x8
	DCW	0xe3
	DCB	0x13
	DCB	0x7
	DCW	0x2b
	DCB	0x0
	DCB	0x8
	DCW	0x74
	DCB	0x0
	DCB	0x8
	DCW	0x34
	DCB	0x0
	DCB	0x9
	DCW	0xc8
	DCB	0x11
	DCB	0x7
	DCW	0xd
	DCB	0x0
	DCB	0x8
	DCW	0x64
	DCB	0x0
	DCB	0x8
	DCW	0x24
	DCB	0x0
	DCB	0x9
	DCW	0xa8
	DCB	0x0
	DCB	0x8
	DCW	0x4
	DCB	0x0
	DCB	0x8
	DCW	0x84
	DCB	0x0
	DCB	0x8
	DCW	0x44
	DCB	0x0
	DCB	0x9
	DCW	0xe8
	DCB	0x10
	DCB	0x7
	DCW	0x8
	DCB	0x0
	DCB	0x8
	DCW	0x5c
	DCB	0x0
	DCB	0x8
	DCW	0x1c
	DCB	0x0
	DCB	0x9
	DCW	0x98
	DCB	0x14
	DCB	0x7
	DCW	0x53
	DCB	0x0
	DCB	0x8
	DCW	0x7c
	DCB	0x0
	DCB	0x8
	DCW	0x3c
	DCB	0x0
	DCB	0x9
	DCW	0xd8
	DCB	0x12
	DCB	0x7
	DCW	0x17
	DCB	0x0
	DCB	0x8
	DCW	0x6c
	DCB	0x0
	DCB	0x8
	DCW	0x2c
	DCB	0x0
	DCB	0x9
	DCW	0xb8
	DCB	0x0
	DCB	0x8
	DCW	0xc
	DCB	0x0
	DCB	0x8
	DCW	0x8c
	DCB	0x0
	DCB	0x8
	DCW	0x4c
	DCB	0x0
	DCB	0x9
	DCW	0xf8
	DCB	0x10
	DCB	0x7
	DCW	0x3
	DCB	0x0
	DCB	0x8
	DCW	0x52
	DCB	0x0
	DCB	0x8
	DCW	0x12
	DCB	0x15
	DCB	0x8
	DCW	0xa3
	DCB	0x13
	DCB	0x7
	DCW	0x23
	DCB	0x0
	DCB	0x8
	DCW	0x72
	DCB	0x0
	DCB	0x8
	DCW	0x32
	DCB	0x0
	DCB	0x9
	DCW	0xc4
	DCB	0x11
	DCB	0x7
	DCW	0xb
	DCB	0x0
	DCB	0x8
	DCW	0x62
	DCB	0x0
	DCB	0x8
	DCW	0x22
	DCB	0x0
	DCB	0x9
	DCW	0xa4
	DCB	0x0
	DCB	0x8
	DCW	0x2
	DCB	0x0
	DCB	0x8
	DCW	0x82
	DCB	0x0
	DCB	0x8
	DCW	0x42
	DCB	0x0
	DCB	0x9
	DCW	0xe4
	DCB	0x10
	DCB	0x7
	DCW	0x7
	DCB	0x0
	DCB	0x8
	DCW	0x5a
	DCB	0x0
	DCB	0x8
	DCW	0x1a
	DCB	0x0
	DCB	0x9
	DCW	0x94
	DCB	0x14
	DCB	0x7
	DCW	0x43
	DCB	0x0
	DCB	0x8
	DCW	0x7a
	DCB	0x0
	DCB	0x8
	DCW	0x3a
	DCB	0x0
	DCB	0x9
	DCW	0xd4
	DCB	0x12
	DCB	0x7
	DCW	0x13
	DCB	0x0
	DCB	0x8
	DCW	0x6a
	DCB	0x0
	DCB	0x8
	DCW	0x2a
	DCB	0x0
	DCB	0x9
	DCW	0xb4
	DCB	0x0
	DCB	0x8
	DCW	0xa
	DCB	0x0
	DCB	0x8
	DCW	0x8a
	DCB	0x0
	DCB	0x8
	DCW	0x4a
	DCB	0x0
	DCB	0x9
	DCW	0xf4
	DCB	0x10
	DCB	0x7
	DCW	0x5
	DCB	0x0
	DCB	0x8
	DCW	0x56
	DCB	0x0
	DCB	0x8
	DCW	0x16
	DCB	0x40
	DCB	0x8
	DCW	0x0
	DCB	0x13
	DCB	0x7
	DCW	0x33
	DCB	0x0
	DCB	0x8
	DCW	0x76
	DCB	0x0
	DCB	0x8
	DCW	0x36
	DCB	0x0
	DCB	0x9
	DCW	0xcc
	DCB	0x11
	DCB	0x7
	DCW	0xf
	DCB	0x0
	DCB	0x8
	DCW	0x66
	DCB	0x0
	DCB	0x8
	DCW	0x26
	DCB	0x0
	DCB	0x9
	DCW	0xac
	DCB	0x0
	DCB	0x8
	DCW	0x6
	DCB	0x0
	DCB	0x8
	DCW	0x86
	DCB	0x0
	DCB	0x8
	DCW	0x46
	DCB	0x0
	DCB	0x9
	DCW	0xec
	DCB	0x10
	DCB	0x7
	DCW	0x9
	DCB	0x0
	DCB	0x8
	DCW	0x5e
	DCB	0x0
	DCB	0x8
	DCW	0x1e
	DCB	0x0
	DCB	0x9
	DCW	0x9c
	DCB	0x14
	DCB	0x7
	DCW	0x63
	DCB	0x0
	DCB	0x8
	DCW	0x7e
	DCB	0x0
	DCB	0x8
	DCW	0x3e
	DCB	0x0
	DCB	0x9
	DCW	0xdc
	DCB	0x12
	DCB	0x7
	DCW	0x1b
	DCB	0x0
	DCB	0x8
	DCW	0x6e
	DCB	0x0
	DCB	0x8
	DCW	0x2e
	DCB	0x0
	DCB	0x9
	DCW	0xbc
	DCB	0x0
	DCB	0x8
	DCW	0xe
	DCB	0x0
	DCB	0x8
	DCW	0x8e
	DCB	0x0
	DCB	0x8
	DCW	0x4e
	DCB	0x0
	DCB	0x9
	DCW	0xfc
	DCB	0x60
	DCB	0x7
	DCW	0x0
	DCB	0x0
	DCB	0x8
	DCW	0x51
	DCB	0x0
	DCB	0x8
	DCW	0x11
	DCB	0x15
	DCB	0x8
	DCW	0x83
	DCB	0x12
	DCB	0x7
	DCW	0x1f
	DCB	0x0
	DCB	0x8
	DCW	0x71
	DCB	0x0
	DCB	0x8
	DCW	0x31
	DCB	0x0
	DCB	0x9
	DCW	0xc2
	DCB	0x10
	DCB	0x7
	DCW	0xa
	DCB	0x0
	DCB	0x8
	DCW	0x61
	DCB	0x0
	DCB	0x8
	DCW	0x21
	DCB	0x0
	DCB	0x9
	DCW	0xa2
	DCB	0x0
	DCB	0x8
	DCW	0x1
	DCB	0x0
	DCB	0x8
	DCW	0x81
	DCB	0x0
	DCB	0x8
	DCW	0x41
	DCB	0x0
	DCB	0x9
	DCW	0xe2
	DCB	0x10
	DCB	0x7
	DCW	0x6
	DCB	0x0
	DCB	0x8
	DCW	0x59
	DCB	0x0
	DCB	0x8
	DCW	0x19
	DCB	0x0
	DCB	0x9
	DCW	0x92
	DCB	0x13
	DCB	0x7
	DCW	0x3b
	DCB	0x0
	DCB	0x8
	DCW	0x79
	DCB	0x0
	DCB	0x8
	DCW	0x39
	DCB	0x0
	DCB	0x9
	DCW	0xd2
	DCB	0x11
	DCB	0x7
	DCW	0x11
	DCB	0x0
	DCB	0x8
	DCW	0x69
	DCB	0x0
	DCB	0x8
	DCW	0x29
	DCB	0x0
	DCB	0x9
	DCW	0xb2
	DCB	0x0
	DCB	0x8
	DCW	0x9
	DCB	0x0
	DCB	0x8
	DCW	0x89
	DCB	0x0
	DCB	0x8
	DCW	0x49
	DCB	0x0
	DCB	0x9
	DCW	0xf2
	DCB	0x10
	DCB	0x7
	DCW	0x4
	DCB	0x0
	DCB	0x8
	DCW	0x55
	DCB	0x0
	DCB	0x8
	DCW	0x15
	DCB	0x10
	DCB	0x8
	DCW	0x102
	DCB	0x13
	DCB	0x7
	DCW	0x2b
	DCB	0x0
	DCB	0x8
	DCW	0x75
	DCB	0x0
	DCB	0x8
	DCW	0x35
	DCB	0x0
	DCB	0x9
	DCW	0xca
	DCB	0x11
	DCB	0x7
	DCW	0xd
	DCB	0x0
	DCB	0x8
	DCW	0x65
	DCB	0x0
	DCB	0x8
	DCW	0x25
	DCB	0x0
	DCB	0x9
	DCW	0xaa
	DCB	0x0
	DCB	0x8
	DCW	0x5
	DCB	0x0
	DCB	0x8
	DCW	0x85
	DCB	0x0
	DCB	0x8
	DCW	0x45
	DCB	0x0
	DCB	0x9
	DCW	0xea
	DCB	0x10
	DCB	0x7
	DCW	0x8
	DCB	0x0
	DCB	0x8
	DCW	0x5d
	DCB	0x0
	DCB	0x8
	DCW	0x1d
	DCB	0x0
	DCB	0x9
	DCW	0x9a
	DCB	0x14
	DCB	0x7
	DCW	0x53
	DCB	0x0
	DCB	0x8
	DCW	0x7d
	DCB	0x0
	DCB	0x8
	DCW	0x3d
	DCB	0x0
	DCB	0x9
	DCW	0xda
	DCB	0x12
	DCB	0x7
	DCW	0x17
	DCB	0x0
	DCB	0x8
	DCW	0x6d
	DCB	0x0
	DCB	0x8
	DCW	0x2d
	DCB	0x0
	DCB	0x9
	DCW	0xba
	DCB	0x0
	DCB	0x8
	DCW	0xd
	DCB	0x0
	DCB	0x8
	DCW	0x8d
	DCB	0x0
	DCB	0x8
	DCW	0x4d
	DCB	0x0
	DCB	0x9
	DCW	0xfa
	DCB	0x10
	DCB	0x7
	DCW	0x3
	DCB	0x0
	DCB	0x8
	DCW	0x53
	DCB	0x0
	DCB	0x8
	DCW	0x13
	DCB	0x15
	DCB	0x8
	DCW	0xc3
	DCB	0x13
	DCB	0x7
	DCW	0x23
	DCB	0x0
	DCB	0x8
	DCW	0x73
	DCB	0x0
	DCB	0x8
	DCW	0x33
	DCB	0x0
	DCB	0x9
	DCW	0xc6
	DCB	0x11
	DCB	0x7
	DCW	0xb
	DCB	0x0
	DCB	0x8
	DCW	0x63
	DCB	0x0
	DCB	0x8
	DCW	0x23
	DCB	0x0
	DCB	0x9
	DCW	0xa6
	DCB	0x0
	DCB	0x8
	DCW	0x3
	DCB	0x0
	DCB	0x8
	DCW	0x83
	DCB	0x0
	DCB	0x8
	DCW	0x43
	DCB	0x0
	DCB	0x9
	DCW	0xe6
	DCB	0x10
	DCB	0x7
	DCW	0x7
	DCB	0x0
	DCB	0x8
	DCW	0x5b
	DCB	0x0
	DCB	0x8
	DCW	0x1b
	DCB	0x0
	DCB	0x9
	DCW	0x96
	DCB	0x14
	DCB	0x7
	DCW	0x43
	DCB	0x0
	DCB	0x8
	DCW	0x7b
	DCB	0x0
	DCB	0x8
	DCW	0x3b
	DCB	0x0
	DCB	0x9
	DCW	0xd6
	DCB	0x12
	DCB	0x7
	DCW	0x13
	DCB	0x0
	DCB	0x8
	DCW	0x6b
	DCB	0x0
	DCB	0x8
	DCW	0x2b
	DCB	0x0
	DCB	0x9
	DCW	0xb6
	DCB	0x0
	DCB	0x8
	DCW	0xb
	DCB	0x0
	DCB	0x8
	DCW	0x8b
	DCB	0x0
	DCB	0x8
	DCW	0x4b
	DCB	0x0
	DCB	0x9
	DCW	0xf6
	DCB	0x10
	DCB	0x7
	DCW	0x5
	DCB	0x0
	DCB	0x8
	DCW	0x57
	DCB	0x0
	DCB	0x8
	DCW	0x17
	DCB	0x40
	DCB	0x8
	DCW	0x0
	DCB	0x13
	DCB	0x7
	DCW	0x33
	DCB	0x0
	DCB	0x8
	DCW	0x77
	DCB	0x0
	DCB	0x8
	DCW	0x37
	DCB	0x0
	DCB	0x9
	DCW	0xce
	DCB	0x11
	DCB	0x7
	DCW	0xf
	DCB	0x0
	DCB	0x8
	DCW	0x67
	DCB	0x0
	DCB	0x8
	DCW	0x27
	DCB	0x0
	DCB	0x9
	DCW	0xae
	DCB	0x0
	DCB	0x8
	DCW	0x7
	DCB	0x0
	DCB	0x8
	DCW	0x87
	DCB	0x0
	DCB	0x8
	DCW	0x47
	DCB	0x0
	DCB	0x9
	DCW	0xee
	DCB	0x10
	DCB	0x7
	DCW	0x9
	DCB	0x0
	DCB	0x8
	DCW	0x5f
	DCB	0x0
	DCB	0x8
	DCW	0x1f
	DCB	0x0
	DCB	0x9
	DCW	0x9e
	DCB	0x14
	DCB	0x7
	DCW	0x63
	DCB	0x0
	DCB	0x8
	DCW	0x7f
	DCB	0x0
	DCB	0x8
	DCW	0x3f
	DCB	0x0
	DCB	0x9
	DCW	0xde
	DCB	0x12
	DCB	0x7
	DCW	0x1b
	DCB	0x0
	DCB	0x8
	DCW	0x6f
	DCB	0x0
	DCB	0x8
	DCW	0x2f
	DCB	0x0
	DCB	0x9
	DCW	0xbe
	DCB	0x0
	DCB	0x8
	DCW	0xf
	DCB	0x0
	DCB	0x8
	DCW	0x8f
	DCB	0x0
	DCB	0x8
	DCW	0x4f
	DCB	0x0
	DCB	0x9
	DCW	0xfe
	DCB	0x60
	DCB	0x7
	DCW	0x0
	DCB	0x0
	DCB	0x8
	DCW	0x50
	DCB	0x0
	DCB	0x8
	DCW	0x10
	DCB	0x14
	DCB	0x8
	DCW	0x73
	DCB	0x12
	DCB	0x7
	DCW	0x1f
	DCB	0x0
	DCB	0x8
	DCW	0x70
	DCB	0x0
	DCB	0x8
	DCW	0x30
	DCB	0x0
	DCB	0x9
	DCW	0xc1
	DCB	0x10
	DCB	0x7
	DCW	0xa
	DCB	0x0
	DCB	0x8
	DCW	0x60
	DCB	0x0
	DCB	0x8
	DCW	0x20
	DCB	0x0
	DCB	0x9
	DCW	0xa1
	DCB	0x0
	DCB	0x8
	DCW	0x0
	DCB	0x0
	DCB	0x8
	DCW	0x80
	DCB	0x0
	DCB	0x8
	DCW	0x40
	DCB	0x0
	DCB	0x9
	DCW	0xe1
	DCB	0x10
	DCB	0x7
	DCW	0x6
	DCB	0x0
	DCB	0x8
	DCW	0x58
	DCB	0x0
	DCB	0x8
	DCW	0x18
	DCB	0x0
	DCB	0x9
	DCW	0x91
	DCB	0x13
	DCB	0x7
	DCW	0x3b
	DCB	0x0
	DCB	0x8
	DCW	0x78
	DCB	0x0
	DCB	0x8
	DCW	0x38
	DCB	0x0
	DCB	0x9
	DCW	0xd1
	DCB	0x11
	DCB	0x7
	DCW	0x11
	DCB	0x0
	DCB	0x8
	DCW	0x68
	DCB	0x0
	DCB	0x8
	DCW	0x28
	DCB	0x0
	DCB	0x9
	DCW	0xb1
	DCB	0x0
	DCB	0x8
	DCW	0x8
	DCB	0x0
	DCB	0x8
	DCW	0x88
	DCB	0x0
	DCB	0x8
	DCW	0x48
	DCB	0x0
	DCB	0x9
	DCW	0xf1
	DCB	0x10
	DCB	0x7
	DCW	0x4
	DCB	0x0
	DCB	0x8
	DCW	0x54
	DCB	0x0
	DCB	0x8
	DCW	0x14
	DCB	0x15
	DCB	0x8
	DCW	0xe3
	DCB	0x13
	DCB	0x7
	DCW	0x2b
	DCB	0x0
	DCB	0x8
	DCW	0x74
	DCB	0x0
	DCB	0x8
	DCW	0x34
	DCB	0x0
	DCB	0x9
	DCW	0xc9
	DCB	0x11
	DCB	0x7
	DCW	0xd
	DCB	0x0
	DCB	0x8
	DCW	0x64
	DCB	0x0
	DCB	0x8
	DCW	0x24
	DCB	0x0
	DCB	0x9
	DCW	0xa9
	DCB	0x0
	DCB	0x8
	DCW	0x4
	DCB	0x0
	DCB	0x8
	DCW	0x84
	DCB	0x0
	DCB	0x8
	DCW	0x44
	DCB	0x0
	DCB	0x9
	DCW	0xe9
	DCB	0x10
	DCB	0x7
	DCW	0x8
	DCB	0x0
	DCB	0x8
	DCW	0x5c
	DCB	0x0
	DCB	0x8
	DCW	0x1c
	DCB	0x0
	DCB	0x9
	DCW	0x99
	DCB	0x14
	DCB	0x7
	DCW	0x53
	DCB	0x0
	DCB	0x8
	DCW	0x7c
	DCB	0x0
	DCB	0x8
	DCW	0x3c
	DCB	0x0
	DCB	0x9
	DCW	0xd9
	DCB	0x12
	DCB	0x7
	DCW	0x17
	DCB	0x0
	DCB	0x8
	DCW	0x6c
	DCB	0x0
	DCB	0x8
	DCW	0x2c
	DCB	0x0
	DCB	0x9
	DCW	0xb9
	DCB	0x0
	DCB	0x8
	DCW	0xc
	DCB	0x0
	DCB	0x8
	DCW	0x8c
	DCB	0x0
	DCB	0x8
	DCW	0x4c
	DCB	0x0
	DCB	0x9
	DCW	0xf9
	DCB	0x10
	DCB	0x7
	DCW	0x3
	DCB	0x0
	DCB	0x8
	DCW	0x52
	DCB	0x0
	DCB	0x8
	DCW	0x12
	DCB	0x15
	DCB	0x8
	DCW	0xa3
	DCB	0x13
	DCB	0x7
	DCW	0x23
	DCB	0x0
	DCB	0x8
	DCW	0x72
	DCB	0x0
	DCB	0x8
	DCW	0x32
	DCB	0x0
	DCB	0x9
	DCW	0xc5
	DCB	0x11
	DCB	0x7
	DCW	0xb
	DCB	0x0
	DCB	0x8
	DCW	0x62
	DCB	0x0
	DCB	0x8
	DCW	0x22
	DCB	0x0
	DCB	0x9
	DCW	0xa5
	DCB	0x0
	DCB	0x8
	DCW	0x2
	DCB	0x0
	DCB	0x8
	DCW	0x82
	DCB	0x0
	DCB	0x8
	DCW	0x42
	DCB	0x0
	DCB	0x9
	DCW	0xe5
	DCB	0x10
	DCB	0x7
	DCW	0x7
	DCB	0x0
	DCB	0x8
	DCW	0x5a
	DCB	0x0
	DCB	0x8
	DCW	0x1a
	DCB	0x0
	DCB	0x9
	DCW	0x95
	DCB	0x14
	DCB	0x7
	DCW	0x43
	DCB	0x0
	DCB	0x8
	DCW	0x7a
	DCB	0x0
	DCB	0x8
	DCW	0x3a
	DCB	0x0
	DCB	0x9
	DCW	0xd5
	DCB	0x12
	DCB	0x7
	DCW	0x13
	DCB	0x0
	DCB	0x8
	DCW	0x6a
	DCB	0x0
	DCB	0x8
	DCW	0x2a
	DCB	0x0
	DCB	0x9
	DCW	0xb5
	DCB	0x0
	DCB	0x8
	DCW	0xa
	DCB	0x0
	DCB	0x8
	DCW	0x8a
	DCB	0x0
	DCB	0x8
	DCW	0x4a
	DCB	0x0
	DCB	0x9
	DCW	0xf5
	DCB	0x10
	DCB	0x7
	DCW	0x5
	DCB	0x0
	DCB	0x8
	DCW	0x56
	DCB	0x0
	DCB	0x8
	DCW	0x16
	DCB	0x40
	DCB	0x8
	DCW	0x0
	DCB	0x13
	DCB	0x7
	DCW	0x33
	DCB	0x0
	DCB	0x8
	DCW	0x76
	DCB	0x0
	DCB	0x8
	DCW	0x36
	DCB	0x0
	DCB	0x9
	DCW	0xcd
	DCB	0x11
	DCB	0x7
	DCW	0xf
	DCB	0x0
	DCB	0x8
	DCW	0x66
	DCB	0x0
	DCB	0x8
	DCW	0x26
	DCB	0x0
	DCB	0x9
	DCW	0xad
	DCB	0x0
	DCB	0x8
	DCW	0x6
	DCB	0x0
	DCB	0x8
	DCW	0x86
	DCB	0x0
	DCB	0x8
	DCW	0x46
	DCB	0x0
	DCB	0x9
	DCW	0xed
	DCB	0x10
	DCB	0x7
	DCW	0x9
	DCB	0x0
	DCB	0x8
	DCW	0x5e
	DCB	0x0
	DCB	0x8
	DCW	0x1e
	DCB	0x0
	DCB	0x9
	DCW	0x9d
	DCB	0x14
	DCB	0x7
	DCW	0x63
	DCB	0x0
	DCB	0x8
	DCW	0x7e
	DCB	0x0
	DCB	0x8
	DCW	0x3e
	DCB	0x0
	DCB	0x9
	DCW	0xdd
	DCB	0x12
	DCB	0x7
	DCW	0x1b
	DCB	0x0
	DCB	0x8
	DCW	0x6e
	DCB	0x0
	DCB	0x8
	DCW	0x2e
	DCB	0x0
	DCB	0x9
	DCW	0xbd
	DCB	0x0
	DCB	0x8
	DCW	0xe
	DCB	0x0
	DCB	0x8
	DCW	0x8e
	DCB	0x0
	DCB	0x8
	DCW	0x4e
	DCB	0x0
	DCB	0x9
	DCW	0xfd
	DCB	0x60
	DCB	0x7
	DCW	0x0
	DCB	0x0
	DCB	0x8
	DCW	0x51
	DCB	0x0
	DCB	0x8
	DCW	0x11
	DCB	0x15
	DCB	0x8
	DCW	0x83
	DCB	0x12
	DCB	0x7
	DCW	0x1f
	DCB	0x0
	DCB	0x8
	DCW	0x71
	DCB	0x0
	DCB	0x8
	DCW	0x31
	DCB	0x0
	DCB	0x9
	DCW	0xc3
	DCB	0x10
	DCB	0x7
	DCW	0xa
	DCB	0x0
	DCB	0x8
	DCW	0x61
	DCB	0x0
	DCB	0x8
	DCW	0x21
	DCB	0x0
	DCB	0x9
	DCW	0xa3
	DCB	0x0
	DCB	0x8
	DCW	0x1
	DCB	0x0
	DCB	0x8
	DCW	0x81
	DCB	0x0
	DCB	0x8
	DCW	0x41
	DCB	0x0
	DCB	0x9
	DCW	0xe3
	DCB	0x10
	DCB	0x7
	DCW	0x6
	DCB	0x0
	DCB	0x8
	DCW	0x59
	DCB	0x0
	DCB	0x8
	DCW	0x19
	DCB	0x0
	DCB	0x9
	DCW	0x93
	DCB	0x13
	DCB	0x7
	DCW	0x3b
	DCB	0x0
	DCB	0x8
	DCW	0x79
	DCB	0x0
	DCB	0x8
	DCW	0x39
	DCB	0x0
	DCB	0x9
	DCW	0xd3
	DCB	0x11
	DCB	0x7
	DCW	0x11
	DCB	0x0
	DCB	0x8
	DCW	0x69
	DCB	0x0
	DCB	0x8
	DCW	0x29
	DCB	0x0
	DCB	0x9
	DCW	0xb3
	DCB	0x0
	DCB	0x8
	DCW	0x9
	DCB	0x0
	DCB	0x8
	DCW	0x89
	DCB	0x0
	DCB	0x8
	DCW	0x49
	DCB	0x0
	DCB	0x9
	DCW	0xf3
	DCB	0x10
	DCB	0x7
	DCW	0x4
	DCB	0x0
	DCB	0x8
	DCW	0x55
	DCB	0x0
	DCB	0x8
	DCW	0x15
	DCB	0x10
	DCB	0x8
	DCW	0x102
	DCB	0x13
	DCB	0x7
	DCW	0x2b
	DCB	0x0
	DCB	0x8
	DCW	0x75
	DCB	0x0
	DCB	0x8
	DCW	0x35
	DCB	0x0
	DCB	0x9
	DCW	0xcb
	DCB	0x11
	DCB	0x7
	DCW	0xd
	DCB	0x0
	DCB	0x8
	DCW	0x65
	DCB	0x0
	DCB	0x8
	DCW	0x25
	DCB	0x0
	DCB	0x9
	DCW	0xab
	DCB	0x0
	DCB	0x8
	DCW	0x5
	DCB	0x0
	DCB	0x8
	DCW	0x85
	DCB	0x0
	DCB	0x8
	DCW	0x45
	DCB	0x0
	DCB	0x9
	DCW	0xeb
	DCB	0x10
	DCB	0x7
	DCW	0x8
	DCB	0x0
	DCB	0x8
	DCW	0x5d
	DCB	0x0
	DCB	0x8
	DCW	0x1d
	DCB	0x0
	DCB	0x9
	DCW	0x9b
	DCB	0x14
	DCB	0x7
	DCW	0x53
	DCB	0x0
	DCB	0x8
	DCW	0x7d
	DCB	0x0
	DCB	0x8
	DCW	0x3d
	DCB	0x0
	DCB	0x9
	DCW	0xdb
	DCB	0x12
	DCB	0x7
	DCW	0x17
	DCB	0x0
	DCB	0x8
	DCW	0x6d
	DCB	0x0
	DCB	0x8
	DCW	0x2d
	DCB	0x0
	DCB	0x9
	DCW	0xbb
	DCB	0x0
	DCB	0x8
	DCW	0xd
	DCB	0x0
	DCB	0x8
	DCW	0x8d
	DCB	0x0
	DCB	0x8
	DCW	0x4d
	DCB	0x0
	DCB	0x9
	DCW	0xfb
	DCB	0x10
	DCB	0x7
	DCW	0x3
	DCB	0x0
	DCB	0x8
	DCW	0x53
	DCB	0x0
	DCB	0x8
	DCW	0x13
	DCB	0x15
	DCB	0x8
	DCW	0xc3
	DCB	0x13
	DCB	0x7
	DCW	0x23
	DCB	0x0
	DCB	0x8
	DCW	0x73
	DCB	0x0
	DCB	0x8
	DCW	0x33
	DCB	0x0
	DCB	0x9
	DCW	0xc7
	DCB	0x11
	DCB	0x7
	DCW	0xb
	DCB	0x0
	DCB	0x8
	DCW	0x63
	DCB	0x0
	DCB	0x8
	DCW	0x23
	DCB	0x0
	DCB	0x9
	DCW	0xa7
	DCB	0x0
	DCB	0x8
	DCW	0x3
	DCB	0x0
	DCB	0x8
	DCW	0x83
	DCB	0x0
	DCB	0x8
	DCW	0x43
	DCB	0x0
	DCB	0x9
	DCW	0xe7
	DCB	0x10
	DCB	0x7
	DCW	0x7
	DCB	0x0
	DCB	0x8
	DCW	0x5b
	DCB	0x0
	DCB	0x8
	DCW	0x1b
	DCB	0x0
	DCB	0x9
	DCW	0x97
	DCB	0x14
	DCB	0x7
	DCW	0x43
	DCB	0x0
	DCB	0x8
	DCW	0x7b
	DCB	0x0
	DCB	0x8
	DCW	0x3b
	DCB	0x0
	DCB	0x9
	DCW	0xd7
	DCB	0x12
	DCB	0x7
	DCW	0x13
	DCB	0x0
	DCB	0x8
	DCW	0x6b
	DCB	0x0
	DCB	0x8
	DCW	0x2b
	DCB	0x0
	DCB	0x9
	DCW	0xb7
	DCB	0x0
	DCB	0x8
	DCW	0xb
	DCB	0x0
	DCB	0x8
	DCW	0x8b
	DCB	0x0
	DCB	0x8
	DCW	0x4b
	DCB	0x0
	DCB	0x9
	DCW	0xf7
	DCB	0x10
	DCB	0x7
	DCW	0x5
	DCB	0x0
	DCB	0x8
	DCW	0x57
	DCB	0x0
	DCB	0x8
	DCW	0x17
	DCB	0x40
	DCB	0x8
	DCW	0x0
	DCB	0x13
	DCB	0x7
	DCW	0x33
	DCB	0x0
	DCB	0x8
	DCW	0x77
	DCB	0x0
	DCB	0x8
	DCW	0x37
	DCB	0x0
	DCB	0x9
	DCW	0xcf
	DCB	0x11
	DCB	0x7
	DCW	0xf
	DCB	0x0
	DCB	0x8
	DCW	0x67
	DCB	0x0
	DCB	0x8
	DCW	0x27
	DCB	0x0
	DCB	0x9
	DCW	0xaf
	DCB	0x0
	DCB	0x8
	DCW	0x7
	DCB	0x0
	DCB	0x8
	DCW	0x87
	DCB	0x0
	DCB	0x8
	DCW	0x47
	DCB	0x0
	DCB	0x9
	DCW	0xef
	DCB	0x10
	DCB	0x7
	DCW	0x9
	DCB	0x0
	DCB	0x8
	DCW	0x5f
	DCB	0x0
	DCB	0x8
	DCW	0x1f
	DCB	0x0
	DCB	0x9
	DCW	0x9f
	DCB	0x14
	DCB	0x7
	DCW	0x63
	DCB	0x0
	DCB	0x8
	DCW	0x7f
	DCB	0x0
	DCB	0x8
	DCW	0x3f
	DCB	0x0
	DCB	0x9
	DCW	0xdf
	DCB	0x12
	DCB	0x7
	DCW	0x1b
	DCB	0x0
	DCB	0x8
	DCW	0x6f
	DCB	0x0
	DCB	0x8
	DCW	0x2f
	DCB	0x0
	DCB	0x9
	DCW	0xbf
	DCB	0x0
	DCB	0x8
	DCW	0xf
	DCB	0x0
	DCB	0x8
	DCW	0x8f
	DCB	0x0
	DCB	0x8
	DCW	0x4f
	DCB	0x0
	DCB	0x9
	DCW	0xff
|?distfix@?1??fixedtables@@9@9| DCB 0x10		; `fixedtables'::`2'::distfix
	DCB	0x5
	DCW	0x1
	DCB	0x17
	DCB	0x5
	DCW	0x101
	DCB	0x13
	DCB	0x5
	DCW	0x11
	DCB	0x1b
	DCB	0x5
	DCW	0x1001
	DCB	0x11
	DCB	0x5
	DCW	0x5
	DCB	0x19
	DCB	0x5
	DCW	0x401
	DCB	0x15
	DCB	0x5
	DCW	0x41
	DCB	0x1d
	DCB	0x5
	DCW	0x4001
	DCB	0x10
	DCB	0x5
	DCW	0x3
	DCB	0x18
	DCB	0x5
	DCW	0x201
	DCB	0x14
	DCB	0x5
	DCW	0x21
	DCB	0x1c
	DCB	0x5
	DCW	0x2001
	DCB	0x12
	DCB	0x5
	DCW	0x9
	DCB	0x1a
	DCB	0x5
	DCW	0x801
	DCB	0x16
	DCB	0x5
	DCW	0x81
	DCB	0x40
	DCB	0x5
	DCW	0x0
	DCB	0x10
	DCB	0x5
	DCW	0x2
	DCB	0x17
	DCB	0x5
	DCW	0x181
	DCB	0x13
	DCB	0x5
	DCW	0x19
	DCB	0x1b
	DCB	0x5
	DCW	0x1801
	DCB	0x11
	DCB	0x5
	DCW	0x7
	DCB	0x19
	DCB	0x5
	DCW	0x601
	DCB	0x15
	DCB	0x5
	DCW	0x61
	DCB	0x1d
	DCB	0x5
	DCW	0x6001
	DCB	0x10
	DCB	0x5
	DCW	0x4
	DCB	0x18
	DCB	0x5
	DCW	0x301
	DCB	0x14
	DCB	0x5
	DCW	0x31
	DCB	0x1c
	DCB	0x5
	DCW	0x3001
	DCB	0x12
	DCB	0x5
	DCW	0xd
	DCB	0x1a
	DCB	0x5
	DCW	0xc01
	DCB	0x16
	DCB	0x5
	DCW	0xc1
	DCB	0x40
	DCB	0x5
	DCW	0x0
|?order@?1??inflate@@9@9| DCW 0x10			; `inflate'::`2'::order
	DCW	0x11
	DCW	0x12
	DCW	0x0
	DCW	0x8
	DCW	0x7
	DCW	0x9
	DCW	0x6
	DCW	0xa
	DCW	0x5
	DCW	0xb
	DCW	0x4
	DCW	0xc
	DCW	0x3
	DCW	0xd
	DCW	0x2
	DCW	0xe
	DCW	0x1
	DCW	0xf
	EXPORT	|inflateCodesUsed|
	EXPORT	|inflateMark|
	EXPORT	|inflateValidate|
	EXPORT	|inflateUndermine|
	EXPORT	|inflateCopy|
	EXPORT	|inflateSyncPoint|
	EXPORT	|inflateSync|
	EXPORT	|inflateGetHeader|
	EXPORT	|inflateSetDictionary|
	EXPORT	|inflateGetDictionary|
	EXPORT	|inflatePrime|
	EXPORT	|inflateInit_|
	EXPORT	|inflateReset2|
	EXPORT	|inflateResetKeep|
	EXPORT	|inflateEnd|
	EXPORT	|inflate|
	EXPORT	|inflateInit2_|
	EXPORT	|inflateReset|

	AREA	|.pdata|, PDATA
|$pdata$inflateCodesUsed| DCD imagerel |$LN5|
	DCD	imagerel |$unwind$inflateCodesUsed|

	AREA	|.pdata|, PDATA
|$pdata$inflateMark| DCD imagerel |$LN9|
	DCD	imagerel |$unwind$inflateMark|

	AREA	|.pdata|, PDATA
|$pdata$inflateValidate| DCD imagerel |$LN7|
	DCD	imagerel |$unwind$inflateValidate|

	AREA	|.pdata|, PDATA
|$pdata$inflateUndermine| DCD imagerel |$LN5|
	DCD	imagerel |$unwind$inflateUndermine|

	AREA	|.pdata|, PDATA
|$pdata$inflateCopy| DCD imagerel |$LN14|
	DCD	imagerel |$unwind$inflateCopy|

	AREA	|.pdata|, PDATA
|$pdata$inflateSyncPoint| DCD imagerel |$LN7|
	DCD	imagerel |$unwind$inflateSyncPoint|

	AREA	|.pdata|, PDATA
|$pdata$inflateSync| DCD imagerel |$LN17|
	DCD	imagerel |$unwind$inflateSync|

	AREA	|.pdata|, PDATA
|$pdata$inflateGetHeader| DCD imagerel |$LN7|
	DCD	imagerel |$unwind$inflateGetHeader|

	AREA	|.pdata|, PDATA
|$pdata$inflateSetDictionary| DCD imagerel |$LN12|
	DCD	imagerel |$unwind$inflateSetDictionary|

	AREA	|.pdata|, PDATA
|$pdata$inflateGetDictionary| DCD imagerel |$LN7|
	DCD	imagerel |$unwind$inflateGetDictionary|

	AREA	|.pdata|, PDATA
|$pdata$updatewindow| DCD imagerel |updatewindow|
	DCD	imagerel |$unwind$updatewindow|

	AREA	|.pdata|, PDATA
|$pdata$inflatePrime| DCD imagerel |$LN8|
	DCD	imagerel |$unwind$inflatePrime|

	AREA	|.pdata|, PDATA
|$pdata$inflateReset2| DCD imagerel |$LN12|
	DCD	imagerel |$unwind$inflateReset2|

	AREA	|.pdata|, PDATA
|$pdata$inflateResetKeep| DCD imagerel |$LN6|
	DCD	imagerel |$unwind$inflateResetKeep|

	AREA	|.pdata|, PDATA
|$pdata$inflateEnd| DCD imagerel |$LN6|
	DCD	imagerel |$unwind$inflateEnd|

	AREA	|.pdata|, PDATA
|$pdata$inflate| DCD imagerel |$LN1036|
	DCD	0x56916a5
	;Flags[SingleProEpi] functionLength[5796] RegF[0] RegI[9] H[0] frameChainReturn[Chained] frameSize[160]

	AREA	|.pdata|, PDATA
|$pdata$inflateInit2_| DCD imagerel |$LN12|
	DCD	imagerel |$unwind$inflateInit2_|

	AREA	|.pdata|, PDATA
|$pdata$inflateReset| DCD imagerel |$LN5|
	DCD	imagerel |$unwind$inflateReset|

	AREA	|.xdata|, DATA
|$unwind$inflateReset| DCD 0x880000f
	DCD	0x400006
	DCD	0x40000d
	DCD	0xe3e481e1
	;Code Words[1], Epilog Count[2], E[0], X[0], Function Length[15]=60 bytes
	;Epilog Start Index[1], Epilog Start Offset[6]=24 bytes
	;Epilog Start Index[1], Epilog Start Offset[13]=52 bytes
	;set_fp
	;save_fplr_x
	;end
	;nop

	AREA	|.xdata|, DATA
|$unwind$inflateInit2_| DCD 0x11000045
	DCD	0x40000e
	DCD	0x400029
	DCD	0x40003c
	DCD	0x400041
	DCD	0x82d081e1
	DCD	0xe3e3e424
	;Code Words[2], Epilog Count[4], E[0], X[0], Function Length[69]=276 bytes
	;Epilog Start Index[1], Epilog Start Offset[14]=56 bytes
	;Epilog Start Index[1], Epilog Start Offset[41]=164 bytes
	;Epilog Start Index[1], Epilog Start Offset[60]=240 bytes
	;Epilog Start Index[1], Epilog Start Offset[65]=260 bytes
	;set_fp
	;save_fplr_x
	;save_reg
	;save_r19r20_x
	;end
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$inflateEnd| DCD 0x10800018
	DCD	0x400007
	DCD	0x400015
	DCD	0x1d481e1
	DCD	0xe3e3e3e4
	;Code Words[2], Epilog Count[2], E[0], X[0], Function Length[24]=96 bytes
	;Epilog Start Index[1], Epilog Start Offset[7]=28 bytes
	;Epilog Start Index[1], Epilog Start Offset[21]=84 bytes
	;set_fp
	;save_fplr_x
	;save_reg_x
	;end
	;nop
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$inflateResetKeep| DCD 0x8800022
	DCD	0x400006
	DCD	0x400020
	DCD	0xe3e481e1
	;Code Words[1], Epilog Count[2], E[0], X[0], Function Length[34]=136 bytes
	;Epilog Start Index[1], Epilog Start Offset[6]=24 bytes
	;Epilog Start Index[1], Epilog Start Offset[32]=128 bytes
	;set_fp
	;save_fplr_x
	;end
	;nop

	AREA	|.xdata|, DATA
|$unwind$inflateReset2| DCD 0x1080002b
	DCD	0x400022
	DCD	0x400027
	DCD	0x82c881e1
	DCD	0xe3e3e424
	;Code Words[2], Epilog Count[2], E[0], X[0], Function Length[43]=172 bytes
	;Epilog Start Index[1], Epilog Start Offset[34]=136 bytes
	;Epilog Start Index[1], Epilog Start Offset[39]=156 bytes
	;set_fp
	;save_fplr_x
	;save_regp
	;save_r19r20_x
	;end
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$inflatePrime| DCD 0x8c00020
	DCD	0x400009
	DCD	0x40001b
	DCD	0x40001e
	DCD	0xe3e481e1
	;Code Words[1], Epilog Count[3], E[0], X[0], Function Length[32]=128 bytes
	;Epilog Start Index[1], Epilog Start Offset[9]=36 bytes
	;Epilog Start Index[1], Epilog Start Offset[27]=108 bytes
	;Epilog Start Index[1], Epilog Start Offset[30]=120 bytes
	;set_fp
	;save_fplr_x
	;end
	;nop

	AREA	|.xdata|, DATA
|$unwind$updatewindow| DCD 0x1080004e
	DCD	0x400014
	DCD	0x40004a
	DCD	0x82c881e1
	DCD	0xe3e3e424
	;Code Words[2], Epilog Count[2], E[0], X[0], Function Length[78]=312 bytes
	;Epilog Start Index[1], Epilog Start Offset[20]=80 bytes
	;Epilog Start Index[1], Epilog Start Offset[74]=296 bytes
	;set_fp
	;save_fplr_x
	;save_regp
	;save_r19r20_x
	;end
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$inflateGetDictionary| DCD 0x10800026
	DCD	0x40000a
	DCD	0x400022
	DCD	0x82d081e1
	DCD	0xe3e3e424
	;Code Words[2], Epilog Count[2], E[0], X[0], Function Length[38]=152 bytes
	;Epilog Start Index[1], Epilog Start Offset[10]=40 bytes
	;Epilog Start Index[1], Epilog Start Offset[34]=136 bytes
	;set_fp
	;save_fplr_x
	;save_reg
	;save_r19r20_x
	;end
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$inflateSetDictionary| DCD 0x1100003b
	DCD	0x40001f
	DCD	0x40002b
	DCD	0x400032
	DCD	0x400037
	DCD	0x82c881e1
	DCD	0xe3e3e424
	;Code Words[2], Epilog Count[4], E[0], X[0], Function Length[59]=236 bytes
	;Epilog Start Index[1], Epilog Start Offset[31]=124 bytes
	;Epilog Start Index[1], Epilog Start Offset[43]=172 bytes
	;Epilog Start Index[1], Epilog Start Offset[50]=200 bytes
	;Epilog Start Index[1], Epilog Start Offset[55]=220 bytes
	;set_fp
	;save_fplr_x
	;save_regp
	;save_r19r20_x
	;end
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$inflateGetHeader| DCD 0x8800010
	DCD	0x40000b
	DCD	0x40000e
	DCD	0xe3e481e1
	;Code Words[1], Epilog Count[2], E[0], X[0], Function Length[16]=64 bytes
	;Epilog Start Index[1], Epilog Start Offset[11]=44 bytes
	;Epilog Start Index[1], Epilog Start Offset[14]=56 bytes
	;set_fp
	;save_fplr_x
	;end
	;nop

	AREA	|.xdata|, DATA
|$unwind$inflateSync| DCD 0x11000057
	DCD	0x400008
	DCD	0x400013
	DCD	0x400047
	DCD	0x400053
	DCD	0x82c883e1
	DCD	0xe3e3e424
	;Code Words[2], Epilog Count[4], E[0], X[0], Function Length[87]=348 bytes
	;Epilog Start Index[1], Epilog Start Offset[8]=32 bytes
	;Epilog Start Index[1], Epilog Start Offset[19]=76 bytes
	;Epilog Start Index[1], Epilog Start Offset[71]=284 bytes
	;Epilog Start Index[1], Epilog Start Offset[83]=332 bytes
	;set_fp
	;save_fplr_x
	;save_regp
	;save_r19r20_x
	;end
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$inflateSyncPoint| DCD 0x8c00015
	DCD	0x400006
	DCD	0x400010
	DCD	0x400013
	DCD	0xe3e481e1
	;Code Words[1], Epilog Count[3], E[0], X[0], Function Length[21]=84 bytes
	;Epilog Start Index[1], Epilog Start Offset[6]=24 bytes
	;Epilog Start Index[1], Epilog Start Offset[16]=64 bytes
	;Epilog Start Index[1], Epilog Start Offset[19]=76 bytes
	;set_fp
	;save_fplr_x
	;end
	;nop

	AREA	|.xdata|, DATA
|$unwind$inflateCopy| DCD 0x10c00069
	DCD	0x400022
	DCD	0x40005e
	DCD	0x400064
	DCD	0x4d181e1
	DCD	0xe42682c8
	;Code Words[2], Epilog Count[3], E[0], X[0], Function Length[105]=420 bytes
	;Epilog Start Index[1], Epilog Start Offset[34]=136 bytes
	;Epilog Start Index[1], Epilog Start Offset[94]=376 bytes
	;Epilog Start Index[1], Epilog Start Offset[100]=400 bytes
	;set_fp
	;save_fplr_x
	;save_reg
	;save_regp
	;save_r19r20_x
	;end

	AREA	|.xdata|, DATA
|$unwind$inflateUndermine| DCD 0x880000e
	DCD	0x400006
	DCD	0x40000c
	DCD	0xe3e481e1
	;Code Words[1], Epilog Count[2], E[0], X[0], Function Length[14]=56 bytes
	;Epilog Start Index[1], Epilog Start Offset[6]=24 bytes
	;Epilog Start Index[1], Epilog Start Offset[12]=48 bytes
	;set_fp
	;save_fplr_x
	;end
	;nop

	AREA	|.xdata|, DATA
|$unwind$inflateValidate| DCD 0x8800012
	DCD	0x400006
	DCD	0x400010
	DCD	0xe3e481e1
	;Code Words[1], Epilog Count[2], E[0], X[0], Function Length[18]=72 bytes
	;Epilog Start Index[1], Epilog Start Offset[6]=24 bytes
	;Epilog Start Index[1], Epilog Start Offset[16]=64 bytes
	;set_fp
	;save_fplr_x
	;end
	;nop

	AREA	|.xdata|, DATA
|$unwind$inflateMark| DCD 0x9000021
	DCD	0x400006
	DCD	0x400010
	DCD	0x40001a
	DCD	0x40001f
	DCD	0xe3e481e1
	;Code Words[1], Epilog Count[4], E[0], X[0], Function Length[33]=132 bytes
	;Epilog Start Index[1], Epilog Start Offset[6]=24 bytes
	;Epilog Start Index[1], Epilog Start Offset[16]=64 bytes
	;Epilog Start Index[1], Epilog Start Offset[26]=104 bytes
	;Epilog Start Index[1], Epilog Start Offset[31]=124 bytes
	;set_fp
	;save_fplr_x
	;end
	;nop

	AREA	|.xdata|, DATA
|$unwind$inflateCodesUsed| DCD 0x880000f
	DCD	0x400006
	DCD	0x40000d
	DCD	0xe3e481e1
	;Code Words[1], Epilog Count[2], E[0], X[0], Function Length[15]=60 bytes
	;Epilog Start Index[1], Epilog Start Offset[6]=24 bytes
	;Epilog Start Index[1], Epilog Start Offset[13]=52 bytes
	;set_fp
	;save_fplr_x
	;end
	;nop
; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflateReset| PROC

; 146  : {

  00000		 |$LN5|
  00000	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00004	910003fd	 mov         fp,sp
  00008	aa0003eb	 mov         x11,x0

; 147  :     struct inflate_state FAR *state;
; 148  : 
; 149  :     if (inflateStateCheck(strm)) return Z_STREAM_ERROR;

  0000c	94000000	 bl          inflateStateCheck
  00010	34000000	 cbz         w0,|$LN2@inflateRes|
  00014	12800020	 mov         w0,#-2
  00018	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0001c	d65f03c0	 ret
  00020		 |$LN2@inflateRes|

; 150  :     state = (struct inflate_state FAR *)strm->state;
; 151  :     state->wsize = 0;
; 152  :     state->whave = 0;
; 153  :     state->wnext = 0;
; 154  :     return inflateResetKeep(strm);

  00020	aa0b03e0	 mov         x0,x11
  00024	f9401568	 ldr         x8,[x11,#0x28]
  00028	b900351f	 str         wzr,[x8,#0x34]
  0002c	f9001d1f	 str         xzr,[x8,#0x38]
  00030	94000000	 bl          inflateResetKeep
  00034	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00038	d65f03c0	 ret

			 ENDP  ; |inflateReset|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflateInit2_| PROC

; 200  : {

  00000		 |$LN12|
  00000	a9be53f3	 stp         x19,x20,[sp,#-0x20]!
  00004	f9000bf5	 str         x21,[sp,#0x10]
  00008	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  0000c	910003fd	 mov         fp,sp
  00010	aa0003f3	 mov         x19,x0
  00014	2a0103f5	 mov         w21,w1

; 201  :     int ret;
; 202  :     struct inflate_state FAR *state;
; 203  : 
; 204  :     if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||

  00018	b4000002	 cbz         x2,|$LN3@inflateIni|
  0001c	39c00048	 ldrsb       w8,[x2]
  00020	7100c51f	 cmp         w8,#0x31
  00024	54000001	 bne         |$LN3@inflateIni|
  00028	7101607f	 cmp         w3,#0x58
  0002c	54000001	 bne         |$LN3@inflateIni|

; 207  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

  00030	b5000013	 cbnz        x19,|$LN4@inflateIni|
  00034	12800020	 mov         w0,#-2
  00038	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0003c	f9400bf5	 ldr         x21,[sp,#0x10]
  00040	a8c253f3	 ldp         x19,x20,[sp],#0x20
  00044	d65f03c0	 ret
  00048		 |$LN4@inflateIni|

; 208  :     strm->msg = Z_NULL;                 /* in case we return an error */
; 209  :     if (strm->zalloc == (alloc_func)0) {

  00048	f9401a69	 ldr         x9,[x19,#0x30]
  0004c	f900127f	 str         xzr,[x19,#0x20]
  00050	b5000009	 cbnz        x9,|$LN10@inflateIni|

; 210  : #ifdef Z_SOLO
; 211  :         return Z_STREAM_ERROR;
; 212  : #else
; 213  :         strm->zalloc = zcalloc;

  00054	90000008	 adrp        x8,zcalloc
  00058	91000108	 add         x8,x8,PageOffset(zcalloc)

; 214  :         strm->opaque = (voidpf)0;

  0005c	f900227f	 str         xzr,[x19,#0x40]
  00060	f9001a68	 str         x8,[x19,#0x30]
  00064	90000008	 adrp        x8,zcalloc
  00068	91000109	 add         x9,x8,PageOffset(zcalloc)
  0006c	d2800000	 mov         x0,#0
  00070	14000002	 b           |$LN5@inflateIni|
  00074		 |$LN10@inflateIni|
  00074	f9402260	 ldr         x0,[x19,#0x40]
  00078		 |$LN5@inflateIni|

; 215  : #endif
; 216  :     }
; 217  :     if (strm->zfree == (free_func)0)

  00078	f9401e68	 ldr         x8,[x19,#0x38]
  0007c	b5000008	 cbnz        x8,|$LN6@inflateIni|

; 218  : #ifdef Z_SOLO
; 219  :         return Z_STREAM_ERROR;
; 220  : #else
; 221  :         strm->zfree = zcfree;

  00080	90000008	 adrp        x8,zcfree
  00084	91000108	 add         x8,x8,PageOffset(zcfree)
  00088	f9001e68	 str         x8,[x19,#0x38]
  0008c		 |$LN6@inflateIni|

; 222  : #endif
; 223  :     state = (struct inflate_state FAR *)

  0008c	52837e02	 mov         w2,#0x1BF0
  00090	52800021	 mov         w1,#1
  00094	d63f0120	 blr         x9
  00098	aa0003f4	 mov         x20,x0

; 224  :             ZALLOC(strm, 1, sizeof(struct inflate_state));
; 225  :     if (state == Z_NULL) return Z_MEM_ERROR;

  0009c	b5000014	 cbnz        x20,|$LN7@inflateIni|
  000a0	12800060	 mov         w0,#-4
  000a4	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000a8	f9400bf5	 ldr         x21,[sp,#0x10]
  000ac	a8c253f3	 ldp         x19,x20,[sp],#0x20
  000b0	d65f03c0	 ret
  000b4		 |$LN7@inflateIni|

; 226  :     Tracev((stderr, "inflate: allocated\n"));
; 227  :     strm->state = (struct internal_state FAR *)state;
; 228  :     state->strm = strm;
; 229  :     state->window = Z_NULL;
; 230  :     state->mode = HEAD;     /* to pass state test in inflateReset2() */

  000b4	5287e688	 mov         w8,#0x3F34
  000b8	f9001674	 str         x20,[x19,#0x28]

; 231  :     ret = inflateReset2(strm, windowBits);

  000bc	2a1503e1	 mov         w1,w21
  000c0	b9000a88	 str         w8,[x20,#8]
  000c4	aa1303e0	 mov         x0,x19
  000c8	f9000293	 str         x19,[x20]
  000cc	f900229f	 str         xzr,[x20,#0x40]
  000d0	94000000	 bl          inflateReset2
  000d4	2a0003f5	 mov         w21,w0

; 232  :     if (ret != Z_OK) {

  000d8	34000015	 cbz         w21,|$LN8@inflateIni|

; 233  :         ZFREE(strm, state);

  000dc	a9438268	 ldp         x8,x0,[x19,#0x38]
  000e0	aa1403e1	 mov         x1,x20
  000e4	d63f0100	 blr         x8

; 234  :         strm->state = Z_NULL;

  000e8	f900167f	 str         xzr,[x19,#0x28]
  000ec		 |$LN8@inflateIni|

; 235  :     }
; 236  :     return ret;

  000ec	2a1503e0	 mov         w0,w21
  000f0	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000f4	f9400bf5	 ldr         x21,[sp,#0x10]
  000f8	a8c253f3	 ldp         x19,x20,[sp],#0x20
  000fc	d65f03c0	 ret
  00100		 |$LN3@inflateIni|

; 205  :         stream_size != (int)(sizeof(z_stream)))
; 206  :         return Z_VERSION_ERROR;

  00100	128000a0	 mov         w0,#-6
  00104	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00108	f9400bf5	 ldr         x21,[sp,#0x10]
  0010c	a8c253f3	 ldp         x19,x20,[sp],#0x20
  00110	d65f03c0	 ret

			 ENDP  ; |inflateInit2_|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflate| PROC

; 625  : {

  00000		 |$LN1036|
  00000	a9bb53f3	 stp         x19,x20,[sp,#-0x50]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	a90263f7	 stp         x23,x24,[sp,#0x20]
  0000c	a9036bf9	 stp         x25,x26,[sp,#0x30]
  00010	f90023fb	 str         x27,[sp,#0x40]
  00014	a9bb7bfd	 stp         fp,lr,[sp,#-0x50]!
  00018	910003fd	 mov         fp,sp
  0001c	2a0103f7	 mov         w23,w1
  00020	b9002bf7	 str         w23,[sp,#0x28]
  00024	aa0003fa	 mov         x26,x0

; 626  :     struct inflate_state FAR *state;
; 627  :     z_const unsigned char FAR *next;    /* next input */
; 628  :     unsigned char FAR *put;     /* next output */
; 629  :     unsigned have, left;        /* available input and output */
; 630  :     unsigned long hold;         /* bit buffer */
; 631  :     unsigned bits;              /* bits in bit buffer */
; 632  :     unsigned in, out;           /* save starting available input and output */
; 633  :     unsigned copy;              /* number of stored or match bytes to copy */
; 634  :     unsigned char FAR *from;    /* where to copy match bytes from */
; 635  :     code here;                  /* current decoding table entry */
; 636  :     code last;                  /* parent table entry */
; 637  :     unsigned len;               /* length to copy for repeats, bits to drop */
; 638  :     int ret;                    /* return code */
; 639  : #ifdef GUNZIP
; 640  :     unsigned char hbuf[4];      /* buffer for gzip header crc calculation */
; 641  : #endif
; 642  :     static const unsigned short order[19] = /* permutation of code lengths */
; 643  :         {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 644  : 
; 645  :     if (inflateStateCheck(strm) || strm->next_out == Z_NULL ||

  00028	94000000	 bl          inflateStateCheck
  0002c	35000000	 cbnz        w0,|$LN333@inflate|
  00030	f9400b5b	 ldr         x27,[x26,#0x10]
  00034	b400001b	 cbz         x27,|$LN333@inflate|
  00038	f9400355	 ldr         x21,[x26]
  0003c	b5000015	 cbnz        x21,|$LN747@inflate|
  00040	b9400b48	 ldr         w8,[x26,#8]
  00044	35000008	 cbnz        w8,|$LN333@inflate|
  00048		 |$LN747@inflate|

; 648  : 
; 649  :     state = (struct inflate_state FAR *)strm->state;

  00048	f9401759	 ldr         x25,[x26,#0x28]

; 650  :     if (state->mode == TYPE) state->mode = TYPEDO;      /* skip check */

  0004c	5287e7e8	 mov         w8,#0x3F3F
  00050	5287e806	 mov         w6,#0x3F40
  00054	b9400b2b	 ldr         w11,[x25,#8]
  00058	6b08017f	 cmp         w11,w8
  0005c	54000001	 bne         |$LN4@inflate|
  00060	b9000b26	 str         w6,[x25,#8]
  00064	5287e80b	 mov         w11,#0x3F40
  00068	f9400b5b	 ldr         x27,[x26,#0x10]
  0006c	f9400355	 ldr         x21,[x26]
  00070		 |$LN4@inflate|

; 651  :     LOAD();

  00070	b9401b58	 ldr         w24,[x26,#0x18]

; 652  :     in = have;
; 653  :     out = left;
; 654  :     ret = Z_OK;
; 655  :     for (;;)
; 656  :         switch (state->mode) {

  00074	5287e689	 mov         w9,#0x3F34
  00078	b90013ff	 str         wzr,[sp,#0x10]
  0007c	b9400b54	 ldr         w20,[x26,#8]
  00080	4b09016a	 sub         w10,w11,w9
  00084	29494f36	 ldp         w22,w19,[x25,#0x48]
  00088	7100795f	 cmp         w10,#0x1E
  0008c	2a1803ed	 mov         w13,w24
  00090	290437f8	 stp         w24,w13,[sp,#0x20]
  00094	b9002ff4	 str         w20,[sp,#0x2C]
  00098	54000008	 bhi         |$LN333@inflate|

; 1110 :                 last = here;
; 1111 :                 for (;;) {
; 1112 :                     here = state->distcode[last.val +

  0009c	90000008	 adrp        x8,|??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@|
  000a0	9100010f	 add         x15,x8,PageOffset(|??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@|)
  000a4	90000008	 adrp        x8,|??_C@_0BL@IHKGDAEE@unknown?5compression?5method@|
  000a8	9100010e	 add         x14,x8,PageOffset(|??_C@_0BL@IHKGDAEE@unknown?5compression?5method@|)
  000ac	f9001bef	 str         x15,[sp,#0x30]
  000b0	90000009	 adrp        x9,|?order@?1??inflate@@9@9|
  000b4	9100012c	 add         x12,x9,PageOffset(|?order@?1??inflate@@9@9|)
  000b8	a903bbec	 stp         x12,x14,[sp,#0x38]
  000bc	12800003	 mov         w3,#-1
  000c0	5287ea27	 mov         w7,#0x3F51
  000c4	5287e7e5	 mov         w5,#0x3F3F
  000c8		 |$LN994@inflate|

; 652  :     in = have;
; 653  :     out = left;
; 654  :     ret = Z_OK;
; 655  :     for (;;)
; 656  :         switch (state->mode) {

  000c8	5287e904	 mov         w4,#0x3F48
  000cc	5287e8e2	 mov         w2,#0x3F47
  000d0	5287e820	 mov         w0,#0x3F41
  000d4	528001e1	 mov         w1,#0xF
  000d8	1000ae69	 adr         x9,__swt
  000dc	b8aa5928	 ldrsw       x8,[x9,w10 uxtw #2]
  000e0	10004889	 adr         x9,|$LN998@inflate|
  000e4	8b080928	 add         x8,x9,x8,lsl #2
  000e8	d61f0100	 br          x8
  000ec		 |$LN335@inflate|

; 657  :         case HEAD:
; 658  :             if (state->wrap == 0) {

  000ec	b940132c	 ldr         w12,[x25,#0x10]
  000f0	3500000c	 cbnz        w12,|$LN12@inflate|

; 659  :                 state->mode = TYPEDO;

  000f4	b9000b26	 str         w6,[x25,#8]

; 660  :                 break;

  000f8	14000026	 b           |$LN8@inflate|
  000fc		 |$LN12@inflate|

; 661  :             }
; 662  :             NEEDBITS(16);

  000fc	7100427f	 cmp         w19,#0x10
  00100	54000002	 bhs         |$LN10@inflate|
  00104		 |$LL13@inflate|
  00104	34000014	 cbz         w20,|$LN985@inflate|
  00108	384016a8	 ldrb        w8,[x21],#1
  0010c	51000694	 sub         w20,w20,#1
  00110	1ad32108	 lsl         w8,w8,w19
  00114	11002273	 add         w19,w19,#8
  00118	7100427f	 cmp         w19,#0x10
  0011c	0b160116	 add         w22,w8,w22
  00120	54000003	 blo         |$LL13@inflate|
  00124		 |$LN10@inflate|

; 663  : #ifdef GUNZIP
; 664  :             if ((state->wrap & 2) && hold == 0x8b1f) {  /* gzip header */

  00124	3608000c	 tbz         x12,#1,|$LN338@inflate|
  00128	529163e8	 mov         w8,#0x8B1F
  0012c	6b0802df	 cmp         w22,w8
  00130	54000001	 bne         |$LN338@inflate|

; 665  :                 if (state->wbits == 0)

  00134	b9403328	 ldr         w8,[x25,#0x30]
  00138	35000008	 cbnz        w8,|$LN339@inflate|

; 666  :                     state->wbits = 15;

  0013c	b9003321	 str         w1,[x25,#0x30]
  00140		 |$LN339@inflate|

; 667  :                 state->check = crc32(0L, Z_NULL, 0);

  00140	52800002	 mov         w2,#0
  00144	d2800001	 mov         x1,#0
  00148	52800000	 mov         w0,#0
  0014c	94000000	 bl          crc32

; 668  :                 CRC2(state->check, hold);

  00150	528003e8	 mov         w8,#0x1F
  00154	390063e8	 strb        w8,[sp,#0x18]
  00158	52801168	 mov         w8,#0x8B
  0015c	52800042	 mov         w2,#2
  00160	390067e8	 strb        w8,[sp,#0x19]
  00164	910063e1	 add         x1,sp,#0x18
  00168	b9002320	 str         w0,[x25,#0x20]
  0016c	94000000	 bl          crc32

; 669  :                 INITBITS();
; 670  :                 state->mode = FLAGS;

  00170	5287e6a8	 mov         w8,#0x3F35
  00174	b9000b28	 str         w8,[x25,#8]
  00178	52800016	 mov         w22,#0
  0017c	b9002320	 str         w0,[x25,#0x20]
  00180	52800013	 mov         w19,#0
  00184		 |$LN989@inflate|

; 652  :     in = have;
; 653  :     out = left;
; 654  :     ret = Z_OK;
; 655  :     for (;;)
; 656  :         switch (state->mode) {

  00184	5287e7e5	 mov         w5,#0x3F3F
  00188		 |$LN990@inflate|
  00188	5287ea27	 mov         w7,#0x3F51
  0018c		 |$LN993@inflate|
  0018c	12800003	 mov         w3,#-1
  00190		 |$LN8@inflate|
  00190	b9400b2b	 ldr         w11,[x25,#8]
  00194	5287e688	 mov         w8,#0x3F34
  00198	4b08016a	 sub         w10,w11,w8
  0019c	7100795f	 cmp         w10,#0x1E
  001a0	54000008	 bhi         |$LN333@inflate|
  001a4	a943bbec	 ldp         x12,x14,[sp,#0x38]
  001a8	5287e806	 mov         w6,#0x3F40
  001ac	2944dfed	 ldp         w13,w23,[sp,#0x24]
  001b0	f9401bef	 ldr         x15,[sp,#0x30]
  001b4	17ffffc5	 b           |$LN994@inflate|
  001b8		 |$LN338@inflate|

; 671  :                 break;
; 672  :             }
; 673  :             state->flags = 0;           /* expect zlib header */
; 674  :             if (state->head != Z_NULL)

  001b8	f9401728	 ldr         x8,[x25,#0x28]
  001bc	b9001b3f	 str         wzr,[x25,#0x18]
  001c0	b4000008	 cbz         x8,|$LN340@inflate|

; 675  :                 state->head->done = -1;

  001c4	b9004103	 str         w3,[x8,#0x40]
  001c8	b940132c	 ldr         w12,[x25,#0x10]
  001cc		 |$LN340@inflate|

; 676  :             if (!(state->wrap & 1) ||   /* check if zlib header allowed */

  001cc	3600000c	 tbz         x12,#0,|$LN342@inflate|
  001d0	53181ec8	 ubfiz       w8,w22,#8,#8
  001d4	0b56210a	 add         w10,w8,w22,lsr #8
  001d8	528003eb	 mov         w11,#0x1F
  001dc	1acb0949	 udiv        w9,w10,w11
  001e0	1b0ba928	 msub        w8,w9,w11,w10
  001e4	35000008	 cbnz        w8,|$LN342@inflate|

; 684  :             }
; 685  :             if (BITS(4) != Z_DEFLATED) {

  001e8	12000ec8	 and         w8,w22,#0xF
  001ec	7100211f	 cmp         w8,#8
  001f0	54000000	 beq         |$LN26@inflate|

; 686  :                 strm->msg = (char *)"unknown compression method";

  001f4	f900134e	 str         x14,[x26,#0x20]

; 687  :                 state->mode = BAD;

  001f8	b9000b27	 str         w7,[x25,#8]

; 688  :                 break;

  001fc	17ffffe5	 b           |$LN8@inflate|
  00200		 |$LN26@inflate|

; 689  :             }
; 690  :             DROPBITS(4);

  00200	53047ed6	 lsr         w22,w22,#4

; 691  :             len = BITS(4) + 8;
; 692  :             if (state->wbits == 0)

  00204	b940332a	 ldr         w10,[x25,#0x30]
  00208	12000ec8	 and         w8,w22,#0xF
  0020c	11002109	 add         w9,w8,#8
  00210	51001273	 sub         w19,w19,#4
  00214	3500000a	 cbnz        w10,|$LN344@inflate|

; 693  :                 state->wbits = len;

  00218	b9003329	 str         w9,[x25,#0x30]
  0021c	2a0903ea	 mov         w10,w9
  00220		 |$LN344@inflate|

; 694  :             if (len > 15 || len > state->wbits) {

  00220	71003d3f	 cmp         w9,#0xF
  00224	7a4a912a	 ccmpls      w9,w10,#0xA
  00228	54000008	 bhi         |$LN346@inflate|

; 698  :             }
; 699  :             state->dmax = 1U << len;

  0022c	52800028	 mov         w8,#1
  00230	1ac92108	 lsl         w8,w8,w9

; 700  :             Tracev((stderr, "inflate:   zlib header ok\n"));
; 701  :             strm->adler = state->check = adler32(0L, Z_NULL, 0);

  00234	52800002	 mov         w2,#0
  00238	b9001f28	 str         w8,[x25,#0x1C]
  0023c	d2800001	 mov         x1,#0
  00240	52800000	 mov         w0,#0
  00244	94000000	 bl          adler32

; 702  :             state->mode = hold & 0x200 ? DICTID : TYPE;

  00248	2a7623e8	 mvn         w8,w22,lsr #8
  0024c	121f0109	 and         w9,w8,#2
  00250	b9002320	 str         w0,[x25,#0x20]
  00254	5287e7aa	 mov         w10,#0x3F3D
  00258	b9004f40	 str         w0,[x26,#0x4C]
  0025c	2a0a0129	 orr         w9,w9,w10
  00260	b9000b29	 str         w9,[x25,#8]

; 703  :             INITBITS();

  00264	52800016	 mov         w22,#0
  00268	52800013	 mov         w19,#0

; 704  :             break;

  0026c	17ffffc6	 b           |$LN989@inflate|
  00270		 |$LN346@inflate|

; 695  :                 strm->msg = (char *)"invalid window size";

  00270	90000008	 adrp        x8,|??_C@_0BE@EMOGCLGO@invalid?5window?5size@|
  00274	91000108	 add         x8,x8,PageOffset(|??_C@_0BE@EMOGCLGO@invalid?5window?5size@|)
  00278	f9001348	 str         x8,[x26,#0x20]

; 696  :                 state->mode = BAD;

  0027c	b9000b27	 str         w7,[x25,#8]

; 697  :                 break;

  00280	17ffffc4	 b           |$LN8@inflate|
  00284		 |$LN342@inflate|

; 677  : #else
; 678  :             if (
; 679  : #endif
; 680  :                 ((BITS(8) << 8) + (hold >> 8)) % 31) {
; 681  :                 strm->msg = (char *)"incorrect header check";

  00284	90000008	 adrp        x8,|??_C@_0BH@LIBMMIGA@incorrect?5header?5check@|
  00288	91000108	 add         x8,x8,PageOffset(|??_C@_0BH@LIBMMIGA@incorrect?5header?5check@|)
  0028c	f9001348	 str         x8,[x26,#0x20]

; 682  :                 state->mode = BAD;

  00290	b9000b27	 str         w7,[x25,#8]

; 683  :                 break;

  00294	17ffffbf	 b           |$LN8@inflate|
  00298		 |$LN32@inflate|

; 705  : #ifdef GUNZIP
; 706  :         case FLAGS:
; 707  :             NEEDBITS(16);

  00298	7100427f	 cmp         w19,#0x10
  0029c	54000002	 bhs         |$LN30@inflate|
  002a0		 |$LL33@inflate|
  002a0	34000014	 cbz         w20,|$LN985@inflate|
  002a4	394002a8	 ldrb        w8,[x21]
  002a8	51000694	 sub         w20,w20,#1
  002ac	910006b5	 add         x21,x21,#1
  002b0	1ad32108	 lsl         w8,w8,w19
  002b4	11002273	 add         w19,w19,#8
  002b8	7100427f	 cmp         w19,#0x10
  002bc	0b160116	 add         w22,w8,w22
  002c0	54000003	 blo         |$LL33@inflate|
  002c4		 |$LN30@inflate|

; 708  :             state->flags = (int)(hold);
; 709  :             if ((state->flags & 0xff) != Z_DEFLATED) {

  002c4	12001ec8	 and         w8,w22,#0xFF
  002c8	b9001b36	 str         w22,[x25,#0x18]
  002cc	7100211f	 cmp         w8,#8
  002d0	54000000	 beq         |$LN349@inflate|

; 710  :                 strm->msg = (char *)"unknown compression method";

  002d4	f900134e	 str         x14,[x26,#0x20]

; 711  :                 state->mode = BAD;

  002d8	b9000b27	 str         w7,[x25,#8]

; 712  :                 break;

  002dc	17ffffad	 b           |$LN8@inflate|
  002e0		 |$LN349@inflate|

; 713  :             }
; 714  :             if (state->flags & 0xe000) {

  002e0	72130adf	 tst         w22,#0xE000
  002e4	54000000	 beq         |$LN350@inflate|

; 715  :                 strm->msg = (char *)"unknown header flags set";

  002e8	90000008	 adrp        x8,|??_C@_0BJ@BLBBCOMO@unknown?5header?5flags?5set@|
  002ec	91000108	 add         x8,x8,PageOffset(|??_C@_0BJ@BLBBCOMO@unknown?5header?5flags?5set@|)
  002f0	f9001348	 str         x8,[x26,#0x20]

; 716  :                 state->mode = BAD;

  002f4	b9000b27	 str         w7,[x25,#8]

; 717  :                 break;

  002f8	17ffffa6	 b           |$LN8@inflate|
  002fc		 |$LN350@inflate|

; 718  :             }
; 719  :             if (state->head != Z_NULL)

  002fc	f9401729	 ldr         x9,[x25,#0x28]
  00300	2a1603e8	 mov         w8,w22
  00304	53087eca	 lsr         w10,w22,#8
  00308	b4000009	 cbz         x9,|$LN651@inflate|

; 720  :                 state->head->text = (int)((hold >> 8) & 1);

  0030c	12000148	 and         w8,w10,#1
  00310	b9000128	 str         w8,[x9]
  00314	b9401b28	 ldr         w8,[x25,#0x18]
  00318		 |$LN651@inflate|

; 721  :             if ((state->flags & 0x0200) && (state->wrap & 4))

  00318	36480008	 tbz         x8,#9,|$LN39@inflate|
  0031c	b9401328	 ldr         w8,[x25,#0x10]
  00320	36100008	 tbz         x8,#2,|$LN39@inflate|

; 722  :                 CRC2(state->check, hold);

  00324	b9402320	 ldr         w0,[x25,#0x20]
  00328	52800042	 mov         w2,#2
  0032c	390063f6	 strb        w22,[sp,#0x18]
  00330	910063e1	 add         x1,sp,#0x18
  00334	390067ea	 strb        w10,[sp,#0x19]
  00338	94000000	 bl          crc32
  0033c	b9002320	 str         w0,[x25,#0x20]
  00340		 |$LN39@inflate|

; 723  :             INITBITS();
; 724  :             state->mode = TIME;

  00340	5287e6c8	 mov         w8,#0x3F36
  00344	b9000b28	 str         w8,[x25,#8]
  00348	52800016	 mov         w22,#0
  0034c	52800013	 mov         w19,#0

; 725  :         case TIME:
; 726  :             NEEDBITS(32);

  00350	14000003	 b           |$LL47@inflate|
  00354		 |$LN46@inflate|
  00354	7100827f	 cmp         w19,#0x20
  00358	54000002	 bhs         |$LN44@inflate|
  0035c		 |$LL47@inflate|
  0035c	34000014	 cbz         w20,|$LN985@inflate|
  00360	394002a8	 ldrb        w8,[x21]
  00364	51000694	 sub         w20,w20,#1
  00368	910006b5	 add         x21,x21,#1
  0036c	1ad32108	 lsl         w8,w8,w19
  00370	11002273	 add         w19,w19,#8
  00374	7100827f	 cmp         w19,#0x20
  00378	0b160116	 add         w22,w8,w22
  0037c	54000003	 blo         |$LL47@inflate|
  00380		 |$LN44@inflate|

; 727  :             if (state->head != Z_NULL)

  00380	f9401728	 ldr         x8,[x25,#0x28]
  00384	b4000008	 cbz         x8,|$LN355@inflate|

; 728  :                 state->head->time = hold;

  00388	b9000516	 str         w22,[x8,#4]
  0038c		 |$LN355@inflate|

; 729  :             if ((state->flags & 0x0200) && (state->wrap & 4))

  0038c	b9401b28	 ldr         w8,[x25,#0x18]
  00390	36480008	 tbz         x8,#9,|$LN53@inflate|
  00394	b9401329	 ldr         w9,[x25,#0x10]
  00398	36100009	 tbz         x9,#2,|$LN53@inflate|

; 730  :                 CRC4(state->check, hold);

  0039c	53087ec8	 lsr         w8,w22,#8
  003a0	b9402320	 ldr         w0,[x25,#0x20]
  003a4	390063f6	 strb        w22,[sp,#0x18]
  003a8	390067e8	 strb        w8,[sp,#0x19]
  003ac	53107ec9	 lsr         w9,w22,#0x10
  003b0	53187ec8	 lsr         w8,w22,#0x18
  003b4	39006be9	 strb        w9,[sp,#0x1A]
  003b8	52800082	 mov         w2,#4
  003bc	39006fe8	 strb        w8,[sp,#0x1B]
  003c0	910063e1	 add         x1,sp,#0x18
  003c4	94000000	 bl          crc32
  003c8	b9002320	 str         w0,[x25,#0x20]
  003cc		 |$LN53@inflate|

; 731  :             INITBITS();
; 732  :             state->mode = OS;

  003cc	5287e6e8	 mov         w8,#0x3F37
  003d0	b9000b28	 str         w8,[x25,#8]
  003d4	52800016	 mov         w22,#0
  003d8	52800013	 mov         w19,#0

; 733  :         case OS:
; 734  :             NEEDBITS(16);

  003dc	14000003	 b           |$LL61@inflate|
  003e0		 |$LN60@inflate|
  003e0	7100427f	 cmp         w19,#0x10
  003e4	54000002	 bhs         |$LN58@inflate|
  003e8		 |$LL61@inflate|
  003e8	34000014	 cbz         w20,|$LN985@inflate|
  003ec	394002a8	 ldrb        w8,[x21]
  003f0	51000694	 sub         w20,w20,#1
  003f4	910006b5	 add         x21,x21,#1
  003f8	1ad32108	 lsl         w8,w8,w19
  003fc	11002273	 add         w19,w19,#8
  00400	7100427f	 cmp         w19,#0x10
  00404	0b160116	 add         w22,w8,w22
  00408	54000003	 blo         |$LL61@inflate|
  0040c		 |$LN58@inflate|

; 735  :             if (state->head != Z_NULL) {

  0040c	f9401729	 ldr         x9,[x25,#0x28]
  00410	53087eca	 lsr         w10,w22,#8
  00414	b4000009	 cbz         x9,|$LN652@inflate|

; 736  :                 state->head->xflags = (int)(hold & 0xff);

  00418	12001ec8	 and         w8,w22,#0xFF
  0041c	b9000928	 str         w8,[x9,#8]

; 737  :                 state->head->os = (int)(hold >> 8);

  00420	f9401729	 ldr         x9,[x25,#0x28]
  00424	b9000d2a	 str         w10,[x9,#0xC]
  00428		 |$LN652@inflate|

; 738  :             }
; 739  :             if ((state->flags & 0x0200) && (state->wrap & 4))

  00428	b9401b28	 ldr         w8,[x25,#0x18]
  0042c	36480008	 tbz         x8,#9,|$LN67@inflate|
  00430	b9401329	 ldr         w9,[x25,#0x10]
  00434	36100009	 tbz         x9,#2,|$LN67@inflate|

; 740  :                 CRC2(state->check, hold);

  00438	b9402320	 ldr         w0,[x25,#0x20]
  0043c	52800042	 mov         w2,#2
  00440	390063f6	 strb        w22,[sp,#0x18]
  00444	910063e1	 add         x1,sp,#0x18
  00448	390067ea	 strb        w10,[sp,#0x19]
  0044c	94000000	 bl          crc32
  00450	b9002320	 str         w0,[x25,#0x20]
  00454		 |$LN67@inflate|

; 741  :             INITBITS();
; 742  :             state->mode = EXLEN;

  00454	5287e708	 mov         w8,#0x3F38
  00458	b9000b28	 str         w8,[x25,#8]
  0045c	52800016	 mov         w22,#0
  00460	52800013	 mov         w19,#0
  00464		 |$LN361@inflate|

; 743  :         case EXLEN:
; 744  :             if (state->flags & 0x0400) {

  00464	b9401b28	 ldr         w8,[x25,#0x18]
  00468	36500008	 tbz         x8,#0xA,|$LN362@inflate|

; 745  :                 NEEDBITS(16);

  0046c	7100427f	 cmp         w19,#0x10
  00470	54000002	 bhs         |$LN72@inflate|
  00474		 |$LL75@inflate|
  00474	34000014	 cbz         w20,|$LN985@inflate|
  00478	394002a8	 ldrb        w8,[x21]
  0047c	51000694	 sub         w20,w20,#1
  00480	910006b5	 add         x21,x21,#1
  00484	1ad32108	 lsl         w8,w8,w19
  00488	11002273	 add         w19,w19,#8
  0048c	7100427f	 cmp         w19,#0x10
  00490	0b160116	 add         w22,w8,w22
  00494	54000003	 blo         |$LL75@inflate|
  00498		 |$LN72@inflate|

; 746  :                 state->length = (unsigned)(hold);
; 747  :                 if (state->head != Z_NULL)

  00498	f9401728	 ldr         x8,[x25,#0x28]
  0049c	b9005336	 str         w22,[x25,#0x50]
  004a0	b4000008	 cbz         x8,|$LN365@inflate|

; 748  :                     state->head->extra_len = (unsigned)hold;

  004a4	b9001916	 str         w22,[x8,#0x18]
  004a8		 |$LN365@inflate|

; 749  :                 if ((state->flags & 0x0200) && (state->wrap & 4))

  004a8	b9401b28	 ldr         w8,[x25,#0x18]
  004ac	36480008	 tbz         x8,#9,|$LN81@inflate|
  004b0	b9401329	 ldr         w9,[x25,#0x10]
  004b4	36100009	 tbz         x9,#2,|$LN81@inflate|

; 750  :                     CRC2(state->check, hold);

  004b8	b9402320	 ldr         w0,[x25,#0x20]
  004bc	53087ec8	 lsr         w8,w22,#8
  004c0	390063f6	 strb        w22,[sp,#0x18]
  004c4	52800042	 mov         w2,#2
  004c8	390067e8	 strb        w8,[sp,#0x19]
  004cc	910063e1	 add         x1,sp,#0x18
  004d0	94000000	 bl          crc32
  004d4	b9002320	 str         w0,[x25,#0x20]
  004d8		 |$LN81@inflate|

; 751  :                 INITBITS();

  004d8	52800016	 mov         w22,#0
  004dc	52800013	 mov         w19,#0

; 752  :             }

  004e0	14000004	 b           |$LN367@inflate|
  004e4		 |$LN362@inflate|

; 753  :             else if (state->head != Z_NULL)

  004e4	f9401728	 ldr         x8,[x25,#0x28]
  004e8	b4000008	 cbz         x8,|$LN367@inflate|

; 754  :                 state->head->extra = Z_NULL;

  004ec	f900091f	 str         xzr,[x8,#0x10]
  004f0		 |$LN367@inflate|

; 755  :             state->mode = EXTRA;

  004f0	5287e728	 mov         w8,#0x3F39
  004f4	b9000b28	 str         w8,[x25,#8]
  004f8		 |$LN368@inflate|

; 756  :         case EXTRA:
; 757  :             if (state->flags & 0x0400) {

  004f8	b9401b28	 ldr         w8,[x25,#0x18]
  004fc	36500008	 tbz         x8,#0xA,|$LN374@inflate|

; 758  :                 copy = state->length;

  00500	b9405329	 ldr         w9,[x25,#0x50]

; 759  :                 if (copy > have) copy = have;
; 760  :                 if (copy) {

  00504	6b14013f	 cmp         w9,w20
  00508	1a949137	 csells      w23,w9,w20
  0050c	34000017	 cbz         w23,|$LN371@inflate|

; 761  :                     if (state->head != Z_NULL &&

  00510	f940172a	 ldr         x10,[x25,#0x28]
  00514	2a0903f8	 mov         w24,w9
  00518	b400000a	 cbz         x10,|$LN372@inflate|
  0051c	f940094d	 ldr         x13,[x10,#0x10]
  00520	b400000d	 cbz         x13,|$LN372@inflate|

; 762  :                         state->head->extra != Z_NULL) {
; 763  :                         len = state->head->extra_len - state->length;

  00524	29432d48	 ldp         w8,w11,[x10,#0x18]

; 764  :                         zmemcpy(state->head->extra + len, next,

  00528	aa1503e1	 mov         x1,x21
  0052c	4b09010c	 sub         w12,w8,w9
  00530	0b0c02e9	 add         w9,w23,w12
  00534	8b2c41a0	 add         x0,x13,w12,uxtw #0
  00538	6b0b013f	 cmp         w9,w11
  0053c	4b0c016a	 sub         w10,w11,w12
  00540	1a8a92e2	 csells      w2,w23,w10
  00544	94000000	 bl          memcpy
  00548	b9401b28	 ldr         w8,[x25,#0x18]
  0054c	b9405338	 ldr         w24,[x25,#0x50]
  00550		 |$LN372@inflate|

; 765  :                                 len + copy > state->head->extra_max ?
; 766  :                                 state->head->extra_max - len : copy);
; 767  :                     }
; 768  :                     if ((state->flags & 0x0200) && (state->wrap & 4))

  00550	36480008	 tbz         x8,#9,|$LN373@inflate|
  00554	b9401328	 ldr         w8,[x25,#0x10]
  00558	36100008	 tbz         x8,#2,|$LN373@inflate|

; 769  :                         state->check = crc32(state->check, next, copy);

  0055c	b9402320	 ldr         w0,[x25,#0x20]
  00560	2a1703e2	 mov         w2,w23
  00564	aa1503e1	 mov         x1,x21
  00568	94000000	 bl          crc32
  0056c	b9002320	 str         w0,[x25,#0x20]
  00570		 |$LN373@inflate|

; 770  :                     have -= copy;
; 771  :                     next += copy;
; 772  :                     state->length -= copy;

  00570	4b170309	 sub         w9,w24,w23
  00574	8b3742b5	 add         x21,x21,w23,uxtw #0
  00578	b9005329	 str         w9,[x25,#0x50]
  0057c	4b170294	 sub         w20,w20,w23
  00580		 |$LN371@inflate|

; 773  :                 }
; 774  :                 if (state->length) goto inf_leave;

  00580	35000009	 cbnz        w9,|$LN985@inflate|
  00584		 |$LN374@inflate|

; 775  :             }
; 776  :             state->length = 0;
; 777  :             state->mode = NAME;

  00584	5287e748	 mov         w8,#0x3F3A
  00588	b900533f	 str         wzr,[x25,#0x50]
  0058c	b9000b28	 str         w8,[x25,#8]
  00590		 |$LN375@inflate|

; 778  :         case NAME:
; 779  :             if (state->flags & 0x0800) {

  00590	b9401b28	 ldr         w8,[x25,#0x18]
  00594	36580008	 tbz         x8,#0xB,|$LN376@inflate|

; 780  :                 if (have == 0) goto inf_leave;

  00598	34000014	 cbz         w20,|$LN985@inflate|

; 781  :                 copy = 0;

  0059c	52800017	 mov         w23,#0
  005a0		 |$LL88@inflate|

; 782  :                 do {
; 783  :                     len = (unsigned)(next[copy++]);

  005a0	38774ab8	 ldrb        w24,[x21,w23 uxtw #0]
  005a4	110006f7	 add         w23,w23,#1

; 784  :                     if (state->head != Z_NULL &&
; 785  :                             state->head->name != Z_NULL &&

  005a8	f9401728	 ldr         x8,[x25,#0x28]
  005ac	b4000008	 cbz         x8,|$LN86@inflate|
  005b0	f940110a	 ldr         x10,[x8,#0x20]
  005b4	b400000a	 cbz         x10,|$LN86@inflate|
  005b8	b9405329	 ldr         w9,[x25,#0x50]
  005bc	b9402908	 ldr         w8,[x8,#0x28]
  005c0	6b08013f	 cmp         w9,w8
  005c4	54000002	 bhs         |$LN86@inflate|

; 786  :                             state->length < state->head->name_max)
; 787  :                         state->head->name[state->length++] = (Bytef)len;

  005c8	38294958	 strb        w24,[x10,w9 uxtw #0]
  005cc	b9405328	 ldr         w8,[x25,#0x50]
  005d0	11000509	 add         w9,w8,#1
  005d4	b9005329	 str         w9,[x25,#0x50]
  005d8		 |$LN86@inflate|

; 788  :                 } while (len && copy < have);

  005d8	7100031f	 cmp         w24,#0
  005dc	7a5412ee	 ccmpne      w23,w20,#0xE
  005e0	54000003	 blo         |$LL88@inflate|

; 789  :                 if ((state->flags & 0x0200) && (state->wrap & 4))

  005e4	b9401b28	 ldr         w8,[x25,#0x18]
  005e8	36480008	 tbz         x8,#9,|$LN381@inflate|
  005ec	b9401329	 ldr         w9,[x25,#0x10]
  005f0	36100009	 tbz         x9,#2,|$LN381@inflate|

; 790  :                     state->check = crc32(state->check, next, copy);

  005f4	b9402320	 ldr         w0,[x25,#0x20]
  005f8	2a1703e2	 mov         w2,w23
  005fc	aa1503e1	 mov         x1,x21
  00600	94000000	 bl          crc32
  00604	b9002320	 str         w0,[x25,#0x20]
  00608		 |$LN381@inflate|

; 791  :                 have -= copy;

  00608	4b170294	 sub         w20,w20,w23

; 792  :                 next += copy;

  0060c	8b3742b5	 add         x21,x21,w23,uxtw #0

; 793  :                 if (len) goto inf_leave;

  00610	34000018	 cbz         w24,|$LN383@inflate|
  00614		 |$LN985@inflate|

; 1239 :             goto inf_leave;
; 1240 :         case MEM:
; 1241 :             return Z_MEM_ERROR;
; 1242 :         case SYNC:
; 1243 :         default:
; 1244 :             return Z_STREAM_ERROR;
; 1245 :         }
; 1246 : 
; 1247 :     /*
; 1248 :        Return from inflate(), updating the total counts and the check value.
; 1249 :        If there was no progress during the inflate() call, return a buffer
; 1250 :        error.  Call updatewindow() to create and/or update the window state.
; 1251 :        Note: a memory error from inflate() is non-recoverable.
; 1252 :      */
; 1253 :   inf_leave:
; 1254 :     RESTORE();

  00614	b94013f7	 ldr         w23,[sp,#0x10]
  00618		 |$inf_leave$1037|
  00618	b94023e8	 ldr         w8,[sp,#0x20]
  0061c	f9000355	 str         x21,[x26]
  00620	f9000b5b	 str         x27,[x26,#0x10]

; 1255 :     if (state->wsize || (out != strm->avail_out && state->mode < BAD &&

  00624	b9402bf5	 ldr         w21,[sp,#0x28]
  00628	b9000b54	 str         w20,[x26,#8]
  0062c	b9001b48	 str         w8,[x26,#0x18]
  00630	b9403728	 ldr         w8,[x25,#0x34]
  00634	29094f36	 stp         w22,w19,[x25,#0x48]
  00638	b94027f3	 ldr         w19,[sp,#0x24]
  0063c	35000008	 cbnz        w8,|$LN502@inflate|
  00640	b9401b48	 ldr         w8,[x26,#0x18]
  00644	6b08027f	 cmp         w19,w8
  00648	54000000	 beq         |$LN503@inflate|
  0064c	b9400b28	 ldr         w8,[x25,#8]
  00650	5287ea29	 mov         w9,#0x3F51
  00654	6b09011f	 cmp         w8,w9
  00658	5400000a	 bge         |$LN503@inflate|
  0065c	5287e9c9	 mov         w9,#0x3F4E
  00660	6b09011f	 cmp         w8,w9
  00664	7a44aaa0	 ccmpge      w21,#4,#0
  00668	54000000	 beq         |$LN503@inflate|
  0066c		 |$LN502@inflate|

; 1256 :             (state->mode < CHECK || flush != Z_FINISH)))
; 1257 :         if (updatewindow(strm, strm->next_out, out - strm->avail_out)) {

  0066c	b9401b48	 ldr         w8,[x26,#0x18]
  00670	aa1a03e0	 mov         x0,x26
  00674	f9400b41	 ldr         x1,[x26,#0x10]
  00678	4b080262	 sub         w2,w19,w8
  0067c	94000000	 bl          updatewindow
  00680	34000000	 cbz         w0,|$LN503@inflate|

; 1258 :             state->mode = MEM;

  00684	5287ea48	 mov         w8,#0x3F52
  00688	b9000b28	 str         w8,[x25,#8]
  0068c		 |$LN498@inflate|

; 1275 : }

  0068c	12800060	 mov         w0,#-4
  00690	140003fe	 b           |$LN1@inflate|
  00694		 |$LN376@inflate|

; 794  :             }
; 795  :             else if (state->head != Z_NULL)

  00694	f9401728	 ldr         x8,[x25,#0x28]
  00698	b4000008	 cbz         x8,|$LN383@inflate|

; 796  :                 state->head->name = Z_NULL;

  0069c	f900111f	 str         xzr,[x8,#0x20]
  006a0		 |$LN383@inflate|

; 797  :             state->length = 0;
; 798  :             state->mode = COMMENT;

  006a0	5287e768	 mov         w8,#0x3F3B
  006a4	b900533f	 str         wzr,[x25,#0x50]
  006a8	b9000b28	 str         w8,[x25,#8]
  006ac		 |$LN384@inflate|

; 799  :         case COMMENT:
; 800  :             if (state->flags & 0x1000) {

  006ac	b9401b28	 ldr         w8,[x25,#0x18]
  006b0	36600008	 tbz         x8,#0xC,|$LN385@inflate|

; 801  :                 if (have == 0) goto inf_leave;

  006b4	34000014	 cbz         w20,|$LN985@inflate|

; 802  :                 copy = 0;

  006b8	52800017	 mov         w23,#0
  006bc		 |$LL91@inflate|

; 803  :                 do {
; 804  :                     len = (unsigned)(next[copy++]);

  006bc	38774ab8	 ldrb        w24,[x21,w23 uxtw #0]
  006c0	110006f7	 add         w23,w23,#1

; 805  :                     if (state->head != Z_NULL &&
; 806  :                             state->head->comment != Z_NULL &&

  006c4	f9401728	 ldr         x8,[x25,#0x28]
  006c8	b4000008	 cbz         x8,|$LN89@inflate|
  006cc	f940190a	 ldr         x10,[x8,#0x30]
  006d0	b400000a	 cbz         x10,|$LN89@inflate|
  006d4	b9405329	 ldr         w9,[x25,#0x50]
  006d8	b9403908	 ldr         w8,[x8,#0x38]
  006dc	6b08013f	 cmp         w9,w8
  006e0	54000002	 bhs         |$LN89@inflate|

; 807  :                             state->length < state->head->comm_max)
; 808  :                         state->head->comment[state->length++] = (Bytef)len;

  006e4	38294958	 strb        w24,[x10,w9 uxtw #0]
  006e8	b9405328	 ldr         w8,[x25,#0x50]
  006ec	11000509	 add         w9,w8,#1
  006f0	b9005329	 str         w9,[x25,#0x50]
  006f4		 |$LN89@inflate|

; 809  :                 } while (len && copy < have);

  006f4	7100031f	 cmp         w24,#0
  006f8	7a5412ee	 ccmpne      w23,w20,#0xE
  006fc	54000003	 blo         |$LL91@inflate|

; 810  :                 if ((state->flags & 0x0200) && (state->wrap & 4))

  00700	b9401b28	 ldr         w8,[x25,#0x18]
  00704	36480008	 tbz         x8,#9,|$LN390@inflate|
  00708	b9401329	 ldr         w9,[x25,#0x10]
  0070c	36100009	 tbz         x9,#2,|$LN390@inflate|

; 811  :                     state->check = crc32(state->check, next, copy);

  00710	b9402320	 ldr         w0,[x25,#0x20]
  00714	2a1703e2	 mov         w2,w23
  00718	aa1503e1	 mov         x1,x21
  0071c	94000000	 bl          crc32
  00720	b9002320	 str         w0,[x25,#0x20]
  00724		 |$LN390@inflate|

; 812  :                 have -= copy;

  00724	4b170294	 sub         w20,w20,w23

; 813  :                 next += copy;

  00728	8b3742b5	 add         x21,x21,w23,uxtw #0

; 814  :                 if (len) goto inf_leave;

  0072c	35000018	 cbnz        w24,|$LN985@inflate|

; 815  :             }

  00730	14000004	 b           |$LN392@inflate|
  00734		 |$LN385@inflate|

; 816  :             else if (state->head != Z_NULL)

  00734	f9401728	 ldr         x8,[x25,#0x28]
  00738	b4000008	 cbz         x8,|$LN392@inflate|

; 817  :                 state->head->comment = Z_NULL;

  0073c	f900191f	 str         xzr,[x8,#0x30]
  00740		 |$LN392@inflate|

; 818  :             state->mode = HCRC;

  00740	5287e788	 mov         w8,#0x3F3C
  00744	b94023f8	 ldr         w24,[sp,#0x20]
  00748	b9000b28	 str         w8,[x25,#8]
  0074c	5287ea27	 mov         w7,#0x3F51
  00750	5287e7e5	 mov         w5,#0x3F3F
  00754	12800003	 mov         w3,#-1
  00758		 |$LN393@inflate|

; 819  :         case HCRC:
; 820  :             if (state->flags & 0x0200) {

  00758	b9401b2a	 ldr         w10,[x25,#0x18]
  0075c	3648000a	 tbz         x10,#9,|$LN101@inflate|

; 821  :                 NEEDBITS(16);

  00760	7100427f	 cmp         w19,#0x10
  00764	54000002	 bhs         |$LN92@inflate|
  00768		 |$LL95@inflate|
  00768	34000014	 cbz         w20,|$LN985@inflate|
  0076c	384016a8	 ldrb        w8,[x21],#1
  00770	51000694	 sub         w20,w20,#1
  00774	1ad32108	 lsl         w8,w8,w19
  00778	11002273	 add         w19,w19,#8
  0077c	7100427f	 cmp         w19,#0x10
  00780	0b160116	 add         w22,w8,w22
  00784	54000003	 blo         |$LL95@inflate|
  00788		 |$LN92@inflate|

; 822  :                 if ((state->wrap & 4) && hold != (state->check & 0xffff)) {

  00788	b9401328	 ldr         w8,[x25,#0x10]
  0078c	36100008	 tbz         x8,#2,|$LN102@inflate|
  00790	79404329	 ldrh        w9,[x25,#0x20]
  00794	6b0902df	 cmp         w22,w9
  00798	54000000	 beq         |$LN102@inflate|

; 823  :                     strm->msg = (char *)"header crc mismatch";

  0079c	90000008	 adrp        x8,|??_C@_0BE@GONKLEPM@header?5crc?5mismatch@|
  007a0	91000108	 add         x8,x8,PageOffset(|??_C@_0BE@GONKLEPM@header?5crc?5mismatch@|)
  007a4	f9001348	 str         x8,[x26,#0x20]

; 824  :                     state->mode = BAD;

  007a8	b9000b27	 str         w7,[x25,#8]

; 825  :                     break;

  007ac	17fffe79	 b           |$LN8@inflate|
  007b0		 |$LN102@inflate|

; 826  :                 }
; 827  :                 INITBITS();

  007b0	52800016	 mov         w22,#0
  007b4	52800013	 mov         w19,#0
  007b8		 |$LN101@inflate|

; 828  :             }
; 829  :             if (state->head != Z_NULL) {

  007b8	f9401729	 ldr         x9,[x25,#0x28]
  007bc	b4000009	 cbz         x9,|$LN397@inflate|

; 830  :                 state->head->hcrc = (int)((state->flags >> 9) & 1);

  007c0	53092548	 ubfx        w8,w10,#9,#1
  007c4	b9003d28	 str         w8,[x9,#0x3C]

; 831  :                 state->head->done = 1;

  007c8	f9401729	 ldr         x9,[x25,#0x28]
  007cc	52800028	 mov         w8,#1
  007d0	b9004128	 str         w8,[x9,#0x40]
  007d4		 |$LN397@inflate|

; 832  :             }
; 833  :             strm->adler = state->check = crc32(0L, Z_NULL, 0);

  007d4	52800002	 mov         w2,#0
  007d8	d2800001	 mov         x1,#0
  007dc	52800000	 mov         w0,#0
  007e0	94000000	 bl          crc32

; 834  :             state->mode = TYPE;

  007e4	5287e7e5	 mov         w5,#0x3F3F
  007e8	b9002320	 str         w0,[x25,#0x20]
  007ec	b9004f40	 str         w0,[x26,#0x4C]
  007f0	b9000b25	 str         w5,[x25,#8]

; 835  :             break;

  007f4	17fffe65	 b           |$LN990@inflate|
  007f8		 |$LN105@inflate|

; 836  : #endif
; 837  :         case DICTID:
; 838  :             NEEDBITS(32);

  007f8	7100827f	 cmp         w19,#0x20
  007fc	54000002	 bhs         |$LN103@inflate|
  00800		 |$LL106@inflate|
  00800	34000014	 cbz         w20,|$LN985@inflate|
  00804	394002a8	 ldrb        w8,[x21]
  00808	51000694	 sub         w20,w20,#1
  0080c	910006b5	 add         x21,x21,#1
  00810	1ad32108	 lsl         w8,w8,w19
  00814	11002273	 add         w19,w19,#8
  00818	7100827f	 cmp         w19,#0x20
  0081c	0b160116	 add         w22,w8,w22
  00820	54000003	 blo         |$LL106@inflate|
  00824		 |$LN103@inflate|

; 839  :             strm->adler = state->check = ZSWAP32(hold);

  00824	12181ec8	 and         w8,w22,#0xFF00
  00828	53087ec9	 lsr         w9,w22,#8
  0082c	0b16410b	 add         w11,w8,w22,lsl #0x10
  00830	12181d2a	 and         w10,w9,#0xFF00
  00834	0b0b2148	 add         w8,w10,w11,lsl #8

; 840  :             INITBITS();

  00838	52800013	 mov         w19,#0
  0083c	0b566109	 add         w9,w8,w22,lsr #0x18

; 841  :             state->mode = DICT;

  00840	5287e7c8	 mov         w8,#0x3F3E
  00844	52800016	 mov         w22,#0
  00848	b9002329	 str         w9,[x25,#0x20]
  0084c	b9004f49	 str         w9,[x26,#0x4C]
  00850	b9000b28	 str         w8,[x25,#8]
  00854		 |$LN400@inflate|

; 842  :         case DICT:
; 843  :             if (state->havedict == 0) {

  00854	b9401728	 ldr         w8,[x25,#0x14]
  00858	34000008	 cbz         w8,|$LN584@inflate|

; 846  :             }
; 847  :             strm->adler = state->check = adler32(0L, Z_NULL, 0);

  0085c	52800002	 mov         w2,#0
  00860	d2800001	 mov         x1,#0
  00864	52800000	 mov         w0,#0
  00868	94000000	 bl          adler32

; 848  :             state->mode = TYPE;

  0086c	5287e7e5	 mov         w5,#0x3F3F
  00870	b9002320	 str         w0,[x25,#0x20]
  00874	5287ea27	 mov         w7,#0x3F51
  00878	b9004f40	 str         w0,[x26,#0x4C]
  0087c	12800003	 mov         w3,#-1
  00880	b9000b25	 str         w5,[x25,#8]
  00884	5287e820	 mov         w0,#0x3F41
  00888	5287e8e2	 mov         w2,#0x3F47
  0088c		 |$LN402@inflate|

; 849  :         case TYPE:
; 850  :             if (flush == Z_BLOCK || flush == Z_TREES) goto inf_leave;

  0088c	510016e8	 sub         w8,w23,#5
  00890	7100051f	 cmp         w8,#1
  00894	54000009	 bls         |$LN985@inflate|
  00898		 |$LN403@inflate|

; 851  :         case TYPEDO:
; 852  :             if (state->last) {

  00898	b9400f28	 ldr         w8,[x25,#0xC]
  0089c	34000008	 cbz         w8,|$LN122@inflate|

; 853  :                 BYTEBITS();

  008a0	12000a68	 and         w8,w19,#7
  008a4	1ac826d6	 lsr         w22,w22,w8
  008a8	4b080273	 sub         w19,w19,w8

; 854  :                 state->mode = CHECK;

  008ac	5287e9c8	 mov         w8,#0x3F4E
  008b0	b9000b28	 str         w8,[x25,#8]

; 855  :                 break;

  008b4	17fffe37	 b           |$LN8@inflate|
  008b8		 |$LN122@inflate|

; 856  :             }
; 857  :             NEEDBITS(3);

  008b8	71000e7f	 cmp         w19,#3
  008bc	54000002	 bhs         |$LN120@inflate|
  008c0		 |$LL123@inflate|
  008c0	34000014	 cbz         w20,|$LN985@inflate|
  008c4	394002a8	 ldrb        w8,[x21]
  008c8	51000694	 sub         w20,w20,#1
  008cc	910006b5	 add         x21,x21,#1
  008d0	1ad32108	 lsl         w8,w8,w19
  008d4	11002273	 add         w19,w19,#8
  008d8	71000e7f	 cmp         w19,#3
  008dc	0b160116	 add         w22,w8,w22
  008e0	54000003	 blo         |$LL123@inflate|
  008e4		 |$LN120@inflate|

; 858  :             state->last = BITS(1);
; 859  :             DROPBITS(1);

  008e4	53017eca	 lsr         w10,w22,#1

; 860  :             switch (BITS(2)) {

  008e8	1200054b	 and         w11,w10,#3
  008ec	120002c8	 and         w8,w22,#1
  008f0	71000d7f	 cmp         w11,#3
  008f4	b9000f28	 str         w8,[x25,#0xC]
  008f8	54000008	 bhi         |$LN138@inflate|
  008fc	10007129	 adr         x9,__swt
  00900	b8ab5928	 ldrsw       x8,[x9,w11 uxtw #2]
  00904	100001e9	 adr         x9,|$LN1031@inflate|
  00908	8b080928	 add         x8,x9,x8,lsl #2
  0090c	d61f0100	 br          x8
  00910		 |$LN408@inflate|

; 861  :             case 0:                             /* stored block */
; 862  :                 Tracev((stderr, "inflate:     stored block%s\n",
; 863  :                         state->last ? " (last)" : ""));
; 864  :                 state->mode = STORED;

  00910	b9000b20	 str         w0,[x25,#8]

; 884  :             }
; 885  :             DROPBITS(2);

  00914	53027d56	 lsr         w22,w10,#2
  00918	51000e73	 sub         w19,w19,#3

; 886  :             break;

  0091c	17fffe1d	 b           |$LN8@inflate|
  00920		 |$LN409@inflate|

; 865  :                 break;
; 866  :             case 1:                             /* fixed block */
; 867  :                 fixedtables(state);

  00920	aa1903e0	 mov         x0,x25
  00924	94000000	 bl          fixedtables

; 868  :                 Tracev((stderr, "inflate:     fixed codes block%s\n",
; 869  :                         state->last ? " (last)" : ""));
; 870  :                 state->mode = LEN_;             /* decode codes */

  00928	b9000b22	 str         w2,[x25,#8]

; 871  :                 if (flush == Z_TREES) {

  0092c	71001aff	 cmp         w23,#6
  00930	54000001	 bne         |$LN138@inflate|

; 872  :                     DROPBITS(2);

  00934	53027d56	 lsr         w22,w10,#2
  00938	51000e73	 sub         w19,w19,#3

; 873  :                     goto inf_leave;

  0093c	17ffff36	 b           |$LN985@inflate|
  00940		 |$LN411@inflate|
  00940		 |$LN1031@inflate|

; 874  :                 }
; 875  :                 break;
; 876  :             case 2:                             /* dynamic block */
; 877  :                 Tracev((stderr, "inflate:     dynamic codes block%s\n",
; 878  :                         state->last ? " (last)" : ""));
; 879  :                 state->mode = TABLE;

  00940	5287e888	 mov         w8,#0x3F44
  00944	b9000b28	 str         w8,[x25,#8]

; 884  :             }
; 885  :             DROPBITS(2);

  00948	53027d56	 lsr         w22,w10,#2
  0094c	51000e73	 sub         w19,w19,#3

; 886  :             break;

  00950	17fffe10	 b           |$LN8@inflate|
  00954		 |$LN412@inflate|

; 880  :                 break;
; 881  :             case 3:
; 882  :                 strm->msg = (char *)"invalid block type";

  00954	90000008	 adrp        x8,|??_C@_0BD@PJCBIDD@invalid?5block?5type@|
  00958	91000108	 add         x8,x8,PageOffset(|??_C@_0BD@PJCBIDD@invalid?5block?5type@|)
  0095c	f9001348	 str         x8,[x26,#0x20]

; 883  :                 state->mode = BAD;

  00960	b9000b27	 str         w7,[x25,#8]
  00964		 |$LN138@inflate|

; 884  :             }
; 885  :             DROPBITS(2);

  00964	53027d56	 lsr         w22,w10,#2
  00968	51000e73	 sub         w19,w19,#3

; 886  :             break;

  0096c	17fffe09	 b           |$LN8@inflate|
  00970		 |$LN141@inflate|

; 887  :         case STORED:
; 888  :             BYTEBITS();                         /* go to byte boundary */

  00970	12000a68	 and         w8,w19,#7
  00974	4b080273	 sub         w19,w19,w8

; 889  :             NEEDBITS(32);

  00978	7100827f	 cmp         w19,#0x20
  0097c	1ac826d6	 lsr         w22,w22,w8
  00980	54000002	 bhs         |$LN142@inflate|
  00984		 |$LL145@inflate|
  00984	34000014	 cbz         w20,|$LN985@inflate|
  00988	394002a8	 ldrb        w8,[x21]
  0098c	51000694	 sub         w20,w20,#1
  00990	910006b5	 add         x21,x21,#1
  00994	1ad32108	 lsl         w8,w8,w19
  00998	11002273	 add         w19,w19,#8
  0099c	7100827f	 cmp         w19,#0x20
  009a0	0b160116	 add         w22,w8,w22
  009a4	54000003	 blo         |$LL145@inflate|
  009a8		 |$LN142@inflate|

; 890  :             if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {

  009a8	12003ec9	 and         w9,w22,#0xFFFF
  009ac	2a3603e8	 mvn         w8,w22
  009b0	6b48413f	 cmp         w9,w8,lsr #0x10
  009b4	54000000	 beq         |$LN415@inflate|

; 891  :                 strm->msg = (char *)"invalid stored block lengths";

  009b8	90000008	 adrp        x8,|??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@|
  009bc	91000108	 add         x8,x8,PageOffset(|??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@|)
  009c0	f9001348	 str         x8,[x26,#0x20]

; 892  :                 state->mode = BAD;

  009c4	b9000b27	 str         w7,[x25,#8]

; 893  :                 break;

  009c8	17fffdf2	 b           |$LN8@inflate|
  009cc		 |$LN415@inflate|

; 894  :             }
; 895  :             state->length = (unsigned)hold & 0xffff;
; 896  :             Tracev((stderr, "inflate:       stored length %u\n",
; 897  :                     state->length));
; 898  :             INITBITS();
; 899  :             state->mode = COPY_;

  009cc	5287e848	 mov         w8,#0x3F42
  009d0	b9005329	 str         w9,[x25,#0x50]
  009d4	b9000b28	 str         w8,[x25,#8]
  009d8	52800016	 mov         w22,#0
  009dc	52800013	 mov         w19,#0

; 900  :             if (flush == Z_TREES) goto inf_leave;

  009e0	71001aff	 cmp         w23,#6
  009e4	54000000	 beq         |$LN985@inflate|
  009e8		 |$LN416@inflate|

; 901  :         case COPY_:
; 902  :             state->mode = COPY;

  009e8	5287e868	 mov         w8,#0x3F43
  009ec	b9000b28	 str         w8,[x25,#8]
  009f0		 |$LN418@inflate|
  009f0		 |$LN998@inflate|

; 903  :         case COPY:
; 904  :             copy = state->length;

  009f0	b9405328	 ldr         w8,[x25,#0x50]

; 905  :             if (copy) {

  009f4	34000008	 cbz         w8,|$LN419@inflate|

; 906  :                 if (copy > have) copy = have;
; 907  :                 if (copy > left) copy = left;

  009f8	6b14011f	 cmp         w8,w20
  009fc	1a949108	 csells      w8,w8,w20

; 908  :                 if (copy == 0) goto inf_leave;

  00a00	6b18011f	 cmp         w8,w24
  00a04	1a989117	 csells      w23,w8,w24
  00a08	34000017	 cbz         w23,|$LN985@inflate|

; 909  :                 zmemcpy(put, next, copy);

  00a0c	aa1703e2	 mov         x2,x23
  00a10	aa1503e1	 mov         x1,x21
  00a14	aa1b03e0	 mov         x0,x27
  00a18	94000000	 bl          memcpy

; 910  :                 have -= copy;
; 911  :                 next += copy;
; 912  :                 left -= copy;
; 913  :                 put += copy;
; 914  :                 state->length -= copy;

  00a1c	b9405328	 ldr         w8,[x25,#0x50]
  00a20	4b170318	 sub         w24,w24,w23
  00a24	4b170294	 sub         w20,w20,w23
  00a28	8b3742b5	 add         x21,x21,w23,uxtw #0
  00a2c	b90023f8	 str         w24,[sp,#0x20]
  00a30	8b37437b	 add         x27,x27,w23,uxtw #0
  00a34	4b170109	 sub         w9,w8,w23
  00a38	b9005329	 str         w9,[x25,#0x50]

; 915  :                 break;

  00a3c	17fffdd2	 b           |$LN989@inflate|
  00a40		 |$LN155@inflate|

; 916  :             }
; 917  :             Tracev((stderr, "inflate:       stored end\n"));
; 918  :             state->mode = TYPE;
; 919  :             break;
; 920  :         case TABLE:
; 921  :             NEEDBITS(14);

  00a40	71003a7f	 cmp         w19,#0xE
  00a44	54000002	 bhs         |$LN153@inflate|
  00a48		 |$LL156@inflate|
  00a48	34000014	 cbz         w20,|$LN985@inflate|
  00a4c	394002a8	 ldrb        w8,[x21]
  00a50	51000694	 sub         w20,w20,#1
  00a54	910006b5	 add         x21,x21,#1
  00a58	1ad32108	 lsl         w8,w8,w19
  00a5c	11002273	 add         w19,w19,#8
  00a60	71003a7f	 cmp         w19,#0xE
  00a64	0b160116	 add         w22,w8,w22
  00a68	54000003	 blo         |$LL156@inflate|
  00a6c		 |$LN153@inflate|

; 922  :             state->nlen = BITS(5) + 257;

  00a6c	120012c8	 and         w8,w22,#0x1F
  00a70	1104050b	 add         w11,w8,#0x101

; 923  :             DROPBITS(5);
; 924  :             state->ndist = BITS(5) + 1;

  00a74	530526c8	 ubfx        w8,w22,#5,#5
  00a78	b9007f2b	 str         w11,[x25,#0x7C]

; 925  :             DROPBITS(5);

  00a7c	53057ec9	 lsr         w9,w22,#5
  00a80	1100050a	 add         w10,w8,#1

; 926  :             state->ncode = BITS(4) + 4;

  00a84	53052128	 ubfx        w8,w9,#5,#4
  00a88	b900832a	 str         w10,[x25,#0x80]
  00a8c	11001108	 add         w8,w8,#4

; 927  :             DROPBITS(4);

  00a90	53057d29	 lsr         w9,w9,#5
  00a94	b9007b28	 str         w8,[x25,#0x78]

; 928  : #ifndef PKZIP_BUG_WORKAROUND
; 929  :             if (state->nlen > 286 || state->ndist > 30) {

  00a98	7104797f	 cmp         w11,#0x11E
  00a9c	53047d36	 lsr         w22,w9,#4
  00aa0	51003a73	 sub         w19,w19,#0xE
  00aa4	7a5e994a	 ccmpls      w10,#0x1E,#0xA
  00aa8	54000008	 bhi         |$LN426@inflate|

; 933  :             }
; 934  : #endif
; 935  :             Tracev((stderr, "inflate:       table sizes ok\n"));
; 936  :             state->have = 0;
; 937  :             state->mode = LENLENS;

  00aac	5287e8a8	 mov         w8,#0x3F45
  00ab0	b900873f	 str         wzr,[x25,#0x84]
  00ab4	b9000b28	 str         w8,[x25,#8]
  00ab8		 |$LN530@inflate|

; 938  :         case LENLENS:
; 939  :             while (state->have < state->ncode) {

  00ab8	b9408729	 ldr         w9,[x25,#0x84]
  00abc	b9407b28	 ldr         w8,[x25,#0x78]
  00ac0	6b08013f	 cmp         w9,w8
  00ac4	54000002	 bhs         |$LN532@inflate|
  00ac8		 |$LL170@inflate|

; 940  :                 NEEDBITS(3);

  00ac8	71000e7f	 cmp         w19,#3
  00acc	54000002	 bhs         |$LN172@inflate|
  00ad0		 |$LL175@inflate|
  00ad0	34000014	 cbz         w20,|$LN985@inflate|
  00ad4	394002a8	 ldrb        w8,[x21]
  00ad8	51000694	 sub         w20,w20,#1
  00adc	910006b5	 add         x21,x21,#1
  00ae0	1ad32108	 lsl         w8,w8,w19
  00ae4	11002273	 add         w19,w19,#8
  00ae8	71000e7f	 cmp         w19,#3
  00aec	0b160116	 add         w22,w8,w22
  00af0	54000003	 blo         |$LL175@inflate|
  00af4		 |$LN172@inflate|

; 941  :                 state->lens[order[state->have++]] = (unsigned short)BITS(3);

  00af4	b9408728	 ldr         w8,[x25,#0x84]
  00af8	12000aca	 and         w10,w22,#7

; 942  :                 DROPBITS(3);

  00afc	53037ed6	 lsr         w22,w22,#3
  00b00	51000e73	 sub         w19,w19,#3
  00b04	78685989	 ldrh        w9,[x12,w8 uxtw #1]
  00b08	91012129	 add         x9,x9,#0x48
  00b0c	78297b2a	 strh        w10,[x25,x9 lsl #1]
  00b10	b9408728	 ldr         w8,[x25,#0x84]
  00b14	11000509	 add         w9,w8,#1
  00b18	b9008729	 str         w9,[x25,#0x84]
  00b1c	b9407b28	 ldr         w8,[x25,#0x78]
  00b20	6b08013f	 cmp         w9,w8
  00b24	54000003	 blo         |$LL170@inflate|
  00b28		 |$LN532@inflate|

; 943  :             }
; 944  :             while (state->have < 19)

  00b28	71004d3f	 cmp         w9,#0x13
  00b2c	54000002	 bhs         |$LN184@inflate|
  00b30		 |$LL183@inflate|

; 945  :                 state->lens[order[state->have++]] = 0;

  00b30	b9408728	 ldr         w8,[x25,#0x84]
  00b34	78685989	 ldrh        w9,[x12,w8 uxtw #1]
  00b38	91012129	 add         x9,x9,#0x48
  00b3c	78297b3f	 strh        wzr,[x25,x9 lsl #1]
  00b40	b9408728	 ldr         w8,[x25,#0x84]
  00b44	1100050a	 add         w10,w8,#1
  00b48	b900872a	 str         w10,[x25,#0x84]
  00b4c	71004d5f	 cmp         w10,#0x13
  00b50	54000003	 blo         |$LL183@inflate|
  00b54		 |$LN184@inflate|

; 946  :             state->next = state->codes;

  00b54	91154328	 add         x8,x25,#0x550
  00b58	f9004728	 str         x8,[x25,#0x88]

; 947  :             state->lencode = (const code FAR *)(state->next);
; 948  :             state->lenbits = 7;
; 949  :             ret = inflate_table(CODES, state->lens, 19, &(state->next),

  00b5c	910c4325	 add         x5,x25,#0x310
  00b60	f9003328	 str         x8,[x25,#0x60]
  00b64	528000e8	 mov         w8,#7
  00b68	9101c324	 add         x4,x25,#0x70
  00b6c	b9007328	 str         w8,[x25,#0x70]
  00b70	91022323	 add         x3,x25,#0x88
  00b74	52800262	 mov         w2,#0x13
  00b78	91024321	 add         x1,x25,#0x90
  00b7c	52800000	 mov         w0,#0
  00b80	94000000	 bl          inflate_table

; 950  :                                 &(state->lenbits), state->work);
; 951  :             if (ret) {

  00b84	5287ea27	 mov         w7,#0x3F51
  00b88	b90013e0	 str         w0,[sp,#0x10]
  00b8c	5287e7e5	 mov         w5,#0x3F3F
  00b90	12800003	 mov         w3,#-1
  00b94	34000000	 cbz         w0,|$LN429@inflate|

; 952  :                 strm->msg = (char *)"invalid code lengths set";

  00b98	90000008	 adrp        x8,|??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@|
  00b9c	91000108	 add         x8,x8,PageOffset(|??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@|)
  00ba0	f9001348	 str         x8,[x26,#0x20]

; 953  :                 state->mode = BAD;

  00ba4	b9000b27	 str         w7,[x25,#8]

; 954  :                 break;

  00ba8	17fffd7a	 b           |$LN8@inflate|
  00bac		 |$LN426@inflate|

; 930  :                 strm->msg = (char *)"too many length or distance symbols";

  00bac	90000008	 adrp        x8,|??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@|
  00bb0	91000108	 add         x8,x8,PageOffset(|??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@|)
  00bb4	f9001348	 str         x8,[x26,#0x20]

; 931  :                 state->mode = BAD;

  00bb8	b9000b27	 str         w7,[x25,#8]

; 932  :                 break;

  00bbc	17fffd75	 b           |$LN8@inflate|
  00bc0		 |$LN429@inflate|

; 955  :             }
; 956  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 957  :             state->have = 0;
; 958  :             state->mode = CODELENS;

  00bc0	5287e8c8	 mov         w8,#0x3F46
  00bc4	f9401bef	 ldr         x15,[sp,#0x30]
  00bc8	b900873f	 str         wzr,[x25,#0x84]
  00bcc	b9000b28	 str         w8,[x25,#8]
  00bd0	5287e8cb	 mov         w11,#0x3F46
  00bd4		 |$LN533@inflate|

; 959  :         case CODELENS:
; 960  :             while (state->have < state->nlen + state->ndist) {

  00bd4	294fa322	 ldp         w2,w8,[x25,#0x7C]
  00bd8	b9408729	 ldr         w9,[x25,#0x84]
  00bdc	0b02010a	 add         w10,w8,w2
  00be0	6b0a013f	 cmp         w9,w10
  00be4	54000002	 bhs         |$LN186@inflate|
  00be8		 |$LL185@inflate|

; 961  :                 for (;;) {
; 962  :                     here = state->lencode[BITS(state->lenbits)];

  00be8	b9407328	 ldr         w8,[x25,#0x70]
  00bec	52800029	 mov         w9,#1
  00bf0	f940332d	 ldr         x13,[x25,#0x60]
  00bf4	1ac82129	 lsl         w9,w9,w8
  00bf8	d3407ec8	 uxtw        x8,w22
  00bfc	5100052b	 sub         w11,w9,#1
  00c00	8a080169	 and         x9,x11,x8
  00c04	b86979aa	 ldr         w10,[x13,x9 lsl #2]
  00c08	53087d48	 lsr         w8,w10,#8
  00c0c	b90017ea	 str         w10,[sp,#0x14]

; 963  :                     if ((unsigned)(here.bits) <= bits) break;

  00c10	6b28027f	 cmp         w19,w8,uxtb #0
  00c14	54000002	 bhs         |$LN653@inflate|
  00c18		 |$LL187@inflate|

; 964  :                     PULLBYTE();

  00c18	34000014	 cbz         w20,|$LN985@inflate|
  00c1c	394002a8	 ldrb        w8,[x21]
  00c20	51000694	 sub         w20,w20,#1
  00c24	910006b5	 add         x21,x21,#1
  00c28	1ad32108	 lsl         w8,w8,w19
  00c2c	0b160109	 add         w9,w8,w22
  00c30	2a0903f6	 mov         w22,w9
  00c34	8a0b0129	 and         x9,x9,x11
  00c38	b86979aa	 ldr         w10,[x13,x9 lsl #2]
  00c3c	11002273	 add         w19,w19,#8
  00c40	53087d48	 lsr         w8,w10,#8
  00c44	b90017ea	 str         w10,[sp,#0x14]
  00c48	6b28027f	 cmp         w19,w8,uxtb #0
  00c4c	54000003	 blo         |$LL187@inflate|
  00c50		 |$LN653@inflate|

; 965  :                 }
; 966  :                 if (here.val < 16) {

  00c50	53107d49	 lsr         w9,w10,#0x10
  00c54	53003d29	 uxth        w9,w9
  00c58	7100413f	 cmp         w9,#0x10
  00c5c	53001d08	 uxtb        w8,w8
  00c60	54000002	 bhs         |$LN991@inflate|

; 967  :                     DROPBITS(here.bits);

  00c64	1ac826d6	 lsr         w22,w22,w8

; 968  :                     state->lens[state->have++] = here.val;

  00c68	79402fe9	 ldrh        w9,[sp,#0x16]
  00c6c	4b080273	 sub         w19,w19,w8
  00c70	b9408728	 ldr         w8,[x25,#0x84]
  00c74	9101210a	 add         x10,x8,#0x48
  00c78	782a7b29	 strh        w9,[x25,x10 lsl #1]
  00c7c	b9408728	 ldr         w8,[x25,#0x84]
  00c80	1100050b	 add         w11,w8,#1
  00c84	b900872b	 str         w11,[x25,#0x84]

; 969  :                 }

  00c88	14000053	 b           |$LN608@inflate|
  00c8c		 |$LN991@inflate|

; 970  :                 else {
; 971  :                     if (here.val == 16) {

  00c8c	54000001	 bne         |$LN435@inflate|

; 972  :                         NEEDBITS(here.bits + 2);

  00c90	1100090a	 add         w10,w8,#2
  00c94	6b0a027f	 cmp         w19,w10
  00c98	54000002	 bhs         |$LN196@inflate|
  00c9c		 |$LL199@inflate|
  00c9c	34000014	 cbz         w20,|$LN985@inflate|
  00ca0	394002a8	 ldrb        w8,[x21]
  00ca4	51000694	 sub         w20,w20,#1
  00ca8	910006b5	 add         x21,x21,#1
  00cac	1ad32108	 lsl         w8,w8,w19
  00cb0	11002273	 add         w19,w19,#8
  00cb4	6b0a027f	 cmp         w19,w10
  00cb8	0b160116	 add         w22,w8,w22
  00cbc	54000003	 blo         |$LL199@inflate|
  00cc0		 |$LN196@inflate|

; 973  :                         DROPBITS(here.bits);

  00cc0	394057e8	 ldrb        w8,[sp,#0x15]

; 974  :                         if (state->have == 0) {

  00cc4	b9408729	 ldr         w9,[x25,#0x84]
  00cc8	1ac826d6	 lsr         w22,w22,w8
  00ccc	4b080273	 sub         w19,w19,w8
  00cd0	34000009	 cbz         w9,|$LN565@inflate|

; 975  :                             strm->msg = (char *)"invalid bit length repeat";
; 976  :                             state->mode = BAD;
; 977  :                             break;
; 978  :                         }
; 979  :                         len = state->lens[state->have - 1];
; 980  :                         copy = 3 + BITS(2);

  00cd4	120006c8	 and         w8,w22,#3
  00cd8	11000d0c	 add         w12,w8,#3
  00cdc	51000528	 sub         w8,w9,#1
  00ce0	9101210a	 add         x10,x8,#0x48

; 981  :                         DROPBITS(2);

  00ce4	786a7b2d	 ldrh        w13,[x25,x10 lsl #1]
  00ce8	53027ed6	 lsr         w22,w22,#2
  00cec	51000a73	 sub         w19,w19,#2

; 982  :                     }

  00cf0	1400002b	 b           |$LN236@inflate|
  00cf4		 |$LN435@inflate|

; 983  :                     else if (here.val == 17) {

  00cf4	7100453f	 cmp         w9,#0x11
  00cf8	54000001	 bne         |$LN226@inflate|

; 984  :                         NEEDBITS(here.bits + 3);

  00cfc	11000d09	 add         w9,w8,#3
  00d00	6b09027f	 cmp         w19,w9
  00d04	54000002	 bhs         |$LN210@inflate|
  00d08		 |$LL213@inflate|
  00d08	34000014	 cbz         w20,|$LN985@inflate|
  00d0c	394002a8	 ldrb        w8,[x21]
  00d10	51000694	 sub         w20,w20,#1
  00d14	910006b5	 add         x21,x21,#1
  00d18	1ad32108	 lsl         w8,w8,w19
  00d1c	11002273	 add         w19,w19,#8
  00d20	6b09027f	 cmp         w19,w9
  00d24	0b160116	 add         w22,w8,w22
  00d28	54000003	 blo         |$LL213@inflate|
  00d2c		 |$LN210@inflate|

; 985  :                         DROPBITS(here.bits);

  00d2c	394057ea	 ldrb        w10,[sp,#0x15]
  00d30	1aca26c9	 lsr         w9,w22,w10

; 986  :                         len = 0;
; 987  :                         copy = 3 + BITS(3);

  00d34	12000928	 and         w8,w9,#7
  00d38	11000d0c	 add         w12,w8,#3

; 988  :                         DROPBITS(3);

  00d3c	4b0a0268	 sub         w8,w19,w10
  00d40	51000d13	 sub         w19,w8,#3
  00d44	53037d36	 lsr         w22,w9,#3

; 989  :                     }

  00d48	14000014	 b           |$LN992@inflate|
  00d4c		 |$LN226@inflate|

; 990  :                     else {
; 991  :                         NEEDBITS(here.bits + 7);

  00d4c	11001d09	 add         w9,w8,#7
  00d50	6b09027f	 cmp         w19,w9
  00d54	54000002	 bhs         |$LN224@inflate|
  00d58		 |$LL227@inflate|
  00d58	34000014	 cbz         w20,|$LN985@inflate|
  00d5c	394002a8	 ldrb        w8,[x21]
  00d60	51000694	 sub         w20,w20,#1
  00d64	910006b5	 add         x21,x21,#1
  00d68	1ad32108	 lsl         w8,w8,w19
  00d6c	11002273	 add         w19,w19,#8
  00d70	6b09027f	 cmp         w19,w9
  00d74	0b160116	 add         w22,w8,w22
  00d78	54000003	 blo         |$LL227@inflate|
  00d7c		 |$LN224@inflate|

; 992  :                         DROPBITS(here.bits);

  00d7c	394057ea	 ldrb        w10,[sp,#0x15]
  00d80	1aca26c9	 lsr         w9,w22,w10

; 993  :                         len = 0;
; 994  :                         copy = 11 + BITS(7);

  00d84	12001928	 and         w8,w9,#0x7F
  00d88	11002d0c	 add         w12,w8,#0xB

; 995  :                         DROPBITS(7);

  00d8c	4b0a0268	 sub         w8,w19,w10
  00d90	51001d13	 sub         w19,w8,#7
  00d94	53077d36	 lsr         w22,w9,#7
  00d98		 |$LN992@inflate|

; 996  :                     }
; 997  :                     if (state->have + copy > state->nlen + state->ndist) {

  00d98	5280000d	 mov         w13,#0
  00d9c		 |$LN236@inflate|
  00d9c	294fa728	 ldp         w8,w9,[x25,#0x7C]
  00da0	b940872b	 ldr         w11,[x25,#0x84]
  00da4	0b08012a	 add         w10,w9,w8
  00da8	0b0c0169	 add         w9,w11,w12
  00dac	6b0a013f	 cmp         w9,w10
  00db0	54000008	 bhi         |$LN565@inflate|
  00db4		 |$LL238@inflate|

; 998  :                         strm->msg = (char *)"invalid bit length repeat";
; 999  :                         state->mode = BAD;
; 1000 :                         break;
; 1001 :                     }
; 1002 :                     while (copy--)
; 1003 :                         state->lens[state->have++] = (unsigned short)len;

  00db4	b9408728	 ldr         w8,[x25,#0x84]
  00db8	5100058c	 sub         w12,w12,#1
  00dbc	91012108	 add         x8,x8,#0x48
  00dc0	78287b2d	 strh        w13,[x25,x8 lsl #1]
  00dc4	b9408729	 ldr         w9,[x25,#0x84]
  00dc8	1100052b	 add         w11,w9,#1
  00dcc	b900872b	 str         w11,[x25,#0x84]
  00dd0	3500000c	 cbnz        w12,|$LL238@inflate|
  00dd4		 |$LN608@inflate|

; 959  :         case CODELENS:
; 960  :             while (state->have < state->nlen + state->ndist) {

  00dd4	294fa322	 ldp         w2,w8,[x25,#0x7C]
  00dd8	0b020109	 add         w9,w8,w2
  00ddc	6b09017f	 cmp         w11,w9
  00de0	54000003	 blo         |$LL185@inflate|

; 1191 :         case LIT:
; 1192 :             if (left == 0) goto inf_leave;

  00de4	b9400b2b	 ldr         w11,[x25,#8]
  00de8		 |$LN186@inflate|

; 1004 :                 }
; 1005 :             }
; 1006 : 
; 1007 :             /* handle error breaks in while */
; 1008 :             if (state->mode == BAD) break;

  00de8	5287ea28	 mov         w8,#0x3F51
  00dec	6b08017f	 cmp         w11,w8
  00df0	54000000	 beq         |$LN8@inflate|

; 1009 : 
; 1010 :             /* check for end-of-block code (better have one) */
; 1011 :             if (state->lens[256] == 0) {

  00df4	79452328	 ldrh        w8,[x25,#0x290]
  00df8	35000008	 cbnz        w8,|$LN445@inflate|

; 1012 :                 strm->msg = (char *)"invalid code -- missing end-of-block";

  00dfc	90000008	 adrp        x8,|??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@|
  00e00	91000108	 add         x8,x8,PageOffset(|??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@|)
  00e04	f9001348	 str         x8,[x26,#0x20]

; 1013 :                 state->mode = BAD;

  00e08	b9000b27	 str         w7,[x25,#8]

; 1014 :                 break;

  00e0c	17fffce1	 b           |$LN8@inflate|
  00e10		 |$LN565@inflate|

; 652  :     in = have;
; 653  :     out = left;
; 654  :     ret = Z_OK;
; 655  :     for (;;)
; 656  :         switch (state->mode) {

  00e10	f900134f	 str         x15,[x26,#0x20]
  00e14	b9000b27	 str         w7,[x25,#8]
  00e18	17fffcde	 b           |$LN8@inflate|
  00e1c		 |$LN445@inflate|

; 1015 :             }
; 1016 : 
; 1017 :             /* build code tables -- note: do not change the lenbits or distbits
; 1018 :                values here (9 and 6) without reading the comments in inftrees.h
; 1019 :                concerning the ENOUGH constants, which depend on those values */
; 1020 :             state->next = state->codes;

  00e1c	91154328	 add         x8,x25,#0x550
  00e20	f9004728	 str         x8,[x25,#0x88]

; 1021 :             state->lencode = (const code FAR *)(state->next);
; 1022 :             state->lenbits = 9;
; 1023 :             ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),

  00e24	910c4325	 add         x5,x25,#0x310
  00e28	f9003328	 str         x8,[x25,#0x60]
  00e2c	52800128	 mov         w8,#9
  00e30	9101c324	 add         x4,x25,#0x70
  00e34	b9007328	 str         w8,[x25,#0x70]
  00e38	91022323	 add         x3,x25,#0x88
  00e3c	91024321	 add         x1,x25,#0x90
  00e40	52800020	 mov         w0,#1
  00e44	94000000	 bl          inflate_table
  00e48	b90013e0	 str         w0,[sp,#0x10]

; 1024 :                                 &(state->lenbits), state->work);
; 1025 :             if (ret) {

  00e4c	34000000	 cbz         w0,|$LN446@inflate|

; 1026 :                 strm->msg = (char *)"invalid literal/lengths set";

  00e50	90000008	 adrp        x8,|??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@|
  00e54	91000108	 add         x8,x8,PageOffset(|??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@|)

; 1027 :                 state->mode = BAD;

  00e58	5287ea27	 mov         w7,#0x3F51
  00e5c	f9001348	 str         x8,[x26,#0x20]

; 1028 :                 break;

  00e60	5287e7e5	 mov         w5,#0x3F3F
  00e64	b9000b27	 str         w7,[x25,#8]
  00e68	17fffcc9	 b           |$LN993@inflate|
  00e6c		 |$LN446@inflate|

; 1029 :             }
; 1030 :             state->distcode = (const code FAR *)(state->next);

  00e6c	f9404728	 ldr         x8,[x25,#0x88]

; 1031 :             state->distbits = 6;
; 1032 :             ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,

  00e70	910c4325	 add         x5,x25,#0x310
  00e74	b9408322	 ldr         w2,[x25,#0x80]
  00e78	9101d324	 add         x4,x25,#0x74
  00e7c	91022323	 add         x3,x25,#0x88
  00e80	52800040	 mov         w0,#2
  00e84	f9003728	 str         x8,[x25,#0x68]
  00e88	528000c8	 mov         w8,#6
  00e8c	b9007728	 str         w8,[x25,#0x74]
  00e90	b9407f28	 ldr         w8,[x25,#0x7C]
  00e94	91012109	 add         x9,x8,#0x48
  00e98	8b090721	 add         x1,x25,x9,lsl #1
  00e9c	94000000	 bl          inflate_table
  00ea0	b90013e0	 str         w0,[sp,#0x10]

; 1033 :                             &(state->next), &(state->distbits), state->work);
; 1034 :             if (ret) {

  00ea4	34000000	 cbz         w0,|$LN447@inflate|

; 1035 :                 strm->msg = (char *)"invalid distances set";

  00ea8	90000008	 adrp        x8,|??_C@_0BG@GMDFCBGP@invalid?5distances?5set@|
  00eac	91000108	 add         x8,x8,PageOffset(|??_C@_0BG@GMDFCBGP@invalid?5distances?5set@|)

; 1036 :                 state->mode = BAD;

  00eb0	5287ea27	 mov         w7,#0x3F51
  00eb4	f9001348	 str         x8,[x26,#0x20]

; 1037 :                 break;

  00eb8	5287e7e5	 mov         w5,#0x3F3F
  00ebc	b9000b27	 str         w7,[x25,#8]
  00ec0	17fffcb3	 b           |$LN993@inflate|
  00ec4		 |$LN447@inflate|

; 1038 :             }
; 1039 :             Tracev((stderr, "inflate:       codes ok\n"));
; 1040 :             state->mode = LEN_;

  00ec4	5287e8e8	 mov         w8,#0x3F47
  00ec8	b9000b28	 str         w8,[x25,#8]

; 1041 :             if (flush == Z_TREES) goto inf_leave;

  00ecc	71001aff	 cmp         w23,#6
  00ed0	54000000	 beq         |$LN985@inflate|
  00ed4	b94027ed	 ldr         w13,[sp,#0x24]
  00ed8	5287ea27	 mov         w7,#0x3F51
  00edc	5287e7e5	 mov         w5,#0x3F3F
  00ee0	5287e904	 mov         w4,#0x3F48
  00ee4	12800003	 mov         w3,#-1
  00ee8		 |$LN448@inflate|

; 1042 :         case LEN_:
; 1043 :             state->mode = LEN;

  00ee8	b9000b24	 str         w4,[x25,#8]
  00eec		 |$LN450@inflate|

; 1044 :         case LEN:
; 1045 :             if (have >= 6 && left >= 258) {

  00eec	71001a9f	 cmp         w20,#6
  00ef0	54000003	 blo         |$LN451@inflate|
  00ef4	71040b1f	 cmp         w24,#0x102
  00ef8	54000003	 blo         |$LN451@inflate|

; 1046 :                 RESTORE();

  00efc	f9000b5b	 str         x27,[x26,#0x10]

; 1047 :                 inflate_fast(strm, out);

  00f00	2a0d03e1	 mov         w1,w13
  00f04	b9001b58	 str         w24,[x26,#0x18]
  00f08	aa1a03e0	 mov         x0,x26
  00f0c	f9000355	 str         x21,[x26]
  00f10	b9000b54	 str         w20,[x26,#8]
  00f14	29094f36	 stp         w22,w19,[x25,#0x48]
  00f18	94000000	 bl          inflate_fast

; 1048 :                 LOAD();

  00f1c	b9401b58	 ldr         w24,[x26,#0x18]

; 1049 :                 if (state->mode == TYPE)

  00f20	b9400b28	 ldr         w8,[x25,#8]
  00f24	5287e7e9	 mov         w9,#0x3F3F
  00f28	f9400b5b	 ldr         x27,[x26,#0x10]
  00f2c	f9400355	 ldr         x21,[x26]
  00f30	b90023f8	 str         w24,[sp,#0x20]
  00f34	b9400b54	 ldr         w20,[x26,#8]
  00f38	29494f36	 ldp         w22,w19,[x25,#0x48]
  00f3c	6b09011f	 cmp         w8,w9
  00f40	54000001	 bne         |$LN989@inflate|

; 1050 :                     state->back = -1;

  00f44	12800003	 mov         w3,#-1
  00f48	b91be723	 str         w3,[x25,#0x1BE4]

; 1051 :                 break;

  00f4c	5287ea27	 mov         w7,#0x3F51
  00f50	5287e7e5	 mov         w5,#0x3F3F
  00f54	17fffc8f	 b           |$LN8@inflate|
  00f58		 |$LN451@inflate|

; 1052 :             }
; 1053 :             state->back = 0;
; 1054 :             for (;;) {
; 1055 :                 here = state->lencode[BITS(state->lenbits)];

  00f58	b9407328	 ldr         w8,[x25,#0x70]
  00f5c	52800029	 mov         w9,#1
  00f60	b91be73f	 str         wzr,[x25,#0x1BE4]
  00f64	f940332f	 ldr         x15,[x25,#0x60]
  00f68	1ac82129	 lsl         w9,w9,w8
  00f6c	5100052a	 sub         w10,w9,#1
  00f70	d3407ec8	 uxtw        x8,w22
  00f74	8a080149	 and         x9,x10,x8
  00f78	b86979e8	 ldr         w8,[x15,x9 lsl #2]
  00f7c	53087d09	 lsr         w9,w8,#8
  00f80	b90017e8	 str         w8,[sp,#0x14]

; 1056 :                 if ((unsigned)(here.bits) <= bits) break;

  00f84	6b29027f	 cmp         w19,w9,uxtb #0
  00f88	54000002	 bhs         |$LN567@inflate|
  00f8c		 |$LL246@inflate|

; 1057 :                 PULLBYTE();

  00f8c	34000014	 cbz         w20,|$LN985@inflate|
  00f90	394002a8	 ldrb        w8,[x21]
  00f94	51000694	 sub         w20,w20,#1
  00f98	910006b5	 add         x21,x21,#1
  00f9c	1ad32108	 lsl         w8,w8,w19
  00fa0	0b160109	 add         w9,w8,w22
  00fa4	2a0903f6	 mov         w22,w9
  00fa8	8a0a0129	 and         x9,x9,x10
  00fac	b86979e8	 ldr         w8,[x15,x9 lsl #2]
  00fb0	11002273	 add         w19,w19,#8
  00fb4	53087d09	 lsr         w9,w8,#8
  00fb8	b90017e8	 str         w8,[sp,#0x14]
  00fbc	6b29027f	 cmp         w19,w9,uxtb #0
  00fc0	54000003	 blo         |$LL246@inflate|
  00fc4		 |$LN567@inflate|

; 1058 :             }
; 1059 :             if (here.op && (here.op & 0xf0) == 0) {

  00fc4	394053eb	 ldrb        w11,[sp,#0x14]
  00fc8	3400000b	 cbz         w11,|$LN263@inflate|
  00fcc	721c0d7f	 tst         w11,#0xF0
  00fd0	54000001	 bne         |$LN263@inflate|

; 1060 :                 last = here;
; 1061 :                 for (;;) {
; 1062 :                     here = state->lencode[last.val +

  00fd4	53083d0d	 ubfx        w13,w8,#8,#8
  00fd8	b9001fe8	 str         w8,[sp,#0x1C]
  00fdc	0b2801a9	 add         w9,w13,w8,uxtb #0
  00fe0	5280002a	 mov         w10,#1
  00fe4	1ac92149	 lsl         w9,w10,w9
  00fe8	5100052a	 sub         w10,w9,#1
  00fec	0a16014b	 and         w11,w10,w22
  00ff0	1acd256c	 lsr         w12,w11,w13
  00ff4	0b484189	 add         w9,w12,w8,lsr #0x10

; 1063 :                             (BITS(last.bits + last.op) >> last.bits)];
; 1064 :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  00ff8	394077ec	 ldrb        w12,[sp,#0x1D]
  00ffc	b86959ea	 ldr         w10,[x15,w9 uxtw #2]
  01000	53087d48	 lsr         w8,w10,#8
  01004	b90017ea	 str         w10,[sp,#0x14]
  01008	0b2801a9	 add         w9,w13,w8,uxtb #0
  0100c	6b13013f	 cmp         w9,w19
  01010	54000009	 bls         |$LN260@inflate|
  01014	394073e8	 ldrb        w8,[sp,#0x1C]
  01018	52800029	 mov         w9,#1
  0101c	79403fee	 ldrh        w14,[sp,#0x1E]
  01020	0b0c0108	 add         w8,w8,w12
  01024	1ac82128	 lsl         w8,w9,w8
  01028	5100050d	 sub         w13,w8,#1
  0102c		 |$LL252@inflate|

; 1065 :                     PULLBYTE();

  0102c	34000014	 cbz         w20,|$LN985@inflate|
  01030	394002a8	 ldrb        w8,[x21]
  01034	51000694	 sub         w20,w20,#1
  01038	910006b5	 add         x21,x21,#1
  0103c	1ad32108	 lsl         w8,w8,w19
  01040	0b160116	 add         w22,w8,w22
  01044	0a1601a8	 and         w8,w13,w22
  01048	1acc2509	 lsr         w9,w8,w12
  0104c	0b0e012a	 add         w10,w9,w14
  01050	b86a59eb	 ldr         w11,[x15,w10 uxtw #2]
  01054	11002273	 add         w19,w19,#8
  01058	53087d68	 lsr         w8,w11,#8
  0105c	b90017eb	 str         w11,[sp,#0x14]
  01060	0b280189	 add         w9,w12,w8,uxtb #0
  01064	6b13013f	 cmp         w9,w19
  01068	54000008	 bhi         |$LL252@inflate|
  0106c		 |$LN260@inflate|

; 1066 :                 }
; 1067 :                 DROPBITS(last.bits);
; 1068 :                 state->back += last.bits;

  0106c	394053eb	 ldrb        w11,[sp,#0x14]
  01070	1acc26d6	 lsr         w22,w22,w12
  01074	b91be72c	 str         w12,[x25,#0x1BE4]
  01078	4b0c0273	 sub         w19,w19,w12
  0107c		 |$LN263@inflate|

; 1069 :             }
; 1070 :             DROPBITS(here.bits);

  0107c	394057e9	 ldrb        w9,[sp,#0x15]

; 1071 :             state->back += here.bits;

  01080	b95be728	 ldr         w8,[x25,#0x1BE4]

; 1072 :             state->length = (unsigned)here.val;

  01084	79402fea	 ldrh        w10,[sp,#0x16]
  01088	1ac926d6	 lsr         w22,w22,w9
  0108c	4b090273	 sub         w19,w19,w9
  01090	0b080129	 add         w9,w9,w8
  01094	b900532a	 str         w10,[x25,#0x50]
  01098	b91be729	 str         w9,[x25,#0x1BE4]

; 1073 :             if ((int)(here.op) == 0) {

  0109c	3500000b	 cbnz        w11,|$LN458@inflate|

; 1074 :                 Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
; 1075 :                         "inflate:         literal '%c'\n" :
; 1076 :                         "inflate:         literal 0x%02x\n", here.val));
; 1077 :                 state->mode = LIT;

  010a0	5287e9a8	 mov         w8,#0x3F4D
  010a4	b9000b28	 str         w8,[x25,#8]

; 1078 :                 break;

  010a8	17fffc3a	 b           |$LN8@inflate|
  010ac		 |$LN458@inflate|

; 1079 :             }
; 1080 :             if (here.op & 32) {

  010ac	3628000b	 tbz         x11,#5,|$LN459@inflate|

; 1081 :                 Tracevv((stderr, "inflate:         end of block\n"));
; 1082 :                 state->back = -1;

  010b0	b91be723	 str         w3,[x25,#0x1BE4]
  010b4		 |$LN419@inflate|

; 652  :     in = have;
; 653  :     out = left;
; 654  :     ret = Z_OK;
; 655  :     for (;;)
; 656  :         switch (state->mode) {

  010b4	b9000b25	 str         w5,[x25,#8]
  010b8	17fffc36	 b           |$LN8@inflate|
  010bc		 |$LN459@inflate|

; 1083 :                 state->mode = TYPE;
; 1084 :                 break;
; 1085 :             }
; 1086 :             if (here.op & 64) {

  010bc	3630000b	 tbz         x11,#6,|$LN460@inflate|

; 1087 :                 strm->msg = (char *)"invalid literal/length code";

  010c0	90000008	 adrp        x8,|??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@|
  010c4	91000108	 add         x8,x8,PageOffset(|??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@|)
  010c8	f9001348	 str         x8,[x26,#0x20]

; 1088 :                 state->mode = BAD;

  010cc	b9000b27	 str         w7,[x25,#8]

; 1089 :                 break;

  010d0	17fffc30	 b           |$LN8@inflate|
  010d4		 |$LN460@inflate|

; 1090 :             }
; 1091 :             state->extra = (unsigned)(here.op) & 15;

  010d4	12000d68	 and         w8,w11,#0xF
  010d8	b9005b28	 str         w8,[x25,#0x58]

; 1092 :             state->mode = LENEXT;

  010dc	5287e928	 mov         w8,#0x3F49
  010e0	b9000b28	 str         w8,[x25,#8]
  010e4		 |$LN461@inflate|

; 1093 :         case LENEXT:
; 1094 :             if (state->extra) {

  010e4	b9405b2c	 ldr         w12,[x25,#0x58]
  010e8	3400000c	 cbz         w12,|$LN749@inflate|

; 1095 :                 NEEDBITS(state->extra);

  010ec	6b0c027f	 cmp         w19,w12
  010f0	54000002	 bhs         |$LN264@inflate|
  010f4		 |$LL267@inflate|
  010f4	34000014	 cbz         w20,|$LN985@inflate|
  010f8	394002a8	 ldrb        w8,[x21]
  010fc	51000694	 sub         w20,w20,#1
  01100	910006b5	 add         x21,x21,#1
  01104	1ad32108	 lsl         w8,w8,w19
  01108	11002273	 add         w19,w19,#8
  0110c	6b0c027f	 cmp         w19,w12
  01110	0b160116	 add         w22,w8,w22
  01114	54000003	 blo         |$LL267@inflate|
  01118		 |$LN264@inflate|

; 1096 :                 state->length += BITS(state->extra);

  01118	52800028	 mov         w8,#1
  0111c	b940532a	 ldr         w10,[x25,#0x50]
  01120	1acc2108	 lsl         w8,w8,w12
  01124	51000509	 sub         w9,w8,#1
  01128	0a16012b	 and         w11,w9,w22
  0112c	0b0a0168	 add         w8,w11,w10
  01130	b9005328	 str         w8,[x25,#0x50]

; 1097 :                 DROPBITS(state->extra);
; 1098 :                 state->back += state->extra;

  01134	b95be728	 ldr         w8,[x25,#0x1BE4]
  01138	1acc26d6	 lsr         w22,w22,w12
  0113c	4b0c0273	 sub         w19,w19,w12
  01140	0b0c0109	 add         w9,w8,w12
  01144	b91be729	 str         w9,[x25,#0x1BE4]
  01148		 |$LN749@inflate|

; 1099 :             }
; 1100 :             Tracevv((stderr, "inflate:         length %u\n", state->length));
; 1101 :             state->was = state->length;

  01148	b9405328	 ldr         w8,[x25,#0x50]
  0114c	b91beb28	 str         w8,[x25,#0x1BE8]

; 1102 :             state->mode = DIST;

  01150	5287e948	 mov         w8,#0x3F4A
  01154	b9000b28	 str         w8,[x25,#8]
  01158		 |$LN464@inflate|

; 1103 :         case DIST:
; 1104 :             for (;;) {
; 1105 :                 here = state->distcode[BITS(state->distbits)];

  01158	b9407728	 ldr         w8,[x25,#0x74]
  0115c	52800029	 mov         w9,#1
  01160	f940372f	 ldr         x15,[x25,#0x68]
  01164	1ac82129	 lsl         w9,w9,w8
  01168	5100052a	 sub         w10,w9,#1
  0116c	d3407ec8	 uxtw        x8,w22
  01170	8a080149	 and         x9,x10,x8
  01174	b86979e8	 ldr         w8,[x15,x9 lsl #2]
  01178	53087d09	 lsr         w9,w8,#8
  0117c	b90017e8	 str         w8,[sp,#0x14]

; 1106 :                 if ((unsigned)(here.bits) <= bits) break;

  01180	6b29027f	 cmp         w19,w9,uxtb #0
  01184	54000002	 bhs         |$LN572@inflate|
  01188		 |$LL275@inflate|

; 1107 :                 PULLBYTE();

  01188	34000014	 cbz         w20,|$LN985@inflate|
  0118c	394002a8	 ldrb        w8,[x21]
  01190	51000694	 sub         w20,w20,#1
  01194	910006b5	 add         x21,x21,#1
  01198	1ad32108	 lsl         w8,w8,w19
  0119c	0b160109	 add         w9,w8,w22
  011a0	2a0903f6	 mov         w22,w9
  011a4	8a0a0129	 and         x9,x9,x10
  011a8	b86979e8	 ldr         w8,[x15,x9 lsl #2]
  011ac	11002273	 add         w19,w19,#8
  011b0	53087d09	 lsr         w9,w8,#8
  011b4	b90017e8	 str         w8,[sp,#0x14]
  011b8	6b29027f	 cmp         w19,w9,uxtb #0
  011bc	54000003	 blo         |$LL275@inflate|
  011c0		 |$LN572@inflate|

; 1108 :             }
; 1109 :             if ((here.op & 0xf0) == 0) {

  011c0	394053ea	 ldrb        w10,[sp,#0x14]
  011c4	721c0d5f	 tst         w10,#0xF0
  011c8	54000001	 bne         |$LN292@inflate|

; 1110 :                 last = here;
; 1111 :                 for (;;) {
; 1112 :                     here = state->distcode[last.val +

  011cc	53083d0d	 ubfx        w13,w8,#8,#8
  011d0	b9001fe8	 str         w8,[sp,#0x1C]
  011d4	0b2801a9	 add         w9,w13,w8,uxtb #0
  011d8	5280002a	 mov         w10,#1
  011dc	1ac92149	 lsl         w9,w10,w9
  011e0	5100052a	 sub         w10,w9,#1
  011e4	0a16014b	 and         w11,w10,w22
  011e8	1acd256c	 lsr         w12,w11,w13
  011ec	0b484189	 add         w9,w12,w8,lsr #0x10

; 1113 :                             (BITS(last.bits + last.op) >> last.bits)];
; 1114 :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  011f0	394077ec	 ldrb        w12,[sp,#0x1D]
  011f4	b86959ea	 ldr         w10,[x15,w9 uxtw #2]
  011f8	53087d48	 lsr         w8,w10,#8
  011fc	b90017ea	 str         w10,[sp,#0x14]
  01200	0b2801a9	 add         w9,w13,w8,uxtb #0
  01204	6b13013f	 cmp         w9,w19
  01208	54000009	 bls         |$LN289@inflate|
  0120c	394073e8	 ldrb        w8,[sp,#0x1C]
  01210	52800029	 mov         w9,#1
  01214	79403fee	 ldrh        w14,[sp,#0x1E]
  01218	0b0c0108	 add         w8,w8,w12
  0121c	1ac82128	 lsl         w8,w9,w8
  01220	5100050d	 sub         w13,w8,#1
  01224		 |$LL281@inflate|

; 1115 :                     PULLBYTE();

  01224	34000014	 cbz         w20,|$LN985@inflate|
  01228	394002a8	 ldrb        w8,[x21]
  0122c	51000694	 sub         w20,w20,#1
  01230	910006b5	 add         x21,x21,#1
  01234	1ad32108	 lsl         w8,w8,w19
  01238	0b160116	 add         w22,w8,w22
  0123c	0a1601a8	 and         w8,w13,w22
  01240	1acc2509	 lsr         w9,w8,w12
  01244	0b0e012a	 add         w10,w9,w14
  01248	b86a59eb	 ldr         w11,[x15,w10 uxtw #2]
  0124c	11002273	 add         w19,w19,#8
  01250	53087d68	 lsr         w8,w11,#8
  01254	b90017eb	 str         w11,[sp,#0x14]
  01258	0b280189	 add         w9,w12,w8,uxtb #0
  0125c	6b13013f	 cmp         w9,w19
  01260	54000008	 bhi         |$LL281@inflate|
  01264		 |$LN289@inflate|

; 1116 :                 }
; 1117 :                 DROPBITS(last.bits);
; 1118 :                 state->back += last.bits;

  01264	b95be728	 ldr         w8,[x25,#0x1BE4]
  01268	1acc26d6	 lsr         w22,w22,w12
  0126c	394053ea	 ldrb        w10,[sp,#0x14]
  01270	4b0c0273	 sub         w19,w19,w12
  01274	0b080189	 add         w9,w12,w8
  01278	b91be729	 str         w9,[x25,#0x1BE4]
  0127c		 |$LN292@inflate|

; 1119 :             }
; 1120 :             DROPBITS(here.bits);

  0127c	394057e9	 ldrb        w9,[sp,#0x15]

; 1121 :             state->back += here.bits;

  01280	b95be728	 ldr         w8,[x25,#0x1BE4]
  01284	1ac926d6	 lsr         w22,w22,w9
  01288	4b090273	 sub         w19,w19,w9
  0128c	0b080129	 add         w9,w9,w8
  01290	b91be729	 str         w9,[x25,#0x1BE4]

; 1122 :             if (here.op & 64) {

  01294	3630000a	 tbz         x10,#6,|$LN470@inflate|

; 1123 :                 strm->msg = (char *)"invalid distance code";

  01298	90000008	 adrp        x8,|??_C@_0BG@LBKINIKP@invalid?5distance?5code@|
  0129c	91000108	 add         x8,x8,PageOffset(|??_C@_0BG@LBKINIKP@invalid?5distance?5code@|)
  012a0	f9001348	 str         x8,[x26,#0x20]

; 1124 :                 state->mode = BAD;

  012a4	b9000b27	 str         w7,[x25,#8]

; 1125 :                 break;

  012a8	17fffbba	 b           |$LN8@inflate|
  012ac		 |$LN470@inflate|

; 1126 :             }
; 1127 :             state->offset = (unsigned)here.val;

  012ac	79402fe8	 ldrh        w8,[sp,#0x16]
  012b0	b94027ed	 ldr         w13,[sp,#0x24]
  012b4	b9005728	 str         w8,[x25,#0x54]

; 1128 :             state->extra = (unsigned)(here.op) & 15;

  012b8	12000d48	 and         w8,w10,#0xF
  012bc	b9005b28	 str         w8,[x25,#0x58]

; 1129 :             state->mode = DISTEXT;

  012c0	5287e968	 mov         w8,#0x3F4B
  012c4	b9000b28	 str         w8,[x25,#8]
  012c8		 |$LN471@inflate|

; 1130 :         case DISTEXT:
; 1131 :             if (state->extra) {

  012c8	b9405b2c	 ldr         w12,[x25,#0x58]
  012cc	3400000c	 cbz         w12,|$LN751@inflate|

; 1132 :                 NEEDBITS(state->extra);

  012d0	6b0c027f	 cmp         w19,w12
  012d4	54000002	 bhs         |$LN293@inflate|
  012d8		 |$LL296@inflate|
  012d8	34000014	 cbz         w20,|$LN985@inflate|
  012dc	394002a8	 ldrb        w8,[x21]
  012e0	51000694	 sub         w20,w20,#1
  012e4	910006b5	 add         x21,x21,#1
  012e8	1ad32108	 lsl         w8,w8,w19
  012ec	11002273	 add         w19,w19,#8
  012f0	6b0c027f	 cmp         w19,w12
  012f4	0b160116	 add         w22,w8,w22
  012f8	54000003	 blo         |$LL296@inflate|
  012fc		 |$LN293@inflate|

; 1133 :                 state->offset += BITS(state->extra);

  012fc	52800028	 mov         w8,#1
  01300	b940572a	 ldr         w10,[x25,#0x54]
  01304	1acc2108	 lsl         w8,w8,w12
  01308	51000509	 sub         w9,w8,#1
  0130c	0a16012b	 and         w11,w9,w22
  01310	0b0a0168	 add         w8,w11,w10
  01314	b9005728	 str         w8,[x25,#0x54]

; 1134 :                 DROPBITS(state->extra);
; 1135 :                 state->back += state->extra;

  01318	b95be728	 ldr         w8,[x25,#0x1BE4]
  0131c	1acc26d6	 lsr         w22,w22,w12
  01320	4b0c0273	 sub         w19,w19,w12
  01324	0b0c0109	 add         w9,w8,w12
  01328	b91be729	 str         w9,[x25,#0x1BE4]
  0132c		 |$LN751@inflate|

; 1136 :             }
; 1137 : #ifdef INFLATE_STRICT
; 1138 :             if (state->offset > state->dmax) {
; 1139 :                 strm->msg = (char *)"invalid distance too far back";
; 1140 :                 state->mode = BAD;
; 1141 :                 break;
; 1142 :             }
; 1143 : #endif
; 1144 :             Tracevv((stderr, "inflate:         distance %u\n", state->offset));
; 1145 :             state->mode = MATCH;

  0132c	5287e988	 mov         w8,#0x3F4C
  01330	b9000b28	 str         w8,[x25,#8]
  01334		 |$LN474@inflate|

; 1146 :         case MATCH:
; 1147 :             if (left == 0) goto inf_leave;

  01334	34000018	 cbz         w24,|$LN985@inflate|

; 1148 :             copy = out - left;
; 1149 :             if (state->offset > copy) {         /* copy from window */

  01338	b9405728	 ldr         w8,[x25,#0x54]
  0133c	4b1801a9	 sub         w9,w13,w24
  01340	6b09011f	 cmp         w8,w9
  01344	54000009	 bls         |$LN476@inflate|

; 1150 :                 copy = state->offset - copy;

  01348	4b090109	 sub         w9,w8,w9

; 1151 :                 if (copy > state->whave) {

  0134c	b9403b28	 ldr         w8,[x25,#0x38]
  01350	6b08013f	 cmp         w9,w8
  01354	54000009	 bls         |$LN479@inflate|

; 1152 :                     if (state->sane) {

  01358	b95be328	 ldr         w8,[x25,#0x1BE0]
  0135c	34000008	 cbz         w8,|$LN479@inflate|

; 1153 :                         strm->msg = (char *)"invalid distance too far back";

  01360	90000008	 adrp        x8,|??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@|
  01364	91000108	 add         x8,x8,PageOffset(|??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@|)
  01368	f9001348	 str         x8,[x26,#0x20]

; 1154 :                         state->mode = BAD;

  0136c	b9000b27	 str         w7,[x25,#8]

; 1155 :                         break;

  01370	17fffb88	 b           |$LN8@inflate|
  01374		 |$LN479@inflate|

; 1156 :                     }
; 1157 : #ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
; 1158 :                     Trace((stderr, "inflate.c too far\n"));
; 1159 :                     copy -= state->whave;
; 1160 :                     if (copy > state->length) copy = state->length;
; 1161 :                     if (copy > left) copy = left;
; 1162 :                     left -= copy;
; 1163 :                     state->length -= copy;
; 1164 :                     do {
; 1165 :                         *put++ = 0;
; 1166 :                     } while (--copy);
; 1167 :                     if (state->length == 0) state->mode = LEN;
; 1168 :                     break;
; 1169 : #endif
; 1170 :                 }
; 1171 :                 if (copy > state->wnext) {

  01374	b9403f28	 ldr         w8,[x25,#0x3C]
  01378	f940232b	 ldr         x11,[x25,#0x40]
  0137c	6b08013f	 cmp         w9,w8
  01380	54000009	 bls         |$LN480@inflate|

; 1172 :                     copy -= state->wnext;

  01384	4b080129	 sub         w9,w9,w8

; 1173 :                     from = state->window + (state->wsize - copy);

  01388	b9403728	 ldr         w8,[x25,#0x34]
  0138c		 |$LN480@inflate|

; 1174 :                 }
; 1175 :                 else
; 1176 :                     from = state->window + (state->wnext - copy);
; 1177 :                 if (copy > state->length) copy = state->length;

  0138c	9101432c	 add         x12,x25,#0x50
  01390	4b09010a	 sub         w10,w8,w9
  01394	b9400188	 ldr         w8,[x12]

; 1178 :             }

  01398	8b2a416b	 add         x11,x11,w10,uxtw #0
  0139c	6b08013f	 cmp         w9,w8
  013a0	1a88912a	 csells      w10,w9,w8
  013a4	14000005	 b           |$LN477@inflate|
  013a8		 |$LN476@inflate|

; 1179 :             else {                              /* copy from output */
; 1180 :                 from = put - state->offset;
; 1181 :                 copy = state->length;

  013a8	9101432c	 add         x12,x25,#0x50
  013ac	cb28436b	 sub         x11,x27,w8,uxtw #0
  013b0	b9400188	 ldr         w8,[x12]
  013b4	2a0803ea	 mov         w10,w8
  013b8		 |$LN477@inflate|

; 1182 :             }
; 1183 :             if (copy > left) copy = left;
; 1184 :             left -= copy;

  013b8	6b18015f	 cmp         w10,w24
  013bc	1a989149	 csells      w9,w10,w24
  013c0	4b090318	 sub         w24,w24,w9

; 1185 :             state->length -= copy;

  013c4	4b090108	 sub         w8,w8,w9
  013c8	b90023f8	 str         w24,[sp,#0x20]
  013cc	b9000188	 str         w8,[x12]
  013d0	cb1b016a	 sub         x10,x11,x27
  013d4		 |$LL306@inflate|

; 1186 :             do {
; 1187 :                 *put++ = *from++;

  013d4	387b6948	 ldrb        w8,[x10,x27]

; 1188 :             } while (--copy);

  013d8	51000529	 sub         w9,w9,#1
  013dc	38001768	 strb        w8,[x27],#1
  013e0	35000009	 cbnz        w9,|$LL306@inflate|

; 1189 :             if (state->length == 0) state->mode = LEN;

  013e4	b9400188	 ldr         w8,[x12]
  013e8	35000008	 cbnz        w8,|$LN8@inflate|
  013ec	b9000b24	 str         w4,[x25,#8]

; 1190 :             break;

  013f0	17fffb68	 b           |$LN8@inflate|
  013f4		 |$LN485@inflate|

; 1191 :         case LIT:
; 1192 :             if (left == 0) goto inf_leave;

  013f4	34000018	 cbz         w24,|$LN985@inflate|

; 1193 :             *put++ = (unsigned char)(state->length);

  013f8	39414328	 ldrb        w8,[x25,#0x50]

; 1194 :             left--;

  013fc	51000718	 sub         w24,w24,#1
  01400	b90023f8	 str         w24,[sp,#0x20]
  01404	39000368	 strb        w8,[x27]
  01408	9100077b	 add         x27,x27,#1

; 1195 :             state->mode = LEN;

  0140c	b9000b24	 str         w4,[x25,#8]

; 1196 :             break;

  01410	17fffb60	 b           |$LN8@inflate|
  01414		 |$LN487@inflate|

; 1197 :         case CHECK:
; 1198 :             if (state->wrap) {

  01414	b9401328	 ldr         w8,[x25,#0x10]
  01418	34000008	 cbz         w8,|$LN316@inflate|

; 1199 :                 NEEDBITS(32);

  0141c	7100827f	 cmp         w19,#0x20
  01420	54000002	 bhs         |$LN307@inflate|
  01424		 |$LL310@inflate|
  01424	34000014	 cbz         w20,|$LN985@inflate|
  01428	394002a8	 ldrb        w8,[x21]
  0142c	51000694	 sub         w20,w20,#1
  01430	910006b5	 add         x21,x21,#1
  01434	1ad32108	 lsl         w8,w8,w19
  01438	11002273	 add         w19,w19,#8
  0143c	7100827f	 cmp         w19,#0x20
  01440	0b160116	 add         w22,w8,w22
  01444	54000003	 blo         |$LL310@inflate|
  01448		 |$LN307@inflate|

; 1200 :                 out -= left;
; 1201 :                 strm->total_out += out;

  01448	b9401f48	 ldr         w8,[x26,#0x1C]
  0144c	4b1801a2	 sub         w2,w13,w24
  01450	0b020109	 add         w9,w8,w2
  01454	b9001f49	 str         w9,[x26,#0x1C]

; 1202 :                 state->total += out;

  01458	b940272a	 ldr         w10,[x25,#0x24]

; 1203 :                 if ((state->wrap & 4) && out)

  0145c	b9401329	 ldr         w9,[x25,#0x10]
  01460	0b020148	 add         w8,w10,w2
  01464	b9002728	 str         w8,[x25,#0x24]
  01468	36100009	 tbz         x9,#2,|$LN490@inflate|
  0146c	34000002	 cbz         w2,|$LN490@inflate|

; 1204 :                     strm->adler = state->check =

  01470	b9402320	 ldr         w0,[x25,#0x20]
  01474	cb224361	 sub         x1,x27,w2,uxtw #0
  01478	b9401b28	 ldr         w8,[x25,#0x18]
  0147c	34000008	 cbz         w8,|$LN511@inflate|
  01480	94000000	 bl          crc32
  01484	14000002	 b           |$LN512@inflate|
  01488		 |$LN511@inflate|
  01488	94000000	 bl          adler32
  0148c		 |$LN512@inflate|
  0148c	b9002320	 str         w0,[x25,#0x20]
  01490	5287ea27	 mov         w7,#0x3F51
  01494	b9004f40	 str         w0,[x26,#0x4C]
  01498	5287e7e5	 mov         w5,#0x3F3F
  0149c	b9401329	 ldr         w9,[x25,#0x10]
  014a0	12800003	 mov         w3,#-1
  014a4		 |$LN490@inflate|

; 1205 :                         UPDATE(state->check, put - out, out);
; 1206 :                 out = left;

  014a4	b90027f8	 str         w24,[sp,#0x24]

; 1207 :                 if ((state->wrap & 4) && (

  014a8	36100009	 tbz         x9,#2,|$LN317@inflate|
  014ac	12181ec8	 and         w8,w22,#0xFF00
  014b0	b9401b2c	 ldr         w12,[x25,#0x18]
  014b4	53087ec9	 lsr         w9,w22,#8
  014b8	0b16410b	 add         w11,w8,w22,lsl #0x10
  014bc	12181d2a	 and         w10,w9,#0xFF00
  014c0	0b0b2148	 add         w8,w10,w11,lsl #8
  014c4	7100019f	 cmp         w12,#0
  014c8	0b566109	 add         w9,w8,w22,lsr #0x18
  014cc	b9402328	 ldr         w8,[x25,#0x20]
  014d0	1a8912ca	 cselne      w10,w22,w9
  014d4	6b08015f	 cmp         w10,w8
  014d8	54000000	 beq         |$LN317@inflate|

; 1208 : #ifdef GUNZIP
; 1209 :                      state->flags ? hold :
; 1210 : #endif
; 1211 :                      ZSWAP32(hold)) != state->check) {
; 1212 :                     strm->msg = (char *)"incorrect data check";

  014dc	90000008	 adrp        x8,|??_C@_0BF@MEIGEHBE@incorrect?5data?5check@|
  014e0	91000108	 add         x8,x8,PageOffset(|??_C@_0BF@MEIGEHBE@incorrect?5data?5check@|)
  014e4	f9001348	 str         x8,[x26,#0x20]

; 1213 :                     state->mode = BAD;

  014e8	b9000b27	 str         w7,[x25,#8]

; 1214 :                     break;

  014ec	17fffb29	 b           |$LN8@inflate|
  014f0		 |$LN317@inflate|

; 1215 :                 }
; 1216 :                 INITBITS();

  014f0	52800016	 mov         w22,#0
  014f4	52800013	 mov         w19,#0
  014f8		 |$LN316@inflate|

; 1217 :                 Tracev((stderr, "inflate:   check matches trailer\n"));
; 1218 :             }
; 1219 : #ifdef GUNZIP
; 1220 :             state->mode = LENGTH;

  014f8	5287e9e8	 mov         w8,#0x3F4F
  014fc	b9000b28	 str         w8,[x25,#8]
  01500		 |$LN492@inflate|

; 1221 :         case LENGTH:
; 1222 :             if (state->wrap && state->flags) {

  01500	b9401328	 ldr         w8,[x25,#0x10]
  01504	34000008	 cbz         w8,|$LN327@inflate|
  01508	b9401b28	 ldr         w8,[x25,#0x18]
  0150c	34000008	 cbz         w8,|$LN327@inflate|

; 1223 :                 NEEDBITS(32);

  01510	7100827f	 cmp         w19,#0x20
  01514	54000002	 bhs         |$LN318@inflate|
  01518		 |$LL321@inflate|
  01518	34000014	 cbz         w20,|$LN985@inflate|
  0151c	394002a8	 ldrb        w8,[x21]
  01520	51000694	 sub         w20,w20,#1
  01524	910006b5	 add         x21,x21,#1
  01528	1ad32108	 lsl         w8,w8,w19
  0152c	11002273	 add         w19,w19,#8
  01530	7100827f	 cmp         w19,#0x20
  01534	0b160116	 add         w22,w8,w22
  01538	54000003	 blo         |$LL321@inflate|
  0153c		 |$LN318@inflate|

; 1224 :                 if (hold != (state->total & 0xffffffffUL)) {

  0153c	b9402728	 ldr         w8,[x25,#0x24]
  01540	6b0802df	 cmp         w22,w8
  01544	54000000	 beq         |$LN328@inflate|

; 1225 :                     strm->msg = (char *)"incorrect length check";

  01548	90000008	 adrp        x8,|??_C@_0BH@FGKKJGOC@incorrect?5length?5check@|
  0154c	91000108	 add         x8,x8,PageOffset(|??_C@_0BH@FGKKJGOC@incorrect?5length?5check@|)
  01550	f9001348	 str         x8,[x26,#0x20]

; 1226 :                     state->mode = BAD;

  01554	b9000b27	 str         w7,[x25,#8]
  01558	17fffb0e	 b           |$LN8@inflate|
  0155c		 |$LN584@inflate|

; 844  :                 RESTORE();

  0155c	f9000b5b	 str         x27,[x26,#0x10]

; 845  :                 return Z_NEED_DICT;

  01560	52800040	 mov         w0,#2
  01564	b9001b58	 str         w24,[x26,#0x18]
  01568	f9000355	 str         x21,[x26]
  0156c	b9000b54	 str         w20,[x26,#8]
  01570	29094f36	 stp         w22,w19,[x25,#0x48]
  01574	14000045	 b           |$LN1@inflate|
  01578		 |$LN328@inflate|

; 1227 :                     break;
; 1228 :                 }
; 1229 :                 INITBITS();

  01578	52800016	 mov         w22,#0
  0157c	52800013	 mov         w19,#0
  01580		 |$LN327@inflate|

; 1230 :                 Tracev((stderr, "inflate:   length matches trailer\n"));
; 1231 :             }
; 1232 : #endif
; 1233 :             state->mode = DONE;

  01580	5287ea08	 mov         w8,#0x3F50
  01584	b9000b28	 str         w8,[x25,#8]
  01588		 |$LN496@inflate|

; 1234 :         case DONE:
; 1235 :             ret = Z_STREAM_END;

  01588	52800037	 mov         w23,#1

; 1236 :             goto inf_leave;

  0158c	17fffc23	 b           |$inf_leave$1037|
  01590		 |$LN497@inflate|

; 1237 :         case BAD:
; 1238 :             ret = Z_DATA_ERROR;

  01590	12800057	 mov         w23,#-3
  01594	17fffc21	 b           |$inf_leave$1037|
  01598		 |$LN503@inflate|

; 1259 :             return Z_MEM_ERROR;
; 1260 :         }
; 1261 :     in -= strm->avail_in;

  01598	b9400b48	 ldr         w8,[x26,#8]
  0159c	b9402fe9	 ldr         w9,[sp,#0x2C]

; 1262 :     out -= strm->avail_out;
; 1263 :     strm->total_in += in;
; 1264 :     strm->total_out += out;

  015a0	b9401f4a	 ldr         w10,[x26,#0x1C]
  015a4	4b080134	 sub         w20,w9,w8
  015a8	b9401b49	 ldr         w9,[x26,#0x18]
  015ac	b9400f48	 ldr         w8,[x26,#0xC]
  015b0	4b090273	 sub         w19,w19,w9
  015b4	0b080289	 add         w9,w20,w8
  015b8	0b130148	 add         w8,w10,w19
  015bc	b9000f49	 str         w9,[x26,#0xC]
  015c0	b9001f48	 str         w8,[x26,#0x1C]

; 1265 :     state->total += out;

  015c4	b9402729	 ldr         w9,[x25,#0x24]

; 1266 :     if ((state->wrap & 4) && out)

  015c8	b9401328	 ldr         w8,[x25,#0x10]
  015cc	0b13012a	 add         w10,w9,w19
  015d0	b900272a	 str         w10,[x25,#0x24]
  015d4	36100008	 tbz         x8,#2,|$LN504@inflate|
  015d8	34000013	 cbz         w19,|$LN504@inflate|

; 1267 :         strm->adler = state->check =

  015dc	f9400b48	 ldr         x8,[x26,#0x10]
  015e0	2a1303e2	 mov         w2,w19
  015e4	b9402320	 ldr         w0,[x25,#0x20]
  015e8	b9401b29	 ldr         w9,[x25,#0x18]
  015ec	cb334101	 sub         x1,x8,w19,uxtw #0
  015f0	34000009	 cbz         w9,|$LN513@inflate|
  015f4	94000000	 bl          crc32
  015f8	14000002	 b           |$LN514@inflate|
  015fc		 |$LN513@inflate|
  015fc	94000000	 bl          adler32
  01600		 |$LN514@inflate|
  01600	b9002320	 str         w0,[x25,#0x20]
  01604	b9004f40	 str         w0,[x26,#0x4C]
  01608		 |$LN504@inflate|

; 1268 :             UPDATE(state->check, strm->next_out - out, out);
; 1269 :     strm->data_type = (int)state->bits + (state->last ? 64 : 0) +

  01608	b9400b2a	 ldr         w10,[x25,#8]
  0160c	5287e8e8	 mov         w8,#0x3F47
  01610	6b08015f	 cmp         w10,w8
  01614	54000000	 beq         |$LN515@inflate|
  01618	5287e848	 mov         w8,#0x3F42
  0161c	6b08015f	 cmp         w10,w8
  01620	5280000b	 mov         w11,#0
  01624	54000001	 bne         |$LN516@inflate|
  01628		 |$LN515@inflate|
  01628	5280200b	 mov         w11,#0x100
  0162c		 |$LN516@inflate|
  0162c	b9400f28	 ldr         w8,[x25,#0xC]
  01630	52800809	 mov         w9,#0x40
  01634	5280100c	 mov         w12,#0x80
  01638	7100011f	 cmp         w8,#0
  0163c	5287e7e8	 mov         w8,#0x3F3F
  01640	1a9f1129	 cselne      w9,w9,wzr
  01644	6b08015f	 cmp         w10,w8
  01648	b9404f2a	 ldr         w10,[x25,#0x4C]
  0164c	1a9f0188	 cseleq      w8,w12,wzr
  01650	0b080129	 add         w9,w9,w8
  01654	0b0b012b	 add         w11,w9,w11
  01658	0b0a0168	 add         w8,w11,w10
  0165c	b9004b48	 str         w8,[x26,#0x48]

; 1270 :                       (state->mode == TYPE ? 128 : 0) +
; 1271 :                       (state->mode == LEN_ || state->mode == COPY_ ? 256 : 0);
; 1272 :     if (((in == 0 && out == 0) || flush == Z_FINISH) && ret == Z_OK)

  01660	35000014	 cbnz        w20,|$LN507@inflate|
  01664	34000013	 cbz         w19,|$LN506@inflate|
  01668		 |$LN507@inflate|
  01668	710012bf	 cmp         w21,#4
  0166c	54000001	 bne         |$LN505@inflate|
  01670		 |$LN506@inflate|
  01670	710002ff	 cmp         w23,#0
  01674	12800088	 mov         w8,#-5
  01678	1a970117	 cseleq      w23,w8,w23
  0167c		 |$LN505@inflate|

; 1273 :         ret = Z_BUF_ERROR;
; 1274 :     return ret;

  0167c	2a1703e0	 mov         w0,w23
  01680	14000002	 b           |$LN1@inflate|
  01684		 |$LN333@inflate|

; 646  :         (strm->next_in == Z_NULL && strm->avail_in != 0))
; 647  :         return Z_STREAM_ERROR;

  01684	12800020	 mov         w0,#-2
  01688		 |$LN1@inflate|
  01688	a8c57bfd	 ldp         fp,lr,[sp],#0x50
  0168c	f94023fb	 ldr         x27,[sp,#0x40]
  01690	a9436bf9	 ldp         x25,x26,[sp,#0x30]
  01694	a94263f7	 ldp         x23,x24,[sp,#0x20]
  01698	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  0169c	a8c553f3	 ldp         x19,x20,[sp],#0x50
  016a0	d65f03c0	 ret
  016a4		 |__swt|
  016a4		 |$LN999@inflate|

; 652  :     in = have;
; 653  :     out = left;
; 654  :     ret = Z_OK;
; 655  :     for (;;)
; 656  :         switch (state->mode) {

  016a4	fffffdbf	 DCD         0xfffffdbf
  016a8		 |$LN1000@inflate|
  016a8	fffffe2a	 DCD         0xfffffe2a
  016ac		 |$LN1001@inflate|
  016ac	fffffe59	 DCD         0xfffffe59
  016b0		 |$LN1002@inflate|
  016b0	fffffe7c	 DCD         0xfffffe7c
  016b4		 |$LN1003@inflate|
  016b4	fffffe9d	 DCD         0xfffffe9d
  016b8		 |$LN1004@inflate|
  016b8	fffffec2	 DCD         0xfffffec2
  016bc		 |$LN1005@inflate|
  016bc	fffffee8	 DCD         0xfffffee8
  016c0		 |$LN1006@inflate|
  016c0	ffffff2f	 DCD         0xffffff2f
  016c4		 |$LN1007@inflate|
  016c4	ffffff5a	 DCD         0xffffff5a
  016c8		 |$LN1008@inflate|
  016c8	ffffff82	 DCD         0xffffff82
  016cc		 |$LN1009@inflate|
  016cc	ffffff99	 DCD         0xffffff99
  016d0		 |$LN1010@inflate|
  016d0	ffffffa7	 DCD         0xffffffa7
  016d4		 |$LN1011@inflate|
  016d4	ffffffaa	 DCD         0xffffffaa
  016d8		 |$LN1012@inflate|
  016d8	ffffffe0	 DCD         0xffffffe0
  016dc		 |$LN1013@inflate|
  016dc	fffffffe	 DCD         0xfffffffe
  016e0		 |$LN1014@inflate|
  016e0	00000000	 DCD         0x0
  016e4		 |$LN1015@inflate|
  016e4	00000014	 DCD         0x14
  016e8		 |$LN1016@inflate|
  016e8	00000032	 DCD         0x32
  016ec		 |$LN1017@inflate|
  016ec	00000079	 DCD         0x79
  016f0		 |$LN1018@inflate|
  016f0	0000013e	 DCD         0x13e
  016f4		 |$LN1019@inflate|
  016f4	0000013f	 DCD         0x13f
  016f8		 |$LN1020@inflate|
  016f8	000001bd	 DCD         0x1bd
  016fc		 |$LN1021@inflate|
  016fc	000001da	 DCD         0x1da
  01700		 |$LN1022@inflate|
  01700	00000236	 DCD         0x236
  01704		 |$LN1023@inflate|
  01704	00000251	 DCD         0x251
  01708		 |$LN1024@inflate|
  01708	00000281	 DCD         0x281
  0170c		 |$LN1025@inflate|
  0170c	00000289	 DCD         0x289
  01710		 |$LN1026@inflate|
  01710	000002c4	 DCD         0x2c4
  01714		 |$LN1027@inflate|
  01714	000002e6	 DCD         0x2e6
  01718		 |$LN1028@inflate|
  01718	000002e8	 DCD         0x2e8
  0171c		 |$LN1029@inflate|
  0171c	ffffff27	 DCD         0xffffff27
  01720		 |__swt|
  01720		 |$LN1032@inflate|

; 860  :             switch (BITS(2)) {

  01720	fffffff4	 DCD         0xfffffff4
  01724		 |$LN1033@inflate|
  01724	fffffff8	 DCD         0xfffffff8
  01728		 |$LN1034@inflate|
  01728	00000000	 DCD         0x0
  0172c		 |$LN1035@inflate|
  0172c	00000005	 DCD         0x5

			 ENDP  ; |inflate|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflateEnd| PROC

; 1279 : {

  00000		 |$LN6|
  00000	f81f0ff3	 str         x19,[sp,#-0x10]!
  00004	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00008	910003fd	 mov         fp,sp
  0000c	aa0003f3	 mov         x19,x0

; 1280 :     struct inflate_state FAR *state;
; 1281 :     if (inflateStateCheck(strm))

  00010	94000000	 bl          inflateStateCheck
  00014	34000000	 cbz         w0,|$LN2@inflateEnd|

; 1282 :         return Z_STREAM_ERROR;

  00018	12800020	 mov         w0,#-2
  0001c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00020	f84107f3	 ldr         x19,[sp],#0x10
  00024	d65f03c0	 ret
  00028		 |$LN2@inflateEnd|

; 1283 :     state = (struct inflate_state FAR *)strm->state;

  00028	f9401661	 ldr         x1,[x19,#0x28]

; 1284 :     if (state->window != Z_NULL) ZFREE(strm, state->window);

  0002c	f9402028	 ldr         x8,[x1,#0x40]
  00030	b4000008	 cbz         x8,|$LN3@inflateEnd|
  00034	aa0803e1	 mov         x1,x8
  00038	a9438268	 ldp         x8,x0,[x19,#0x38]
  0003c	d63f0100	 blr         x8
  00040	f9401661	 ldr         x1,[x19,#0x28]
  00044		 |$LN3@inflateEnd|

; 1285 :     ZFREE(strm, strm->state);

  00044	a9438268	 ldp         x8,x0,[x19,#0x38]
  00048	d63f0100	 blr         x8

; 1286 :     strm->state = Z_NULL;

  0004c	f900167f	 str         xzr,[x19,#0x28]

; 1287 :     Tracev((stderr, "inflate: end\n"));
; 1288 :     return Z_OK;

  00050	52800000	 mov         w0,#0
  00054	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00058	f84107f3	 ldr         x19,[sp],#0x10
  0005c	d65f03c0	 ret

			 ENDP  ; |inflateEnd|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflateStateCheck| PROC

; 108  :     struct inflate_state FAR *state;
; 109  :     if (strm == Z_NULL ||
; 110  :         strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0)

  00000	b4000000	 cbz         x0,|$LN3@inflateSta|
  00004	f9401808	 ldr         x8,[x0,#0x30]
  00008	b4000008	 cbz         x8,|$LN3@inflateSta|
  0000c	f9401c08	 ldr         x8,[x0,#0x38]
  00010	b4000008	 cbz         x8,|$LN3@inflateSta|

; 112  :     state = (struct inflate_state FAR *)strm->state;

  00014	f9401409	 ldr         x9,[x0,#0x28]

; 113  :     if (state == Z_NULL || state->strm != strm ||
; 114  :         state->mode < HEAD || state->mode > SYNC)

  00018	b4000009	 cbz         x9,|$LN3@inflateSta|
  0001c	f9400128	 ldr         x8,[x9]
  00020	eb00011f	 cmp         x8,x0
  00024	54000001	 bne         |$LN3@inflateSta|
  00028	b9400928	 ldr         w8,[x9,#8]
  0002c	5287e68a	 mov         w10,#0x3F34

; 115  :         return 1;
; 116  :     return 0;

  00030	52800000	 mov         w0,#0
  00034	4b0a0108	 sub         w8,w8,w10
  00038	71007d1f	 cmp         w8,#0x1F
  0003c	54000009	 bls         |$LN1@inflateSta|
  00040		 |$LN3@inflateSta|

; 111  :         return 1;

  00040	52800020	 mov         w0,#1
  00044		 |$LN1@inflateSta|
  00044	d65f03c0	 ret

			 ENDP  ; |inflateStateCheck|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflateResetKeep| PROC

; 121  : {

  00000		 |$LN6|
  00000	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00004	910003fd	 mov         fp,sp
  00008	aa0003eb	 mov         x11,x0

; 122  :     struct inflate_state FAR *state;
; 123  : 
; 124  :     if (inflateStateCheck(strm)) return Z_STREAM_ERROR;

  0000c	94000000	 bl          inflateStateCheck
  00010	34000000	 cbz         w0,|$LN2@inflateRes|
  00014	12800020	 mov         w0,#-2
  00018	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0001c	d65f03c0	 ret
  00020		 |$LN2@inflateRes|

; 125  :     state = (struct inflate_state FAR *)strm->state;

  00020	f9401569	 ldr         x9,[x11,#0x28]

; 126  :     strm->total_in = strm->total_out = state->total = 0;

  00024	b900253f	 str         wzr,[x9,#0x24]
  00028	b9001d7f	 str         wzr,[x11,#0x1C]
  0002c	b9000d7f	 str         wzr,[x11,#0xC]

; 127  :     strm->msg = Z_NULL;

  00030	f900117f	 str         xzr,[x11,#0x20]

; 128  :     if (state->wrap)        /* to support ill-conceived Java test suite */

  00034	b9401128	 ldr         w8,[x9,#0x10]
  00038	34000008	 cbz         w8,|$LN3@inflateRes|

; 129  :         strm->adler = state->wrap & 1;

  0003c	12000108	 and         w8,w8,#1
  00040	b9004d68	 str         w8,[x11,#0x4C]
  00044		 |$LN3@inflateRes|

; 130  :     state->mode = HEAD;

  00044	5287e688	 mov         w8,#0x3F34
  00048	29017d28	 stp         w8,wzr,[x9,#8]

; 131  :     state->last = 0;
; 132  :     state->havedict = 0;
; 133  :     state->dmax = 32768U;

  0004c	52900008	 mov         w8,#0x8000
  00050	b900153f	 str         wzr,[x9,#0x14]
  00054	b9001d28	 str         w8,[x9,#0x1C]

; 134  :     state->head = Z_NULL;
; 135  :     state->hold = 0;
; 136  :     state->bits = 0;
; 137  :     state->lencode = state->distcode = state->next = state->codes;

  00058	91154128	 add         x8,x9,#0x550
  0005c	f9004528	 str         x8,[x9,#0x88]

; 138  :     state->sane = 1;

  00060	5280002a	 mov         w10,#1
  00064	a9062128	 stp         x8,x8,[x9,#0x60]

; 139  :     state->back = -1;

  00068	12800008	 mov         w8,#-1
  0006c	b91be528	 str         w8,[x9,#0x1BE4]

; 140  :     Tracev((stderr, "inflate: reset\n"));
; 141  :     return Z_OK;

  00070	52800000	 mov         w0,#0
  00074	f900153f	 str         xzr,[x9,#0x28]
  00078	f900253f	 str         xzr,[x9,#0x48]
  0007c	b91be12a	 str         w10,[x9,#0x1BE0]
  00080	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00084	d65f03c0	 ret

			 ENDP  ; |inflateResetKeep|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflateReset2| PROC

; 160  : {

  00000		 |$LN12|
  00000	a9be53f3	 stp         x19,x20,[sp,#-0x20]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  0000c	910003fd	 mov         fp,sp
  00010	aa0003f5	 mov         x21,x0
  00014	2a0103f3	 mov         w19,w1

; 161  :     int wrap;
; 162  :     struct inflate_state FAR *state;
; 163  : 
; 164  :     /* get the state */
; 165  :     if (inflateStateCheck(strm)) return Z_STREAM_ERROR;

  00018	94000000	 bl          inflateStateCheck
  0001c	35000000	 cbnz        w0,|$LN7@inflateRes|

; 166  :     state = (struct inflate_state FAR *)strm->state;

  00020	f94016b4	 ldr         x20,[x21,#0x28]

; 167  : 
; 168  :     /* extract wrap request from windowBits parameter */
; 169  :     if (windowBits < 0) {

  00024	36f80013	 tbz         x19,#0x1F,|$LN3@inflateRes|

; 170  :         wrap = 0;

  00028	52800016	 mov         w22,#0

; 171  :         windowBits = -windowBits;

  0002c	4b1303f3	 neg         w19,w19

; 172  :     }

  00030	14000006	 b           |$LN5@inflateRes|
  00034		 |$LN3@inflateRes|

; 173  :     else {
; 174  :         wrap = (windowBits >> 4) + 5;

  00034	53047e68	 lsr         w8,w19,#4
  00038	11001516	 add         w22,w8,#5

; 175  : #ifdef GUNZIP
; 176  :         if (windowBits < 48)

  0003c	7100c27f	 cmp         w19,#0x30
  00040	5400000a	 bge         |$LN5@inflateRes|

; 177  :             windowBits &= 15;

  00044	12000e73	 and         w19,w19,#0xF
  00048		 |$LN5@inflateRes|

; 178  : #endif
; 179  :     }
; 180  : 
; 181  :     /* set number of window bits, free window if different */
; 182  :     if (windowBits && (windowBits < 8 || windowBits > 15))

  00048	34000013	 cbz         w19,|$LN6@inflateRes|
  0004c	51002268	 sub         w8,w19,#8
  00050	71001d1f	 cmp         w8,#7
  00054	54000008	 bhi         |$LN7@inflateRes|
  00058		 |$LN6@inflateRes|

; 184  :     if (state->window != Z_NULL && state->wbits != (unsigned)windowBits) {

  00058	f9402281	 ldr         x1,[x20,#0x40]
  0005c	b4000001	 cbz         x1,|$LN8@inflateRes|
  00060	b9403288	 ldr         w8,[x20,#0x30]
  00064	6b13011f	 cmp         w8,w19
  00068	54000000	 beq         |$LN8@inflateRes|

; 185  :         ZFREE(strm, state->window);

  0006c	a94382a8	 ldp         x8,x0,[x21,#0x38]
  00070	d63f0100	 blr         x8

; 186  :         state->window = Z_NULL;

  00074	f900229f	 str         xzr,[x20,#0x40]
  00078		 |$LN8@inflateRes|

; 187  :     }
; 188  : 
; 189  :     /* update state and reset the rest of it */
; 190  :     state->wrap = wrap;
; 191  :     state->wbits = (unsigned)windowBits;
; 192  :     return inflateReset(strm);

  00078	aa1503e0	 mov         x0,x21
  0007c	b9001296	 str         w22,[x20,#0x10]
  00080	b9003293	 str         w19,[x20,#0x30]
  00084	94000000	 bl          inflateReset
  00088	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0008c	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00090	a8c253f3	 ldp         x19,x20,[sp],#0x20
  00094	d65f03c0	 ret
  00098		 |$LN7@inflateRes|

; 183  :         return Z_STREAM_ERROR;

  00098	12800020	 mov         w0,#-2
  0009c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000a0	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  000a4	a8c253f3	 ldp         x19,x20,[sp],#0x20
  000a8	d65f03c0	 ret

			 ENDP  ; |inflateReset2|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflateInit_| PROC

; 244  :     return inflateInit2_(strm, DEF_WBITS, version, stream_size);

  00000	2a0203e3	 mov         w3,w2
  00004	aa0103e2	 mov         x2,x1
  00008	528001e1	 mov         w1,#0xF
  0000c	14000000	 b           inflateInit2_

			 ENDP  ; |inflateInit_|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflatePrime| PROC

; 251  : {

  00000		 |$LN8|
  00000	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00004	910003fd	 mov         fp,sp
  00008	aa0003eb	 mov         x11,x0

; 252  :     struct inflate_state FAR *state;
; 253  : 
; 254  :     if (inflateStateCheck(strm)) return Z_STREAM_ERROR;

  0000c	94000000	 bl          inflateStateCheck
  00010	35000000	 cbnz        w0,|$LN5@inflatePri|

; 255  :     state = (struct inflate_state FAR *)strm->state;

  00014	f940156c	 ldr         x12,[x11,#0x28]

; 256  :     if (bits < 0) {

  00018	36f80001	 tbz         x1,#0x1F,|$LN3@inflatePri|

; 257  :         state->hold = 0;

  0001c	f900259f	 str         xzr,[x12,#0x48]

; 258  :         state->bits = 0;
; 259  :         return Z_OK;

  00020	52800000	 mov         w0,#0
  00024	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00028	d65f03c0	 ret
  0002c		 |$LN3@inflatePri|

; 260  :     }
; 261  :     if (bits > 16 || state->bits + (uInt)bits > 32) return Z_STREAM_ERROR;

  0002c	7100403f	 cmp         w1,#0x10
  00030	5400000c	 bgt         |$LN5@inflatePri|
  00034	b9404d8b	 ldr         w11,[x12,#0x4C]
  00038	0b01016d	 add         w13,w11,w1
  0003c	710081bf	 cmp         w13,#0x20
  00040	54000008	 bhi         |$LN5@inflatePri|

; 262  :     value &= (1L << bits) - 1;

  00044	52800028	 mov         w8,#1

; 263  :     state->hold += (unsigned)value << state->bits;
; 264  :     state->bits += (uInt)bits;

  00048	b9004d8d	 str         w13,[x12,#0x4C]
  0004c	1ac12108	 lsl         w8,w8,w1
  00050	51000509	 sub         w9,w8,#1
  00054	b9404988	 ldr         w8,[x12,#0x48]
  00058	0a02012a	 and         w10,w9,w2
  0005c	1acb214b	 lsl         w11,w10,w11

; 265  :     return Z_OK;

  00060	52800000	 mov         w0,#0
  00064	0b080169	 add         w9,w11,w8
  00068	b9004989	 str         w9,[x12,#0x48]
  0006c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00070	d65f03c0	 ret
  00074		 |$LN5@inflatePri|

; 260  :     }
; 261  :     if (bits > 16 || state->bits + (uInt)bits > 32) return Z_STREAM_ERROR;

  00074	12800020	 mov         w0,#-2
  00078	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0007c	d65f03c0	 ret

			 ENDP  ; |inflatePrime|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |fixedtables| PROC

; 281  : #ifdef BUILDFIXED
; 282  :     static int virgin = 1;
; 283  :     static code *lenfix, *distfix;
; 284  :     static code fixed[544];
; 285  : 
; 286  :     /* build fixed huffman tables if first call (may not be thread safe) */
; 287  :     if (virgin) {
; 288  :         unsigned sym, bits;
; 289  :         static code *next;
; 290  : 
; 291  :         /* literal/length table */
; 292  :         sym = 0;
; 293  :         while (sym < 144) state->lens[sym++] = 8;
; 294  :         while (sym < 256) state->lens[sym++] = 9;
; 295  :         while (sym < 280) state->lens[sym++] = 7;
; 296  :         while (sym < 288) state->lens[sym++] = 8;
; 297  :         next = fixed;
; 298  :         lenfix = next;
; 299  :         bits = 9;
; 300  :         inflate_table(LENS, state->lens, 288, &(next), &(bits), state->work);
; 301  : 
; 302  :         /* distance table */
; 303  :         sym = 0;
; 304  :         while (sym < 32) state->lens[sym++] = 5;
; 305  :         distfix = next;
; 306  :         bits = 5;
; 307  :         inflate_table(DISTS, state->lens, 32, &(next), &(bits), state->work);
; 308  : 
; 309  :         /* do this just once */
; 310  :         virgin = 0;
; 311  :     }
; 312  : #else /* !BUILDFIXED */
; 313  : #   include "inffixed.h"
; 314  : #endif /* BUILDFIXED */
; 315  :     state->lencode = lenfix;

  00000	90000008	 adrp        x8,|?lenfix@?1??fixedtables@@9@9|
  00004	91000108	 add         x8,x8,PageOffset(|?lenfix@?1??fixedtables@@9@9|)

; 316  :     state->lenbits = 9;

  00008	52800129	 mov         w9,#9
  0000c	f9003008	 str         x8,[x0,#0x60]

; 317  :     state->distcode = distfix;

  00010	91200108	 add         x8,x8,#0x800
  00014	b9007009	 str         w9,[x0,#0x70]

; 318  :     state->distbits = 5;

  00018	528000a9	 mov         w9,#5
  0001c	f9003408	 str         x8,[x0,#0x68]
  00020	b9007409	 str         w9,[x0,#0x74]
  00024	d65f03c0	 ret

			 ENDP  ; |fixedtables|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |updatewindow| PROC

; 400  : {

  00000	a9be53f3	 stp         x19,x20,[sp,#-0x20]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  0000c	910003fd	 mov         fp,sp
  00010	aa0003e9	 mov         x9,x0

; 401  :     struct inflate_state FAR *state;
; 402  :     unsigned dist;
; 403  : 
; 404  :     state = (struct inflate_state FAR *)strm->state;

  00014	f9401533	 ldr         x19,[x9,#0x28]
  00018	aa0103f6	 mov         x22,x1
  0001c	2a0203f4	 mov         w20,w2

; 405  : 
; 406  :     /* if it hasn't been done already, allocate space for the window */
; 407  :     if (state->window == Z_NULL) {

  00020	f9402260	 ldr         x0,[x19,#0x40]
  00024	b5000000	 cbnz        x0,|$LN15@updatewind|

; 408  :         state->window = (unsigned char FAR *)

  00028	b9403268	 ldr         w8,[x19,#0x30]
  0002c	5280002a	 mov         w10,#1
  00030	f9402120	 ldr         x0,[x9,#0x40]
  00034	52800022	 mov         w2,#1
  00038	1ac82141	 lsl         w1,w10,w8
  0003c	f9401928	 ldr         x8,[x9,#0x30]
  00040	d63f0100	 blr         x8
  00044	f9002260	 str         x0,[x19,#0x40]

; 409  :                         ZALLOC(strm, 1U << state->wbits,
; 410  :                                sizeof(unsigned char));
; 411  :         if (state->window == Z_NULL) return 1;

  00048	b5000000	 cbnz        x0,|$LN15@updatewind|
  0004c	52800020	 mov         w0,#1
  00050	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00054	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00058	a8c253f3	 ldp         x19,x20,[sp],#0x20
  0005c	d65f03c0	 ret
  00060		 |$LN15@updatewind|

; 412  :     }
; 413  : 
; 414  :     /* if window not in use yet, initialize */
; 415  :     if (state->wsize == 0) {

  00060	b9403668	 ldr         w8,[x19,#0x34]
  00064	35000008	 cbnz        w8,|$LN14@updatewind|

; 416  :         state->wsize = 1U << state->wbits;

  00068	b9403268	 ldr         w8,[x19,#0x30]
  0006c	52800029	 mov         w9,#1

; 417  :         state->wnext = 0;
; 418  :         state->whave = 0;

  00070	29077e7f	 stp         wzr,wzr,[x19,#0x38]
  00074	1ac82128	 lsl         w8,w9,w8
  00078	b9003668	 str         w8,[x19,#0x34]
  0007c		 |$LN14@updatewind|

; 419  :     }
; 420  : 
; 421  :     /* copy state->wsize or less output bytes into the circular window */
; 422  :     if (copy >= state->wsize) {

  0007c	6b08029f	 cmp         w20,w8
  00080	54000003	 blo         |$LN5@updatewind|

; 423  :         zmemcpy(state->window, end - state->wsize, state->wsize);

  00084	cb2842c1	 sub         x1,x22,w8,uxtw #0
  00088	d3407d02	 uxtw        x2,w8
  0008c	94000000	 bl          memcpy

; 424  :         state->wnext = 0;
; 425  :         state->whave = state->wsize;

  00090	b9403668	 ldr         w8,[x19,#0x34]
  00094	b9003e7f	 str         wzr,[x19,#0x3C]

; 426  :     }

  00098	14000022	 b           |$LN16@updatewind|
  0009c		 |$LN5@updatewind|

; 427  :     else {
; 428  :         dist = state->wsize - state->wnext;

  0009c	6b08029f	 cmp         w20,w8
  000a0	1a9f3294	 csello      w20,w20,wzr
  000a4	d503229f	 csdb
  000a8	b9403e6a	 ldr         w10,[x19,#0x3C]
  000ac	b9403668	 ldr         w8,[x19,#0x34]

; 429  :         if (dist > copy) dist = copy;
; 430  :         zmemcpy(state->window + state->wnext, end - copy, dist);

  000b0	cb3442c1	 sub         x1,x22,w20,uxtw #0
  000b4	4b0a0109	 sub         w9,w8,w10
  000b8	f9402268	 ldr         x8,[x19,#0x40]
  000bc	6b14013f	 cmp         w9,w20
  000c0	1a898295	 cselhi      w21,w20,w9
  000c4	aa1503e2	 mov         x2,x21
  000c8	8b2a4100	 add         x0,x8,w10,uxtw #0
  000cc	94000000	 bl          memcpy

; 431  :         copy -= dist;

  000d0	4b150294	 sub         w20,w20,w21

; 432  :         if (copy) {

  000d4	34000014	 cbz         w20,|$LN8@updatewind|

; 433  :             zmemcpy(state->window, end - copy, copy);

  000d8	f9402260	 ldr         x0,[x19,#0x40]
  000dc	cb3442c1	 sub         x1,x22,w20,uxtw #0
  000e0	aa1403e2	 mov         x2,x20
  000e4	94000000	 bl          memcpy

; 434  :             state->wnext = copy;
; 435  :             state->whave = state->wsize;

  000e8	b9403668	 ldr         w8,[x19,#0x34]
  000ec	b9003e74	 str         w20,[x19,#0x3C]

; 436  :         }

  000f0	1400000c	 b           |$LN16@updatewind|
  000f4		 |$LN8@updatewind|

; 437  :         else {
; 438  :             state->wnext += dist;
; 439  :             if (state->wnext == state->wsize) state->wnext = 0;
; 440  :             if (state->whave < state->wsize) state->whave += dist;

  000f4	2947226b	 ldp         w11,w8,[x19,#0x38]
  000f8	b940366a	 ldr         w10,[x19,#0x34]
  000fc	0b150109	 add         w9,w8,w21
  00100	b9003e69	 str         w9,[x19,#0x3C]
  00104	b9403e68	 ldr         w8,[x19,#0x3C]
  00108	6b0a013f	 cmp         w9,w10
  0010c	1a8803e9	 cseleq      w9,wzr,w8
  00110	b9003e69	 str         w9,[x19,#0x3C]
  00114	6b0a017f	 cmp         w11,w10
  00118	54000002	 bhs         |$LN11@updatewind|
  0011c	0b150168	 add         w8,w11,w21
  00120		 |$LN16@updatewind|

; 441  :         }
; 442  :     }
; 443  :     return 0;

  00120	b9003a68	 str         w8,[x19,#0x38]
  00124		 |$LN11@updatewind|
  00124	52800000	 mov         w0,#0
  00128	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0012c	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00130	a8c253f3	 ldp         x19,x20,[sp],#0x20
  00134	d65f03c0	 ret

			 ENDP  ; |updatewindow|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflateGetDictionary| PROC

; 1295 : {

  00000		 |$LN7|
  00000	a9be53f3	 stp         x19,x20,[sp,#-0x20]!
  00004	f9000bf5	 str         x21,[sp,#0x10]
  00008	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  0000c	910003fd	 mov         fp,sp
  00010	aa0003eb	 mov         x11,x0
  00014	aa0103f5	 mov         x21,x1
  00018	aa0203f4	 mov         x20,x2

; 1296 :     struct inflate_state FAR *state;
; 1297 : 
; 1298 :     /* check state */
; 1299 :     if (inflateStateCheck(strm)) return Z_STREAM_ERROR;

  0001c	94000000	 bl          inflateStateCheck
  00020	34000000	 cbz         w0,|$LN2@inflateGet|
  00024	12800020	 mov         w0,#-2
  00028	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0002c	f9400bf5	 ldr         x21,[sp,#0x10]
  00030	a8c253f3	 ldp         x19,x20,[sp],#0x20
  00034	d65f03c0	 ret
  00038		 |$LN2@inflateGet|

; 1300 :     state = (struct inflate_state FAR *)strm->state;

  00038	f9401573	 ldr         x19,[x11,#0x28]

; 1301 : 
; 1302 :     /* copy dictionary */
; 1303 :     if (state->whave && dictionary != Z_NULL) {

  0003c	b9403a68	 ldr         w8,[x19,#0x38]
  00040	34000008	 cbz         w8,|$LN3@inflateGet|
  00044	b4000015	 cbz         x21,|$LN3@inflateGet|

; 1304 :         zmemcpy(dictionary, state->window + state->wnext,

  00048	b9403e6a	 ldr         w10,[x19,#0x3C]
  0004c	aa1503e0	 mov         x0,x21
  00050	f9402269	 ldr         x9,[x19,#0x40]
  00054	4b0a0102	 sub         w2,w8,w10
  00058	8b2a4121	 add         x1,x9,w10,uxtw #0
  0005c	94000000	 bl          memcpy

; 1305 :                 state->whave - state->wnext);
; 1306 :         zmemcpy(dictionary + state->whave - state->wnext,

  00060	29472a68	 ldp         w8,w10,[x19,#0x38]
  00064	f9402261	 ldr         x1,[x19,#0x40]
  00068	cb2a4109	 sub         x9,x8,w10,uxtw #0
  0006c	aa0a03e2	 mov         x2,x10
  00070	8b150120	 add         x0,x9,x21
  00074	94000000	 bl          memcpy
  00078		 |$LN3@inflateGet|

; 1307 :                 state->window, state->wnext);
; 1308 :     }
; 1309 :     if (dictLength != Z_NULL)

  00078	b4000014	 cbz         x20,|$LN4@inflateGet|

; 1310 :         *dictLength = state->whave;

  0007c	b9403a68	 ldr         w8,[x19,#0x38]
  00080	b9000288	 str         w8,[x20]
  00084		 |$LN4@inflateGet|

; 1311 :     return Z_OK;

  00084	52800000	 mov         w0,#0
  00088	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0008c	f9400bf5	 ldr         x21,[sp,#0x10]
  00090	a8c253f3	 ldp         x19,x20,[sp],#0x20
  00094	d65f03c0	 ret

			 ENDP  ; |inflateGetDictionary|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflateSetDictionary| PROC

; 1318 : {

  00000		 |$LN12|
  00000	a9be53f3	 stp         x19,x20,[sp,#-0x20]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  0000c	910003fd	 mov         fp,sp
  00010	aa0003f4	 mov         x20,x0
  00014	aa0103f6	 mov         x22,x1
  00018	2a0203f5	 mov         w21,w2

; 1319 :     struct inflate_state FAR *state;
; 1320 :     unsigned long dictid;
; 1321 :     int ret;
; 1322 : 
; 1323 :     /* check state */
; 1324 :     if (inflateStateCheck(strm)) return Z_STREAM_ERROR;

  0001c	94000000	 bl          inflateStateCheck
  00020	35000000	 cbnz        w0,|$LN10@inflateSet|

; 1325 :     state = (struct inflate_state FAR *)strm->state;

  00024	f9401693	 ldr         x19,[x20,#0x28]

; 1326 :     if (state->wrap != 0 && state->mode != DICT)

  00028	b9401268	 ldr         w8,[x19,#0x10]
  0002c	34000008	 cbz         w8,|$LN9@inflateSet|
  00030	b9400a68	 ldr         w8,[x19,#8]
  00034	5287e7c9	 mov         w9,#0x3F3E
  00038	6b09011f	 cmp         w8,w9
  0003c	54000001	 bne         |$LN10@inflateSet|
  00040		 |$LN9@inflateSet|

; 1328 : 
; 1329 :     /* check for correct dictionary identifier */
; 1330 :     if (state->mode == DICT) {

  00040	b9400a68	 ldr         w8,[x19,#8]
  00044	5287e7c9	 mov         w9,#0x3F3E
  00048	6b09011f	 cmp         w8,w9
  0004c	54000001	 bne         |$LN5@inflateSet|

; 1331 :         dictid = adler32(0L, Z_NULL, 0);

  00050	52800002	 mov         w2,#0
  00054	d2800001	 mov         x1,#0
  00058	52800000	 mov         w0,#0
  0005c	94000000	 bl          adler32

; 1332 :         dictid = adler32(dictid, dictionary, dictLength);

  00060	2a1503e2	 mov         w2,w21
  00064	aa1603e1	 mov         x1,x22
  00068	94000000	 bl          adler32

; 1333 :         if (dictid != state->check)

  0006c	b9402268	 ldr         w8,[x19,#0x20]
  00070	6b08001f	 cmp         w0,w8
  00074	54000000	 beq         |$LN5@inflateSet|

; 1334 :             return Z_DATA_ERROR;

  00078	12800040	 mov         w0,#-3
  0007c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00080	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00084	a8c253f3	 ldp         x19,x20,[sp],#0x20
  00088	d65f03c0	 ret
  0008c		 |$LN5@inflateSet|

; 1335 :     }
; 1336 : 
; 1337 :     /* copy dictionary to window using updatewindow(), which will amend the
; 1338 :        existing dictionary if appropriate */
; 1339 :     ret = updatewindow(strm, dictionary + dictLength, dictLength);

  0008c	8b3542c1	 add         x1,x22,w21,uxtw #0
  00090	2a1503e2	 mov         w2,w21
  00094	aa1403e0	 mov         x0,x20
  00098	94000000	 bl          updatewindow

; 1340 :     if (ret) {

  0009c	34000000	 cbz         w0,|$LN6@inflateSet|

; 1341 :         state->mode = MEM;

  000a0	5287ea48	 mov         w8,#0x3F52
  000a4	b9000a68	 str         w8,[x19,#8]

; 1342 :         return Z_MEM_ERROR;

  000a8	12800060	 mov         w0,#-4
  000ac	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000b0	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  000b4	a8c253f3	 ldp         x19,x20,[sp],#0x20
  000b8	d65f03c0	 ret
  000bc		 |$LN6@inflateSet|

; 1343 :     }
; 1344 :     state->havedict = 1;

  000bc	52800028	 mov         w8,#1
  000c0	b9001668	 str         w8,[x19,#0x14]

; 1345 :     Tracev((stderr, "inflate:   dictionary set\n"));
; 1346 :     return Z_OK;

  000c4	52800000	 mov         w0,#0
  000c8	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000cc	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  000d0	a8c253f3	 ldp         x19,x20,[sp],#0x20
  000d4	d65f03c0	 ret
  000d8		 |$LN10@inflateSet|

; 1327 :         return Z_STREAM_ERROR;

  000d8	12800020	 mov         w0,#-2
  000dc	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000e0	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  000e4	a8c253f3	 ldp         x19,x20,[sp],#0x20
  000e8	d65f03c0	 ret

			 ENDP  ; |inflateSetDictionary|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflateGetHeader| PROC

; 1352 : {

  00000		 |$LN7|
  00000	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00004	910003fd	 mov         fp,sp
  00008	aa0003eb	 mov         x11,x0

; 1353 :     struct inflate_state FAR *state;
; 1354 : 
; 1355 :     /* check state */
; 1356 :     if (inflateStateCheck(strm)) return Z_STREAM_ERROR;

  0000c	94000000	 bl          inflateStateCheck
  00010	35000000	 cbnz        w0,|$LN5@inflateGet|

; 1357 :     state = (struct inflate_state FAR *)strm->state;

  00014	f9401569	 ldr         x9,[x11,#0x28]

; 1358 :     if ((state->wrap & 2) == 0) return Z_STREAM_ERROR;

  00018	b9401128	 ldr         w8,[x9,#0x10]
  0001c	36080008	 tbz         x8,#1,|$LN5@inflateGet|

; 1359 : 
; 1360 :     /* save header structure */
; 1361 :     state->head = head;

  00020	f9001521	 str         x1,[x9,#0x28]

; 1362 :     head->done = 0;
; 1363 :     return Z_OK;

  00024	52800000	 mov         w0,#0
  00028	b900403f	 str         wzr,[x1,#0x40]
  0002c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00030	d65f03c0	 ret
  00034		 |$LN5@inflateGet|

; 1358 :     if ((state->wrap & 2) == 0) return Z_STREAM_ERROR;

  00034	12800020	 mov         w0,#-2
  00038	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0003c	d65f03c0	 ret

			 ENDP  ; |inflateGetHeader|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |syncsearch| PROC

; 1381 : {

  00000	aa0003eb	 mov         x11,x0

; 1382 :     unsigned got;
; 1383 :     unsigned next;
; 1384 : 
; 1385 :     got = *have;

  00004	b9400169	 ldr         w9,[x11]

; 1386 :     next = 0;

  00008	52800000	 mov         w0,#0

; 1387 :     while (next < len && got < 4) {

  0000c	34000002	 cbz         w2,|$LN3@syncsearch|
  00010	52801fec	 mov         w12,#0xFF
  00014	5280008d	 mov         w13,#4
  00018		 |$LL2@syncsearch|
  00018	7100113f	 cmp         w9,#4
  0001c	54000002	 bhs         |$LN3@syncsearch|

; 1388 :         if ((int)(buf[next]) == (got < 2 ? 0 : 0xff))

  00020	3860482a	 ldrb        w10,[x1,w0 uxtw #0]
  00024	7100093f	 cmp         w9,#2
  00028	1a8c33e8	 csello      w8,wzr,w12
  0002c	6b08015f	 cmp         w10,w8
  00030	54000001	 bne         |$LN4@syncsearch|

; 1389 :             got++;

  00034	11000529	 add         w9,w9,#1
  00038	14000004	 b           |$LN7@syncsearch|
  0003c		 |$LN4@syncsearch|

; 1390 :         else if (buf[next])
; 1391 :             got = 0;
; 1392 :         else
; 1393 :             got = 4 - got;

  0003c	4b0901a9	 sub         w9,w13,w9
  00040	7100015f	 cmp         w10,#0
  00044	1a9f0129	 cseleq      w9,w9,wzr
  00048		 |$LN7@syncsearch|

; 1394 :         next++;

  00048	11000400	 add         w0,w0,#1
  0004c	6b02001f	 cmp         w0,w2
  00050	54000003	 blo         |$LL2@syncsearch|
  00054		 |$LN3@syncsearch|

; 1395 :     }
; 1396 :     *have = got;

  00054	b9000169	 str         w9,[x11]
  00058	d65f03c0	 ret

			 ENDP  ; |syncsearch|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflateSync| PROC

; 1402 : {

  00000		 |$LN17|
  00000	a9be53f3	 stp         x19,x20,[sp,#-0x20]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	a9be7bfd	 stp         fp,lr,[sp,#-0x20]!
  0000c	910003fd	 mov         fp,sp
  00010	aa0003f5	 mov         x21,x0

; 1403 :     unsigned len;               /* number of bytes to look at or looked at */
; 1404 :     unsigned long in, out;      /* temporary to save total_in and total_out */
; 1405 :     unsigned char buf[4];       /* to restore bit buffer to byte string */
; 1406 :     struct inflate_state FAR *state;
; 1407 : 
; 1408 :     /* check parameters */
; 1409 :     if (inflateStateCheck(strm)) return Z_STREAM_ERROR;

  00014	94000000	 bl          inflateStateCheck
  00018	34000000	 cbz         w0,|$LN4@inflateSyn|
  0001c	12800020	 mov         w0,#-2
  00020	a8c27bfd	 ldp         fp,lr,[sp],#0x20
  00024	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00028	a8c253f3	 ldp         x19,x20,[sp],#0x20
  0002c	d65f03c0	 ret
  00030		 |$LN4@inflateSyn|

; 1410 :     state = (struct inflate_state FAR *)strm->state;

  00030	f94016b4	 ldr         x20,[x21,#0x28]

; 1411 :     if (strm->avail_in == 0 && state->bits < 8) return Z_BUF_ERROR;

  00034	b9400aa2	 ldr         w2,[x21,#8]
  00038	35000002	 cbnz        w2,|$LN15@inflateSyn|
  0003c	b9404e88	 ldr         w8,[x20,#0x4C]
  00040	7100211f	 cmp         w8,#8
  00044	54000002	 bhs         |$LN15@inflateSyn|
  00048	12800080	 mov         w0,#-5
  0004c	a8c27bfd	 ldp         fp,lr,[sp],#0x20
  00050	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00054	a8c253f3	 ldp         x19,x20,[sp],#0x20
  00058	d65f03c0	 ret
  0005c		 |$LN15@inflateSyn|

; 1412 : 
; 1413 :     /* if first time, start search in bit buffer */
; 1414 :     if (state->mode != SYNC) {

  0005c	b9400a88	 ldr         w8,[x20,#8]
  00060	5287ea69	 mov         w9,#0x3F53
  00064	6b09011f	 cmp         w8,w9
  00068	54000000	 beq         |$LN13@inflateSyn|

; 1415 :         state->mode = SYNC;

  0006c	5287ea68	 mov         w8,#0x3F53

; 1416 :         state->hold <<= state->bits & 7;

  00070	b9404e8a	 ldr         w10,[x20,#0x4C]
  00074	b9000a88	 str         w8,[x20,#8]
  00078	b9404a88	 ldr         w8,[x20,#0x48]

; 1417 :         state->bits -= state->bits & 7;
; 1418 :         len = 0;

  0007c	52800002	 mov         w2,#0
  00080	12000949	 and         w9,w10,#7
  00084	4b09014c	 sub         w12,w10,w9
  00088	1ac9210b	 lsl         w11,w8,w9
  0008c	2909328b	 stp         w11,w12,[x20,#0x48]

; 1419 :         while (state->bits >= 8) {

  00090	7100219f	 cmp         w12,#8
  00094	54000003	 blo         |$LN3@inflateSyn|
  00098	910043e9	 add         x9,sp,#0x10
  0009c		 |$LL2@inflateSyn|

; 1420 :             buf[len++] = (unsigned char)(state->hold);
; 1421 :             state->hold >>= 8;
; 1422 :             state->bits -= 8;

  0009c	51002188	 sub         w8,w12,#8
  000a0	3822492b	 strb        w11,[x9,w2 uxtw #0]
  000a4	2a0803ec	 mov         w12,w8
  000a8	7100211f	 cmp         w8,#8
  000ac	11000442	 add         w2,w2,#1
  000b0	53087d6b	 lsr         w11,w11,#8
  000b4	54000002	 bhs         |$LL2@inflateSyn|
  000b8	2909328b	 stp         w11,w12,[x20,#0x48]
  000bc		 |$LN3@inflateSyn|

; 1423 :         }
; 1424 :         state->have = 0;

  000bc	9102128f	 add         x15,x20,#0x84

; 1425 :         syncsearch(&(state->have), buf, len);

  000c0	aa0f03e0	 mov         x0,x15
  000c4	b90001ff	 str         wzr,[x15]
  000c8	910043e1	 add         x1,sp,#0x10
  000cc	94000000	 bl          syncsearch
  000d0	b9400aa2	 ldr         w2,[x21,#8]
  000d4	14000002	 b           |$LN6@inflateSyn|
  000d8		 |$LN13@inflateSyn|
  000d8	9102128f	 add         x15,x20,#0x84
  000dc		 |$LN6@inflateSyn|

; 1426 :     }
; 1427 : 
; 1428 :     /* search available input */
; 1429 :     len = syncsearch(&(state->have), strm->next_in, strm->avail_in);

  000dc	f94002a1	 ldr         x1,[x21]
  000e0	aa0f03e0	 mov         x0,x15
  000e4	94000000	 bl          syncsearch

; 1430 :     strm->avail_in -= len;

  000e8	b9400aae	 ldr         w14,[x21,#8]

; 1431 :     strm->next_in += len;

  000ec	f94002a9	 ldr         x9,[x21]
  000f0	4b0001c8	 sub         w8,w14,w0
  000f4	b9000aa8	 str         w8,[x21,#8]

; 1432 :     strm->total_in += len;

  000f8	b9400ea8	 ldr         w8,[x21,#0xC]
  000fc	8b20412a	 add         x10,x9,w0,uxtw #0
  00100	f90002aa	 str         x10,[x21]
  00104	0b080016	 add         w22,w0,w8
  00108	b9000eb6	 str         w22,[x21,#0xC]

; 1433 : 
; 1434 :     /* return no joy or set up to restart inflate() on a new block */
; 1435 :     if (state->have != 4) return Z_DATA_ERROR;

  0010c	b94001e8	 ldr         w8,[x15]
  00110	7100111f	 cmp         w8,#4
  00114	54000000	 beq         |$LN7@inflateSyn|
  00118	12800040	 mov         w0,#-3
  0011c	a8c27bfd	 ldp         fp,lr,[sp],#0x20
  00120	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00124	a8c253f3	 ldp         x19,x20,[sp],#0x20
  00128	d65f03c0	 ret
  0012c		 |$LN7@inflateSyn|

; 1436 :     in = strm->total_in;  out = strm->total_out;
; 1437 :     inflateReset(strm);

  0012c	aa1503e0	 mov         x0,x21
  00130	b9401eb3	 ldr         w19,[x21,#0x1C]
  00134	94000000	 bl          inflateReset

; 1438 :     strm->total_in = in;  strm->total_out = out;
; 1439 :     state->mode = TYPE;

  00138	5287e7e8	 mov         w8,#0x3F3F
  0013c	b9000eb6	 str         w22,[x21,#0xC]
  00140	b9001eb3	 str         w19,[x21,#0x1C]

; 1440 :     return Z_OK;

  00144	52800000	 mov         w0,#0
  00148	b9000a88	 str         w8,[x20,#8]
  0014c	a8c27bfd	 ldp         fp,lr,[sp],#0x20
  00150	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00154	a8c253f3	 ldp         x19,x20,[sp],#0x20
  00158	d65f03c0	 ret

			 ENDP  ; |inflateSync|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflateSyncPoint| PROC

; 1453 : {

  00000		 |$LN7|
  00000	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00004	910003fd	 mov         fp,sp
  00008	aa0003eb	 mov         x11,x0

; 1454 :     struct inflate_state FAR *state;
; 1455 : 
; 1456 :     if (inflateStateCheck(strm)) return Z_STREAM_ERROR;

  0000c	94000000	 bl          inflateStateCheck
  00010	34000000	 cbz         w0,|$LN2@inflateSyn|
  00014	12800020	 mov         w0,#-2
  00018	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0001c	d65f03c0	 ret
  00020		 |$LN2@inflateSyn|

; 1457 :     state = (struct inflate_state FAR *)strm->state;

  00020	f9401569	 ldr         x9,[x11,#0x28]

; 1458 :     return state->mode == STORED && state->bits == 0;

  00024	5287e82a	 mov         w10,#0x3F41
  00028	b9400928	 ldr         w8,[x9,#8]
  0002c	6b0a011f	 cmp         w8,w10
  00030	54000001	 bne         |$LN4@inflateSyn|
  00034	b9404d28	 ldr         w8,[x9,#0x4C]
  00038	35000008	 cbnz        w8,|$LN4@inflateSyn|
  0003c	52800020	 mov         w0,#1
  00040	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00044	d65f03c0	 ret
  00048		 |$LN4@inflateSyn|
  00048	52800000	 mov         w0,#0
  0004c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00050	d65f03c0	 ret

			 ENDP  ; |inflateSyncPoint|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflateCopy| PROC

; 1464 : {

  00000		 |$LN14|
  00000	a9bd53f3	 stp         x19,x20,[sp,#-0x30]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	f90013f7	 str         x23,[sp,#0x20]
  0000c	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00010	910003fd	 mov         fp,sp
  00014	aa0103f5	 mov         x21,x1
  00018	aa0003f7	 mov         x23,x0

; 1465 :     struct inflate_state FAR *state;
; 1466 :     struct inflate_state FAR *copy;
; 1467 :     unsigned char FAR *window;
; 1468 :     unsigned wsize;
; 1469 : 
; 1470 :     /* check input */
; 1471 :     if (inflateStateCheck(source) || dest == Z_NULL)

  0001c	aa1503e0	 mov         x0,x21
  00020	94000000	 bl          inflateStateCheck
  00024	35000000	 cbnz        w0,|$LN3@inflateCop|
  00028	b4000017	 cbz         x23,|$LN3@inflateCop|

; 1473 :     state = (struct inflate_state FAR *)source->state;
; 1474 : 
; 1475 :     /* allocate space */
; 1476 :     copy = (struct inflate_state FAR *)

  0002c	f94022a0	 ldr         x0,[x21,#0x40]
  00030	52837e02	 mov         w2,#0x1BF0
  00034	a942a2b4	 ldp         x20,x8,[x21,#0x28]
  00038	52800021	 mov         w1,#1
  0003c	d63f0100	 blr         x8
  00040	aa0003f3	 mov         x19,x0

; 1477 :            ZALLOC(source, 1, sizeof(struct inflate_state));
; 1478 :     if (copy == Z_NULL) return Z_MEM_ERROR;

  00044	b4000013	 cbz         x19,|$LN12@inflateCop|

; 1479 :     window = Z_NULL;
; 1480 :     if (state->window != Z_NULL) {

  00048	f9402288	 ldr         x8,[x20,#0x40]
  0004c	d2800016	 mov         x22,#0
  00050	b4000008	 cbz         x8,|$LN11@inflateCop|

; 1481 :         window = (unsigned char FAR *)

  00054	b9403288	 ldr         w8,[x20,#0x30]
  00058	52800029	 mov         w9,#1
  0005c	f94022a0	 ldr         x0,[x21,#0x40]
  00060	52800022	 mov         w2,#1
  00064	1ac82121	 lsl         w1,w9,w8
  00068	f9401aa8	 ldr         x8,[x21,#0x30]
  0006c	d63f0100	 blr         x8
  00070	aa0003f6	 mov         x22,x0

; 1482 :                  ZALLOC(source, 1U << state->wbits, sizeof(unsigned char));
; 1483 :         if (window == Z_NULL) {

  00074	b5000016	 cbnz        x22,|$LN11@inflateCop|

; 1484 :             ZFREE(source, copy);

  00078	a94382a8	 ldp         x8,x0,[x21,#0x38]
  0007c	aa1303e1	 mov         x1,x19
  00080	d63f0100	 blr         x8
  00084		 |$LN12@inflateCop|

; 1506 : }

  00084	12800060	 mov         w0,#-4
  00088	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0008c	f94013f7	 ldr         x23,[sp,#0x20]
  00090	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00094	a8c353f3	 ldp         x19,x20,[sp],#0x30
  00098	d65f03c0	 ret
  0009c		 |$LN11@inflateCop|

; 1485 :             return Z_MEM_ERROR;
; 1486 :         }
; 1487 :     }
; 1488 : 
; 1489 :     /* copy state */
; 1490 :     zmemcpy((voidpf)dest, (voidpf)source, sizeof(z_stream));

  0009c	a94026a8	 ldp         x8,x9,[x21]

; 1491 :     zmemcpy((voidpf)copy, (voidpf)state, sizeof(struct inflate_state));

  000a0	d2837e02	 mov         x2,#0x1BF0
  000a4	aa1403e1	 mov         x1,x20
  000a8	aa1303e0	 mov         x0,x19
  000ac	a90026e8	 stp         x8,x9,[x23]
  000b0	a9412eaa	 ldp         x10,x11,[x21,#0x10]
  000b4	a9012eea	 stp         x10,x11,[x23,#0x10]
  000b8	a94226a8	 ldp         x8,x9,[x21,#0x20]
  000bc	a90226e8	 stp         x8,x9,[x23,#0x20]
  000c0	a9432eaa	 ldp         x10,x11,[x21,#0x30]
  000c4	a9032eea	 stp         x10,x11,[x23,#0x30]
  000c8	a94426a8	 ldp         x8,x9,[x21,#0x40]
  000cc	a90426e8	 stp         x8,x9,[x23,#0x40]
  000d0	f9402aaa	 ldr         x10,[x21,#0x50]
  000d4	f9002aea	 str         x10,[x23,#0x50]
  000d8	94000000	 bl          memcpy

; 1492 :     copy->strm = dest;
; 1493 :     if (state->lencode >= state->codes &&

  000dc	91154288	 add         x8,x20,#0x550
  000e0	f9000277	 str         x23,[x19]
  000e4	f9403289	 ldr         x9,[x20,#0x60]
  000e8	eb08013f	 cmp         x9,x8
  000ec	54000003	 blo         |$LN7@inflateCop|
  000f0	d2837b88	 mov         x8,#0x1BDC
  000f4	8b080288	 add         x8,x20,x8
  000f8	eb08013f	 cmp         x9,x8
  000fc	54000008	 bhi         |$LN7@inflateCop|

; 1494 :         state->lencode <= state->codes + ENOUGH - 1) {
; 1495 :         copy->lencode = copy->codes + (state->lencode - state->codes);

  00100	cb140128	 sub         x8,x9,x20
  00104	d1154109	 sub         x9,x8,#0x550
  00108	9342fd2a	 asr         x10,x9,#2
  0010c	9105514b	 add         x11,x10,#0x154
  00110	8b0b0a68	 add         x8,x19,x11,lsl #2
  00114	f9003268	 str         x8,[x19,#0x60]

; 1496 :         copy->distcode = copy->codes + (state->distcode - state->codes);

  00118	f9403689	 ldr         x9,[x20,#0x68]
  0011c	cb14012a	 sub         x10,x9,x20
  00120	d1154148	 sub         x8,x10,#0x550
  00124	9342fd0b	 asr         x11,x8,#2
  00128	91055169	 add         x9,x11,#0x154
  0012c	8b090a6a	 add         x10,x19,x9,lsl #2
  00130	f900366a	 str         x10,[x19,#0x68]
  00134		 |$LN7@inflateCop|

; 1497 :     }
; 1498 :     copy->next = copy->codes + (state->next - state->codes);

  00134	f9404688	 ldr         x8,[x20,#0x88]
  00138	cb140109	 sub         x9,x8,x20
  0013c	d115412a	 sub         x10,x9,#0x550
  00140	9342fd4b	 asr         x11,x10,#2
  00144	91055168	 add         x8,x11,#0x154
  00148	8b080a69	 add         x9,x19,x8,lsl #2
  0014c	f9004669	 str         x9,[x19,#0x88]

; 1499 :     if (window != Z_NULL) {

  00150	b4000016	 cbz         x22,|$LN8@inflateCop|

; 1500 :         wsize = 1U << state->wbits;

  00154	b9403288	 ldr         w8,[x20,#0x30]
  00158	52800029	 mov         w9,#1

; 1501 :         zmemcpy(window, state->window, wsize);

  0015c	f9402281	 ldr         x1,[x20,#0x40]
  00160	aa1603e0	 mov         x0,x22
  00164	1ac82122	 lsl         w2,w9,w8
  00168	94000000	 bl          memcpy
  0016c		 |$LN8@inflateCop|

; 1502 :     }
; 1503 :     copy->window = window;

  0016c	f9002276	 str         x22,[x19,#0x40]

; 1504 :     dest->state = (struct internal_state FAR *)copy;
; 1505 :     return Z_OK;

  00170	52800000	 mov         w0,#0
  00174	f90016f3	 str         x19,[x23,#0x28]
  00178	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0017c	f94013f7	 ldr         x23,[sp,#0x20]
  00180	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00184	a8c353f3	 ldp         x19,x20,[sp],#0x30
  00188	d65f03c0	 ret
  0018c		 |$LN3@inflateCop|

; 1472 :         return Z_STREAM_ERROR;

  0018c	12800020	 mov         w0,#-2
  00190	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00194	f94013f7	 ldr         x23,[sp,#0x20]
  00198	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  0019c	a8c353f3	 ldp         x19,x20,[sp],#0x30
  001a0	d65f03c0	 ret

			 ENDP  ; |inflateCopy|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflateUndermine| PROC

; 1511 : {

  00000		 |$LN5|
  00000	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00004	910003fd	 mov         fp,sp
  00008	aa0003eb	 mov         x11,x0

; 1512 :     struct inflate_state FAR *state;
; 1513 : 
; 1514 :     if (inflateStateCheck(strm)) return Z_STREAM_ERROR;

  0000c	94000000	 bl          inflateStateCheck
  00010	34000000	 cbz         w0,|$LN2@inflateUnd|
  00014	12800020	 mov         w0,#-2
  00018	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0001c	d65f03c0	 ret
  00020		 |$LN2@inflateUnd|

; 1515 :     state = (struct inflate_state FAR *)strm->state;
; 1516 : #ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
; 1517 :     state->sane = !subvert;
; 1518 :     return Z_OK;
; 1519 : #else
; 1520 :     (void)subvert;
; 1521 :     state->sane = 1;

  00020	f9401568	 ldr         x8,[x11,#0x28]
  00024	52800029	 mov         w9,#1

; 1522 :     return Z_DATA_ERROR;

  00028	12800040	 mov         w0,#-3
  0002c	b91be109	 str         w9,[x8,#0x1BE0]
  00030	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00034	d65f03c0	 ret

			 ENDP  ; |inflateUndermine|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflateValidate| PROC

; 1529 : {

  00000		 |$LN7|
  00000	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00004	910003fd	 mov         fp,sp
  00008	aa0003eb	 mov         x11,x0

; 1530 :     struct inflate_state FAR *state;
; 1531 : 
; 1532 :     if (inflateStateCheck(strm)) return Z_STREAM_ERROR;

  0000c	94000000	 bl          inflateStateCheck
  00010	34000000	 cbz         w0,|$LN2@inflateVal|
  00014	12800020	 mov         w0,#-2
  00018	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0001c	d65f03c0	 ret
  00020		 |$LN2@inflateVal|

; 1533 :     state = (struct inflate_state FAR *)strm->state;

  00020	f940156a	 ldr         x10,[x11,#0x28]

; 1534 :     if (check)
; 1535 :         state->wrap |= 4;
; 1536 :     else
; 1537 :         state->wrap &= ~4;
; 1538 :     return Z_OK;

  00024	7100003f	 cmp         w1,#0
  00028	52800000	 mov         w0,#0
  0002c	b9401148	 ldr         w8,[x10,#0x10]
  00030	121d7909	 and         w9,w8,#0xFFFFFFFB
  00034	321e0108	 orr         w8,w8,#4
  00038	1a880128	 cseleq      w8,w9,w8
  0003c	b9001148	 str         w8,[x10,#0x10]
  00040	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00044	d65f03c0	 ret

			 ENDP  ; |inflateValidate|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflateMark| PROC

; 1543 : {

  00000		 |$LN9|
  00000	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00004	910003fd	 mov         fp,sp
  00008	aa0003eb	 mov         x11,x0

; 1544 :     struct inflate_state FAR *state;
; 1545 : 
; 1546 :     if (inflateStateCheck(strm))

  0000c	94000000	 bl          inflateStateCheck
  00010	34000000	 cbz         w0,|$LN2@inflateMar|

; 1547 :         return -(1L << 16);

  00014	52bfffe0	 mov         w0,#0xFFFF0000
  00018	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0001c	d65f03c0	 ret
  00020		 |$LN2@inflateMar|

; 1548 :     state = (struct inflate_state FAR *)strm->state;

  00020	f940156a	 ldr         x10,[x11,#0x28]

; 1549 :     return (long)(((unsigned long)((long)state->back)) << 16) +

  00024	5287e869	 mov         w9,#0x3F43
  00028	b9400948	 ldr         w8,[x10,#8]
  0002c	6b09011f	 cmp         w8,w9
  00030	54000001	 bne         |$LN6@inflateMar|
  00034	b9405149	 ldr         w9,[x10,#0x50]
  00038	b95be548	 ldr         w8,[x10,#0x1BE4]
  0003c	0b084120	 add         w0,w9,w8,lsl #0x10
  00040	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00044	d65f03c0	 ret
  00048		 |$LN6@inflateMar|
  00048	5287e98b	 mov         w11,#0x3F4C
  0004c	6b0b011f	 cmp         w8,w11
  00050	54000001	 bne         |$LN4@inflateMar|
  00054	b9405148	 ldr         w8,[x10,#0x50]
  00058	b95be949	 ldr         w9,[x10,#0x1BE8]
  0005c	4b080129	 sub         w9,w9,w8
  00060	b95be548	 ldr         w8,[x10,#0x1BE4]
  00064	0b084120	 add         w0,w9,w8,lsl #0x10
  00068	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0006c	d65f03c0	 ret
  00070		 |$LN4@inflateMar|
  00070	b95be548	 ldr         w8,[x10,#0x1BE4]
  00074	52800009	 mov         w9,#0
  00078	0b084120	 add         w0,w9,w8,lsl #0x10
  0007c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00080	d65f03c0	 ret

			 ENDP  ; |inflateMark|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\inflate.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |inflateCodesUsed| PROC

; 1556 : {

  00000		 |$LN5|
  00000	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00004	910003fd	 mov         fp,sp
  00008	aa0003eb	 mov         x11,x0

; 1557 :     struct inflate_state FAR *state;
; 1558 :     if (inflateStateCheck(strm)) return (unsigned long)-1;

  0000c	94000000	 bl          inflateStateCheck
  00010	34000000	 cbz         w0,|$LN2@inflateCod|
  00014	12800000	 mov         w0,#-1
  00018	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0001c	d65f03c0	 ret
  00020		 |$LN2@inflateCod|

; 1559 :     state = (struct inflate_state FAR *)strm->state;

  00020	f9401569	 ldr         x9,[x11,#0x28]

; 1560 :     return (unsigned long)(state->next - state->codes);

  00024	f9404528	 ldr         x8,[x9,#0x88]
  00028	cb090109	 sub         x9,x8,x9
  0002c	d115412a	 sub         x10,x9,#0x550
  00030	9342fd40	 asr         x0,x10,#2
  00034	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00038	d65f03c0	 ret

			 ENDP  ; |inflateCodesUsed|

	END
