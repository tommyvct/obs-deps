; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

	TTL	c:\users\ws103\desktop\zlib-1.2.11\gzread.c
	ARM64

	AREA	|.drectve|, DRECTVE

	EXPORT	|??_C@_0BH@CFIIDOJD@unexpected?5end?5of?5file@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CH@CPOLIEKA@internal?5error?3?5inflate?5stream?5@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BG@HCKBMIHF@compressed?5data?5error@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BP@HLDABFKK@request?5does?5not?5fit?5in?5an?5int@| [ DATA ] ; `string'
	EXPORT	|??_C@_0CB@EGGJDMIK@request?5does?5not?5fit?5in?5a?5size_@| [ DATA ] ; `string'
	EXPORT	|??_C@_0BP@IIKIGMCC@out?5of?5room?5to?5push?5characters@| [ DATA ] ; `string'
	IMPORT	|__imp_strerror|
	IMPORT	|__imp__errno|
	IMPORT	|__imp__close|
	IMPORT	|__imp__read|

	AREA	|.rdata|, DATA, READONLY
|??_C@_0BP@IIKIGMCC@out?5of?5room?5to?5push?5characters@| DCB "out of roo"
	DCB	"m to push characters", 0x0		; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0CB@EGGJDMIK@request?5does?5not?5fit?5in?5a?5size_@| DCB "request "
	DCB	"does not fit in a size_t", 0x0		; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0BP@HLDABFKK@request?5does?5not?5fit?5in?5an?5int@| DCB "request d"
	DCB	"oes not fit in an int", 0x0		; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0BG@HCKBMIHF@compressed?5data?5error@| DCB "compressed data error", 0x0 ; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0CH@CPOLIEKA@internal?5error?3?5inflate?5stream?5@| DCB "internal "
	DCB	"error: inflate stream corrupt", 0x0	; `string'

	AREA	|.rdata|, DATA, READONLY
|??_C@_0BH@CFIIDOJD@unexpected?5end?5of?5file@| DCB "unexpected end of fi"
	DCB	"le", 0x0				; `string'
	EXPORT	|gzdirect|
	EXPORT	|gzgets|
	EXPORT	|gzungetc|
	EXPORT	|gzgetc_|
	EXPORT	|gzgetc|
	EXPORT	|gzfread|
	EXPORT	|gzread|
	EXPORT	|gzclose_r|

	AREA	|.pdata|, PDATA
|$pdata$gzdirect| DCD imagerel |$LN6|
	DCD	imagerel |$unwind$gzdirect|

	AREA	|.pdata|, PDATA
|$pdata$gzgets| DCD imagerel |$LN27|
	DCD	0x2e70149
	;Flags[SingleProEpi] functionLength[328] RegF[0] RegI[7] H[0] frameChainReturn[Chained] frameSize[80]

	AREA	|.pdata|, PDATA
|$pdata$gzungetc| DCD imagerel |$LN19|
	DCD	imagerel |$unwind$gzungetc|

	AREA	|.pdata|, PDATA
|$pdata$gzgetc| DCD imagerel |$LN8|
	DCD	imagerel |$unwind$gzgetc|

	AREA	|.pdata|, PDATA
|$pdata$gzfread| DCD imagerel |$LN11|
	DCD	imagerel |$unwind$gzfread|

	AREA	|.pdata|, PDATA
|$pdata$gzread| DCD imagerel |$LN9|
	DCD	imagerel |$unwind$gzread|

	AREA	|.pdata|, PDATA
|$pdata$gz_read| DCD imagerel |gz_read|
	DCD	0x3670179
	;Flags[SingleProEpi] functionLength[376] RegF[0] RegI[7] H[0] frameChainReturn[Chained] frameSize[96]

	AREA	|.pdata|, PDATA
|$pdata$gz_skip| DCD imagerel |gz_skip|
	DCD	imagerel |$unwind$gz_skip|

	AREA	|.pdata|, PDATA
|$pdata$gz_fetch| DCD imagerel |gz_fetch|
	DCD	imagerel |$unwind$gz_fetch|

	AREA	|.pdata|, PDATA
|$pdata$gz_decomp| DCD imagerel |gz_decomp|
	DCD	imagerel |$unwind$gz_decomp|

	AREA	|.pdata|, PDATA
|$pdata$gz_look| DCD imagerel |gz_look|
	DCD	imagerel |$unwind$gz_look|

	AREA	|.pdata|, PDATA
|$pdata$gz_avail| DCD imagerel |gz_avail|
	DCD	imagerel |$unwind$gz_avail|

	AREA	|.pdata|, PDATA
|$pdata$gz_load| DCD imagerel |gz_load|
	DCD	0x2e700d5
	;Flags[SingleProEpi] functionLength[212] RegF[0] RegI[7] H[0] frameChainReturn[Chained] frameSize[80]

	AREA	|.pdata|, PDATA
|$pdata$gzclose_r| DCD imagerel |$LN8|
	DCD	imagerel |$unwind$gzclose_r|

	AREA	|.xdata|, DATA
|$unwind$gzclose_r| DCD 0x10800037
	DCD	0x40002e
	DCD	0x400033
	DCD	0x82d081e1
	DCD	0xe3e3e424
	;Code Words[2], Epilog Count[2], E[0], X[0], Function Length[55]=220 bytes
	;Epilog Start Index[1], Epilog Start Offset[46]=184 bytes
	;Epilog Start Index[1], Epilog Start Offset[51]=204 bytes
	;set_fp
	;save_fplr_x
	;save_reg
	;save_r19r20_x
	;end
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$gz_avail| DCD 0x1080002a
	DCD	0x40001d
	DCD	0x400027
	DCD	0x1d483e1
	DCD	0xe3e3e3e4
	;Code Words[2], Epilog Count[2], E[0], X[0], Function Length[42]=168 bytes
	;Epilog Start Index[1], Epilog Start Offset[29]=116 bytes
	;Epilog Start Index[1], Epilog Start Offset[39]=156 bytes
	;set_fp
	;save_fplr_x
	;save_reg_x
	;end
	;nop
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$gz_look| DCD 0x11400077
	DCD	0x400030
	DCD	0x400040
	DCD	0x40005a
	DCD	0x400064
	DCD	0x400074
	DCD	0x1d481e1
	DCD	0xe3e3e3e4
	;Code Words[2], Epilog Count[5], E[0], X[0], Function Length[119]=476 bytes
	;Epilog Start Index[1], Epilog Start Offset[48]=192 bytes
	;Epilog Start Index[1], Epilog Start Offset[64]=256 bytes
	;Epilog Start Index[1], Epilog Start Offset[90]=360 bytes
	;Epilog Start Index[1], Epilog Start Offset[100]=400 bytes
	;Epilog Start Index[1], Epilog Start Offset[116]=464 bytes
	;set_fp
	;save_fplr_x
	;save_reg_x
	;end
	;nop
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$gz_decomp| DCD 0x10800047
	DCD	0x40002e
	DCD	0x400043
	DCD	0x82d081e1
	DCD	0xe3e3e424
	;Code Words[2], Epilog Count[2], E[0], X[0], Function Length[71]=284 bytes
	;Epilog Start Index[1], Epilog Start Offset[46]=184 bytes
	;Epilog Start Index[1], Epilog Start Offset[67]=268 bytes
	;set_fp
	;save_fplr_x
	;save_reg
	;save_r19r20_x
	;end
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$gz_fetch| DCD 0x10800032
	DCD	0x400014
	DCD	0x40002f
	DCD	0x1d481e1
	DCD	0xe3e3e3e4
	;Code Words[2], Epilog Count[2], E[0], X[0], Function Length[50]=200 bytes
	;Epilog Start Index[1], Epilog Start Offset[20]=80 bytes
	;Epilog Start Index[1], Epilog Start Offset[47]=188 bytes
	;set_fp
	;save_fplr_x
	;save_reg_x
	;end
	;nop
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$gz_skip| DCD 0x8800024
	DCD	0x40001d
	DCD	0x400021
	DCD	0xe42281e1
	;Code Words[1], Epilog Count[2], E[0], X[0], Function Length[36]=144 bytes
	;Epilog Start Index[1], Epilog Start Offset[29]=116 bytes
	;Epilog Start Index[1], Epilog Start Offset[33]=132 bytes
	;set_fp
	;save_fplr_x
	;save_r19r20_x
	;end

	AREA	|.xdata|, DATA
|$unwind$gzread| DCD 0x10800027
	DCD	0x400014
	DCD	0x400024
	DCD	0x1d481e1
	DCD	0xe3e3e3e4
	;Code Words[2], Epilog Count[2], E[0], X[0], Function Length[39]=156 bytes
	;Epilog Start Index[1], Epilog Start Offset[20]=80 bytes
	;Epilog Start Index[1], Epilog Start Offset[36]=144 bytes
	;set_fp
	;save_fplr_x
	;save_reg_x
	;end
	;nop
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$gzfread| DCD 0x10800026
	DCD	0x400019
	DCD	0x400023
	DCD	0x1d481e1
	DCD	0xe3e3e3e4
	;Code Words[2], Epilog Count[2], E[0], X[0], Function Length[38]=152 bytes
	;Epilog Start Index[1], Epilog Start Offset[25]=100 bytes
	;Epilog Start Index[1], Epilog Start Offset[35]=140 bytes
	;set_fp
	;save_fplr_x
	;save_reg_x
	;end
	;nop
	;nop
	;nop

	AREA	|.xdata|, DATA
|$unwind$gzgetc| DCD 0x8c00025
	DCD	0x400016
	DCD	0x400020
	DCD	0x400023
	DCD	0xe3e483e1
	;Code Words[1], Epilog Count[3], E[0], X[0], Function Length[37]=148 bytes
	;Epilog Start Index[1], Epilog Start Offset[22]=88 bytes
	;Epilog Start Index[1], Epilog Start Offset[32]=128 bytes
	;Epilog Start Index[1], Epilog Start Offset[35]=140 bytes
	;set_fp
	;save_fplr_x
	;end
	;nop

	AREA	|.xdata|, DATA
|$unwind$gzungetc| DCD 0x8c00053
	DCD	0x40002a
	DCD	0x400035
	DCD	0x400050
	DCD	0xe42281e1
	;Code Words[1], Epilog Count[3], E[0], X[0], Function Length[83]=332 bytes
	;Epilog Start Index[1], Epilog Start Offset[42]=168 bytes
	;Epilog Start Index[1], Epilog Start Offset[53]=212 bytes
	;Epilog Start Index[1], Epilog Start Offset[80]=320 bytes
	;set_fp
	;save_fplr_x
	;save_r19r20_x
	;end

	AREA	|.xdata|, DATA
|$unwind$gzdirect| DCD 0x10800017
	DCD	0x400006
	DCD	0x400014
	DCD	0x1d481e1
	DCD	0xe3e3e3e4
	;Code Words[2], Epilog Count[2], E[0], X[0], Function Length[23]=92 bytes
	;Epilog Start Index[1], Epilog Start Offset[6]=24 bytes
	;Epilog Start Index[1], Epilog Start Offset[20]=80 bytes
	;set_fp
	;save_fplr_x
	;save_reg_x
	;end
	;nop
	;nop
	;nop
; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzread.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gzclose_r| PROC

; 629  : {

  00000		 |$LN8|
  00000	a9be53f3	 stp         x19,x20,[sp,#-0x20]!
  00004	f9000bf5	 str         x21,[sp,#0x10]
  00008	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  0000c	910003fd	 mov         fp,sp
  00010	aa0003f5	 mov         x21,x0

; 630  :     int ret, err;
; 631  :     gz_statep state;
; 632  : 
; 633  :     /* get internal structure */
; 634  :     if (file == NULL)

  00014	b4000015	 cbz         x21,|$LN6@gzclose_r|

; 635  :         return Z_STREAM_ERROR;
; 636  :     state = (gz_statep)file;
; 637  : 
; 638  :     /* check that we're reading */
; 639  :     if (state->mode != GZ_READ)

  00018	b9401aa8	 ldr         w8,[x21,#0x18]
  0001c	528389e9	 mov         w9,#0x1C4F
  00020	6b09011f	 cmp         w8,w9
  00024	54000001	 bne         |$LN6@gzclose_r|

; 641  : 
; 642  :     /* free memory and close file */
; 643  :     if (state->size) {

  00028	b9402aa8	 ldr         w8,[x21,#0x28]
  0002c	34000008	 cbz         w8,|$LN4@gzclose_r|

; 644  :         inflateEnd(&(state->strm));

  00030	9101e2a0	 add         x0,x21,#0x78
  00034	94000000	 bl          inflateEnd

; 645  :         free(state->out);

  00038	90000008	 adrp        x8,__imp_free
  0003c	f9400108	 ldr         x8,[x8,PageOffset(__imp_free)]
  00040	f9401ea0	 ldr         x0,[x21,#0x38]
  00044	d63f0100	 blr         x8

; 646  :         free(state->in);

  00048	90000008	 adrp        x8,__imp_free
  0004c	f9400108	 ldr         x8,[x8,PageOffset(__imp_free)]
  00050	f9401aa0	 ldr         x0,[x21,#0x30]
  00054	d63f0100	 blr         x8
  00058		 |$LN4@gzclose_r|

; 647  :     }
; 648  :     err = state->err == Z_BUF_ERROR ? Z_BUF_ERROR : Z_OK;

  00058	b9406ea8	 ldr         w8,[x21,#0x6C]
  0005c	12800089	 mov         w9,#-5

; 649  :     gz_error(state, Z_OK, NULL);

  00060	d2800002	 mov         x2,#0
  00064	52800001	 mov         w1,#0
  00068	aa1503e0	 mov         x0,x21
  0006c	3100151f	 cmn         w8,#5
  00070	1a9f0134	 cseleq      w20,w9,wzr
  00074	94000000	 bl          gz_error

; 650  :     free(state->path);

  00078	f94012a0	 ldr         x0,[x21,#0x20]
  0007c	90000008	 adrp        x8,__imp_free
  00080	f9400108	 ldr         x8,[x8,PageOffset(__imp_free)]
  00084	d63f0100	 blr         x8

; 651  :     ret = close(state->fd);

  00088	90000008	 adrp        x8,__imp__close
  0008c	f9400108	 ldr         x8,[x8,PageOffset(__imp__close)]
  00090	b9401ea0	 ldr         w0,[x21,#0x1C]
  00094	d63f0100	 blr         x8

; 652  :     free(state);

  00098	90000008	 adrp        x8,__imp_free
  0009c	f9400108	 ldr         x8,[x8,PageOffset(__imp_free)]
  000a0	2a0003f3	 mov         w19,w0
  000a4	aa1503e0	 mov         x0,x21
  000a8	d63f0100	 blr         x8

; 653  :     return ret ? Z_ERRNO : err;

  000ac	7100027f	 cmp         w19,#0
  000b0	12800008	 mov         w8,#-1
  000b4	1a941100	 cselne      w0,w8,w20
  000b8	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000bc	f9400bf5	 ldr         x21,[sp,#0x10]
  000c0	a8c253f3	 ldp         x19,x20,[sp],#0x20
  000c4	d65f03c0	 ret
  000c8		 |$LN6@gzclose_r|

; 640  :         return Z_STREAM_ERROR;

  000c8	12800020	 mov         w0,#-2
  000cc	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000d0	f9400bf5	 ldr         x21,[sp,#0x10]
  000d4	a8c253f3	 ldp         x19,x20,[sp],#0x20
  000d8	d65f03c0	 ret

			 ENDP  ; |gzclose_r|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzread.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gz_load| PROC

; 26   : {

  00000	a9bc53f3	 stp         x19,x20,[sp,#-0x40]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	a90263f7	 stp         x23,x24,[sp,#0x20]
  0000c	f9001bf9	 str         x25,[sp,#0x30]
  00010	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00014	910003fd	 mov         fp,sp
  00018	aa0303f3	 mov         x19,x3

; 27   :     int ret;
; 28   :     unsigned get, max = ((unsigned)-1 >> 2) + 1;
; 29   : 
; 30   :     *have = 0;

  0001c	b900027f	 str         wzr,[x19]
  00020	aa0003f5	 mov         x21,x0
  00024	aa0103f6	 mov         x22,x1
  00028	2a0203f4	 mov         w20,w2
  0002c	52800009	 mov         w9,#0
  00030	52a80017	 mov         w23,#0x40000000
  00034	52a80018	 mov         w24,#0x40000000
  00038	90000019	 adrp        x25,__imp__read
  0003c		 |$LL4@gz_load|

; 31   :     do {
; 32   :         get = len - *have;

  0003c	4b090288	 sub         w8,w20,w9

; 33   :         if (get > max)
; 34   :             get = max;
; 35   :         ret = read(state->fd, buf + *have, get);

  00040	b9401ea0	 ldr         w0,[x21,#0x1C]
  00044	8b2942c1	 add         x1,x22,w9,uxtw #0
  00048	6b17011f	 cmp         w8,w23
  0004c	1a888302	 cselhi      w2,w24,w8
  00050	f9400328	 ldr         x8,[x25,PageOffset(__imp__read)]
  00054	d63f0100	 blr         x8

; 36   :         if (ret <= 0)

  00058	7100001f	 cmp         w0,#0
  0005c	5400000d	 ble         |$LN3@gz_load|

; 37   :             break;
; 38   :         *have += (unsigned)ret;

  00060	b9400268	 ldr         w8,[x19]
  00064	0b000109	 add         w9,w8,w0
  00068	b9000269	 str         w9,[x19]

; 39   :     } while (*have < len);

  0006c	6b14013f	 cmp         w9,w20
  00070	54000003	 blo         |$LL4@gz_load|
  00074		 |$LN3@gz_load|

; 40   :     if (ret < 0) {

  00074	36f80000	 tbz         x0,#0x1F,|$LN7@gz_load|

; 41   :         gz_error(state, Z_ERRNO, zstrerror());

  00078	90000008	 adrp        x8,__imp__errno
  0007c	f9400108	 ldr         x8,[x8,PageOffset(__imp__errno)]
  00080	d63f0100	 blr         x8
  00084	90000008	 adrp        x8,__imp_strerror
  00088	f9400108	 ldr         x8,[x8,PageOffset(__imp_strerror)]
  0008c	b9400000	 ldr         w0,[x0]
  00090	d63f0100	 blr         x8
  00094	12800001	 mov         w1,#-1
  00098	aa0003e2	 mov         x2,x0
  0009c	aa1503e0	 mov         x0,x21
  000a0	94000000	 bl          gz_error

; 42   :         return -1;

  000a4	12800000	 mov         w0,#-1
  000a8	14000005	 b           |$LN1@gz_load|
  000ac		 |$LN7@gz_load|

; 43   :     }
; 44   :     if (ret == 0)

  000ac	35000000	 cbnz        w0,|$LN8@gz_load|

; 45   :         state->eof = 1;

  000b0	52800028	 mov         w8,#1
  000b4	b90052a8	 str         w8,[x21,#0x50]
  000b8		 |$LN8@gz_load|

; 46   :     return 0;

  000b8	52800000	 mov         w0,#0
  000bc		 |$LN1@gz_load|
  000bc	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000c0	f9401bf9	 ldr         x25,[sp,#0x30]
  000c4	a94263f7	 ldp         x23,x24,[sp,#0x20]
  000c8	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  000cc	a8c453f3	 ldp         x19,x20,[sp],#0x40
  000d0	d65f03c0	 ret

			 ENDP  ; |gz_load|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzread.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gz_avail| PROC

; 58   : {

  00000	f81f0ff3	 str         x19,[sp,#-0x10]!
  00004	a9be7bfd	 stp         fp,lr,[sp,#-0x20]!
  00008	910003fd	 mov         fp,sp
  0000c	aa0003f3	 mov         x19,x0

; 59   :     unsigned got;
; 60   :     z_streamp strm = &(state->strm);
; 61   : 
; 62   :     if (state->err != Z_OK && state->err != Z_BUF_ERROR)

  00010	b9406e68	 ldr         w8,[x19,#0x6C]
  00014	34000008	 cbz         w8,|$LN5@gz_avail|
  00018	3100151f	 cmn         w8,#5
  0001c	54000001	 bne         |$LN13@gz_avail|
  00020		 |$LN5@gz_avail|

; 63   :         return -1;
; 64   :     if (state->eof == 0) {

  00020	b9405268	 ldr         w8,[x19,#0x50]
  00024	35000008	 cbnz        w8,|$LN6@gz_avail|

; 65   :         if (strm->avail_in) {       /* copy what's there to the start */

  00028	b940826a	 ldr         w10,[x19,#0x80]
  0002c	3400000a	 cbz         w10,|$LN3@gz_avail|

; 66   :             unsigned char *p = state->in;

  00030	f9401a69	 ldr         x9,[x19,#0x30]

; 67   :             unsigned const char *q = strm->next_in;

  00034	f9403e6b	 ldr         x11,[x19,#0x78]
  00038		 |$LL4@gz_avail|

; 68   :             unsigned n = strm->avail_in;
; 69   :             do {
; 70   :                 *p++ = *q++;

  00038	38401568	 ldrb        w8,[x11],#1

; 71   :             } while (--n);

  0003c	5100054a	 sub         w10,w10,#1
  00040	38001528	 strb        w8,[x9],#1
  00044	3500000a	 cbnz        w10,|$LL4@gz_avail|
  00048	b940826a	 ldr         w10,[x19,#0x80]
  0004c		 |$LN3@gz_avail|

; 72   :         }
; 73   :         if (gz_load(state, state->in + strm->avail_in,
; 74   :                     state->size - strm->avail_in, &got) == -1)

  0004c	f9401a69	 ldr         x9,[x19,#0x30]
  00050	910043e3	 add         x3,sp,#0x10
  00054	b9402a68	 ldr         w8,[x19,#0x28]
  00058	aa1303e0	 mov         x0,x19
  0005c	8b2a4121	 add         x1,x9,w10,uxtw #0
  00060	4b0a0102	 sub         w2,w8,w10
  00064	94000000	 bl          gz_load
  00068	3100041f	 cmn         w0,#1
  0006c	54000001	 bne         |$LN8@gz_avail|
  00070		 |$LN13@gz_avail|

; 75   :             return -1;

  00070	12800000	 mov         w0,#-1
  00074	a8c27bfd	 ldp         fp,lr,[sp],#0x20
  00078	f84107f3	 ldr         x19,[sp],#0x10
  0007c	d65f03c0	 ret
  00080		 |$LN8@gz_avail|

; 76   :         strm->avail_in += got;

  00080	b9408269	 ldr         w9,[x19,#0x80]
  00084	b94013e8	 ldr         w8,[sp,#0x10]
  00088	0b080128	 add         w8,w9,w8
  0008c	b9008268	 str         w8,[x19,#0x80]

; 77   :         strm->next_in = state->in;

  00090	f9401a69	 ldr         x9,[x19,#0x30]
  00094	f9003e69	 str         x9,[x19,#0x78]
  00098		 |$LN6@gz_avail|

; 78   :     }
; 79   :     return 0;

  00098	52800000	 mov         w0,#0
  0009c	a8c27bfd	 ldp         fp,lr,[sp],#0x20
  000a0	f84107f3	 ldr         x19,[sp],#0x10
  000a4	d65f03c0	 ret

			 ENDP  ; |gz_avail|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzread.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gz_look| PROC

; 93   : {

  00000	f81f0ff3	 str         x19,[sp,#-0x10]!
  00004	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00008	910003fd	 mov         fp,sp
  0000c	aa0003f3	 mov         x19,x0

; 94   :     z_streamp strm = &(state->strm);
; 95   : 
; 96   :     /* allocate read buffers and inflate memory */
; 97   :     if (state->size == 0) {

  00010	b9402a68	 ldr         w8,[x19,#0x28]
  00014	35000008	 cbnz        w8,|$LN5@gz_look|

; 98   :         /* allocate buffers */
; 99   :         state->in = (unsigned char *)malloc(state->want);

  00018	90000008	 adrp        x8,__imp_malloc
  0001c	f9400108	 ldr         x8,[x8,PageOffset(__imp_malloc)]
  00020	b9402e60	 ldr         w0,[x19,#0x2C]
  00024	d63f0100	 blr         x8

; 100  :         state->out = (unsigned char *)malloc(state->want << 1);

  00028	b9402e68	 ldr         w8,[x19,#0x2C]
  0002c	f9001a60	 str         x0,[x19,#0x30]
  00030	531f7900	 lsl         w0,w8,#1
  00034	9000000a	 adrp        x10,__imp_malloc
  00038	f9400148	 ldr         x8,[x10,PageOffset(__imp_malloc)]
  0003c	d63f0100	 blr         x8

; 101  :         if (state->in == NULL || state->out == NULL) {

  00040	f9401a68	 ldr         x8,[x19,#0x30]
  00044	f9001e60	 str         x0,[x19,#0x38]
  00048	b4000008	 cbz         x8,|$LN13@gz_look|
  0004c	b4000000	 cbz         x0,|$LN13@gz_look|

; 105  :             return -1;
; 106  :         }
; 107  :         state->size = state->want;

  00050	b9402e68	 ldr         w8,[x19,#0x2C]

; 108  : 
; 109  :         /* allocate inflate memory */
; 110  :         state->strm.zalloc = Z_NULL;
; 111  :         state->strm.zfree = Z_NULL;
; 112  :         state->strm.opaque = Z_NULL;
; 113  :         state->strm.avail_in = 0;
; 114  :         state->strm.next_in = Z_NULL;
; 115  :         if (inflateInit2(&(state->strm), 15 + 16) != Z_OK) {    /* gunzip */

  00054	52800b03	 mov         w3,#0x58
  00058	a90afe7f	 stp         xzr,xzr,[x19,#0xA8]
  0005c	528003e1	 mov         w1,#0x1F
  00060	f9005e7f	 str         xzr,[x19,#0xB8]
  00064	9101e260	 add         x0,x19,#0x78
  00068	b900827f	 str         wzr,[x19,#0x80]
  0006c	f9003e7f	 str         xzr,[x19,#0x78]
  00070	b9002a68	 str         w8,[x19,#0x28]
  00074	90000008	 adrp        x8,|??_C@_06CJNJFBNP@1?42?411@|
  00078	91000102	 add         x2,x8,PageOffset(|??_C@_06CJNJFBNP@1?42?411@|)
  0007c	94000000	 bl          inflateInit2_
  00080	34000000	 cbz         w0,|$LN5@gz_look|

; 116  :             free(state->out);

  00084	90000008	 adrp        x8,__imp_free
  00088	f9400108	 ldr         x8,[x8,PageOffset(__imp_free)]
  0008c	f9401e60	 ldr         x0,[x19,#0x38]
  00090	d63f0100	 blr         x8

; 117  :             free(state->in);

  00094	90000008	 adrp        x8,__imp_free
  00098	f9400108	 ldr         x8,[x8,PageOffset(__imp_free)]
  0009c	f9401a60	 ldr         x0,[x19,#0x30]
  000a0	d63f0100	 blr         x8

; 118  :             state->size = 0;
; 119  :             gz_error(state, Z_MEM_ERROR, "out of memory");

  000a4	90000008	 adrp        x8,|??_C@_0O@BNNCBLEN@out?5of?5memory@|
  000a8	91000102	 add         x2,x8,PageOffset(|??_C@_0O@BNNCBLEN@out?5of?5memory@|)
  000ac	12800061	 mov         w1,#-4
  000b0	b9002a7f	 str         wzr,[x19,#0x28]
  000b4	aa1303e0	 mov         x0,x19
  000b8	94000000	 bl          gz_error

; 120  :             return -1;

  000bc	12800000	 mov         w0,#-1
  000c0	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000c4	f84107f3	 ldr         x19,[sp],#0x10
  000c8	d65f03c0	 ret
  000cc		 |$LN13@gz_look|

; 102  :             free(state->out);

  000cc	90000008	 adrp        x8,__imp_free
  000d0	f9400108	 ldr         x8,[x8,PageOffset(__imp_free)]
  000d4	d63f0100	 blr         x8

; 103  :             free(state->in);

  000d8	90000008	 adrp        x8,__imp_free
  000dc	f9400108	 ldr         x8,[x8,PageOffset(__imp_free)]
  000e0	f9401a60	 ldr         x0,[x19,#0x30]
  000e4	d63f0100	 blr         x8

; 104  :             gz_error(state, Z_MEM_ERROR, "out of memory");

  000e8	90000008	 adrp        x8,|??_C@_0O@BNNCBLEN@out?5of?5memory@|
  000ec	91000102	 add         x2,x8,PageOffset(|??_C@_0O@BNNCBLEN@out?5of?5memory@|)
  000f0	12800061	 mov         w1,#-4
  000f4	aa1303e0	 mov         x0,x19
  000f8	94000000	 bl          gz_error
  000fc		 |$LN16@gz_look|

; 167  :     return 0;
; 168  : }

  000fc	12800000	 mov         w0,#-1
  00100	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00104	f84107f3	 ldr         x19,[sp],#0x10
  00108	d65f03c0	 ret
  0010c		 |$LN5@gz_look|

; 121  :         }
; 122  :     }
; 123  : 
; 124  :     /* get at least the magic bytes in the input buffer */
; 125  :     if (strm->avail_in < 2) {

  0010c	b9408268	 ldr         w8,[x19,#0x80]
  00110	7100091f	 cmp         w8,#2
  00114	54000002	 bhs         |$LN8@gz_look|

; 126  :         if (gz_avail(state) == -1)

  00118	aa1303e0	 mov         x0,x19
  0011c	94000000	 bl          gz_avail
  00120	3100041f	 cmn         w0,#1
  00124	54000000	 beq         |$LN16@gz_look|

; 127  :             return -1;
; 128  :         if (strm->avail_in == 0)

  00128	b9408268	 ldr         w8,[x19,#0x80]
  0012c	34000008	 cbz         w8,|$LN14@gz_look|
  00130		 |$LN8@gz_look|

; 129  :             return 0;
; 130  :     }
; 131  : 
; 132  :     /* look for gzip magic bytes -- if there, do gzip decoding (note: there is
; 133  :        a logical dilemma here when considering the case of a partially written
; 134  :        gzip file, to wit, if a single 31 byte is written, then we cannot tell
; 135  :        whether this is a single-byte file, or just a partially written gzip
; 136  :        file -- for here we assume that if a gzip file is being written, then
; 137  :        the header will be written in a single operation, so that reading a
; 138  :        single byte is sufficient indication that it is not a gzip file) */
; 139  :     if (strm->avail_in > 1 &&
; 140  :             strm->next_in[0] == 31 && strm->next_in[1] == 139) {

  00130	7100051f	 cmp         w8,#1
  00134	54000009	 bls         |$LN9@gz_look|
  00138	f9403e69	 ldr         x9,[x19,#0x78]
  0013c	39400128	 ldrb        w8,[x9]
  00140	71007d1f	 cmp         w8,#0x1F
  00144	54000001	 bne         |$LN9@gz_look|
  00148	39400528	 ldrb        w8,[x9,#1]
  0014c	71022d1f	 cmp         w8,#0x8B
  00150	54000001	 bne         |$LN9@gz_look|

; 141  :         inflateReset(strm);

  00154	9101e260	 add         x0,x19,#0x78
  00158	94000000	 bl          inflateReset

; 142  :         state->how = GZIP;

  0015c	52800048	 mov         w8,#2

; 143  :         state->direct = 0;

  00160	2908227f	 stp         wzr,w8,[x19,#0x40]

; 167  :     return 0;
; 168  : }

  00164	52800000	 mov         w0,#0
  00168	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0016c	f84107f3	 ldr         x19,[sp],#0x10
  00170	d65f03c0	 ret
  00174		 |$LN9@gz_look|

; 144  :         return 0;
; 145  :     }
; 146  : 
; 147  :     /* no gzip header -- if we were decoding gzip before, then this is trailing
; 148  :        garbage.  Ignore the trailing garbage and finish. */
; 149  :     if (state->direct == 0) {

  00174	b9404268	 ldr         w8,[x19,#0x40]
  00178	35000008	 cbnz        w8,|$LN10@gz_look|

; 150  :         strm->avail_in = 0;
; 151  :         state->eof = 1;

  0017c	52800028	 mov         w8,#1
  00180	b900827f	 str         wzr,[x19,#0x80]
  00184	b9005268	 str         w8,[x19,#0x50]

; 167  :     return 0;
; 168  : }

  00188	52800000	 mov         w0,#0
  0018c	b900027f	 str         wzr,[x19]
  00190	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00194	f84107f3	 ldr         x19,[sp],#0x10
  00198	d65f03c0	 ret
  0019c		 |$LN10@gz_look|

; 152  :         state->x.have = 0;
; 153  :         return 0;
; 154  :     }
; 155  : 
; 156  :     /* doing raw i/o, copy any leftover input to output -- this assumes that
; 157  :        the output buffer is larger than the input buffer, which also assures
; 158  :        space for gzungetc() */
; 159  :     state->x.next = state->out;

  0019c	f9401e60	 ldr         x0,[x19,#0x38]
  001a0	f9000660	 str         x0,[x19,#8]

; 160  :     if (strm->avail_in) {

  001a4	b9408268	 ldr         w8,[x19,#0x80]
  001a8	34000008	 cbz         w8,|$LN11@gz_look|

; 161  :         memcpy(state->x.next, strm->next_in, strm->avail_in);

  001ac	f9403e61	 ldr         x1,[x19,#0x78]
  001b0	aa0803e2	 mov         x2,x8
  001b4	94000000	 bl          memcpy

; 162  :         state->x.have = strm->avail_in;

  001b8	b9408268	 ldr         w8,[x19,#0x80]
  001bc	b9000268	 str         w8,[x19]

; 163  :         strm->avail_in = 0;

  001c0	b900827f	 str         wzr,[x19,#0x80]
  001c4		 |$LN11@gz_look|

; 164  :     }
; 165  :     state->how = COPY;

  001c4	52800028	 mov         w8,#1

; 166  :     state->direct = 1;

  001c8	29082268	 stp         w8,w8,[x19,#0x40]
  001cc		 |$LN14@gz_look|

; 167  :     return 0;
; 168  : }

  001cc	52800000	 mov         w0,#0
  001d0	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  001d4	f84107f3	 ldr         x19,[sp],#0x10
  001d8	d65f03c0	 ret

			 ENDP  ; |gz_look|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzread.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gz_decomp| PROC

; 177  : {

  00000	a9be53f3	 stp         x19,x20,[sp,#-0x20]!
  00004	f9000bf5	 str         x21,[sp,#0x10]
  00008	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  0000c	910003fd	 mov         fp,sp
  00010	aa0003f3	 mov         x19,x0

; 178  :     int ret = Z_OK;
; 179  :     unsigned had;
; 180  :     z_streamp strm = &(state->strm);
; 181  : 
; 182  :     /* fill output buffer up to end of deflate stream */
; 183  :     had = strm->avail_out;

  00014	b9409275	 ldr         w21,[x19,#0x90]
  00018	52800014	 mov         w20,#0
  0001c		 |$LL4@gz_decomp|

; 184  :     do {
; 185  :         /* get more input for inflate() */
; 186  :         if (strm->avail_in == 0 && gz_avail(state) == -1)

  0001c	b9408268	 ldr         w8,[x19,#0x80]
  00020	35000008	 cbnz        w8,|$LN25@gz_decomp|
  00024	aa1303e0	 mov         x0,x19
  00028	94000000	 bl          gz_avail
  0002c	3100041f	 cmn         w0,#1
  00030	54000000	 beq         |$LN17@gz_decomp|

; 187  :             return -1;
; 188  :         if (strm->avail_in == 0) {

  00034	b9408268	 ldr         w8,[x19,#0x80]
  00038	34000008	 cbz         w8,|$LN18@gz_decomp|
  0003c		 |$LN25@gz_decomp|

; 190  :             break;
; 191  :         }
; 192  : 
; 193  :         /* decompress and handle errors */
; 194  :         ret = inflate(strm, Z_NO_FLUSH);

  0003c	52800001	 mov         w1,#0
  00040	9101e260	 add         x0,x19,#0x78
  00044	94000000	 bl          inflate
  00048	2a0003f4	 mov         w20,w0

; 195  :         if (ret == Z_STREAM_ERROR || ret == Z_NEED_DICT) {

  0004c	11000a88	 add         w8,w20,#2
  00050	721d791f	 tst         w8,#0xFFFFFFFB
  00054	54000000	 beq         |$LN8@gz_decomp|

; 197  :                      "internal error: inflate stream corrupt");
; 198  :             return -1;
; 199  :         }
; 200  :         if (ret == Z_MEM_ERROR) {

  00058	3100129f	 cmn         w20,#4
  0005c	54000000	 beq         |$LN20@gz_decomp|

; 203  :         }
; 204  :         if (ret == Z_DATA_ERROR) {              /* deflate stream invalid */

  00060	31000e9f	 cmn         w20,#3
  00064	54000000	 beq         |$LN21@gz_decomp|

; 208  :         }
; 209  :     } while (strm->avail_out && ret != Z_STREAM_END);

  00068	b9409268	 ldr         w8,[x19,#0x90]
  0006c	7100011f	 cmp         w8,#0
  00070	7a411a84	 ccmpne      w20,#1,#4
  00074	54000000	 beq         |$LN3@gz_decomp|
  00078	17ffffe9	 b           |$LL4@gz_decomp|
  0007c		 |$LN18@gz_decomp|

; 189  :             gz_error(state, Z_BUF_ERROR, "unexpected end of file");

  0007c	90000008	 adrp        x8,|??_C@_0BH@CFIIDOJD@unexpected?5end?5of?5file@|
  00080	91000102	 add         x2,x8,PageOffset(|??_C@_0BH@CFIIDOJD@unexpected?5end?5of?5file@|)
  00084	12800081	 mov         w1,#-5
  00088	aa1303e0	 mov         x0,x19
  0008c	94000000	 bl          gz_error
  00090	b9409268	 ldr         w8,[x19,#0x90]
  00094		 |$LN3@gz_decomp|

; 210  : 
; 211  :     /* update available output */
; 212  :     state->x.have = had - strm->avail_out;

  00094	4b0802a9	 sub         w9,w21,w8
  00098	b9000269	 str         w9,[x19]

; 213  :     state->x.next = strm->next_out - state->x.have;

  0009c	f9404668	 ldr         x8,[x19,#0x88]

; 214  : 
; 215  :     /* if the gzip stream completed successfully, look for another */
; 216  :     if (ret == Z_STREAM_END)

  000a0	7100069f	 cmp         w20,#1
  000a4	cb294109	 sub         x9,x8,w9,uxtw #0
  000a8	f9000669	 str         x9,[x19,#8]
  000ac	54000001	 bne         |$LN12@gz_decomp|

; 217  :         state->how = LOOK;

  000b0	b900467f	 str         wzr,[x19,#0x44]
  000b4		 |$LN12@gz_decomp|

; 218  : 
; 219  :     /* good decompression */
; 220  :     return 0;

  000b4	52800000	 mov         w0,#0
  000b8	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000bc	f9400bf5	 ldr         x21,[sp,#0x10]
  000c0	a8c253f3	 ldp         x19,x20,[sp],#0x20
  000c4	d65f03c0	 ret
  000c8		 |$LN21@gz_decomp|

; 205  :             gz_error(state, Z_DATA_ERROR,

  000c8	f9404e69	 ldr         x9,[x19,#0x98]
  000cc	90000008	 adrp        x8,|??_C@_0BG@HCKBMIHF@compressed?5data?5error@|
  000d0	91000108	 add         x8,x8,PageOffset(|??_C@_0BG@HCKBMIHF@compressed?5data?5error@|)
  000d4	12800041	 mov         w1,#-3
  000d8	f100013f	 cmp         x9,#0
  000dc	9a890102	 cseleq      x2,x8,x9

; 206  :                      strm->msg == NULL ? "compressed data error" : strm->msg);
; 207  :             return -1;

  000e0	14000008	 b           |$LN27@gz_decomp|
  000e4		 |$LN20@gz_decomp|

; 201  :             gz_error(state, Z_MEM_ERROR, "out of memory");

  000e4	90000008	 adrp        x8,|??_C@_0O@BNNCBLEN@out?5of?5memory@|
  000e8	91000102	 add         x2,x8,PageOffset(|??_C@_0O@BNNCBLEN@out?5of?5memory@|)
  000ec	12800061	 mov         w1,#-4

; 202  :             return -1;

  000f0	14000004	 b           |$LN27@gz_decomp|
  000f4		 |$LN8@gz_decomp|

; 196  :             gz_error(state, Z_STREAM_ERROR,

  000f4	90000008	 adrp        x8,|??_C@_0CH@CPOLIEKA@internal?5error?3?5inflate?5stream?5@|
  000f8	91000102	 add         x2,x8,PageOffset(|??_C@_0CH@CPOLIEKA@internal?5error?3?5inflate?5stream?5@|)
  000fc	12800021	 mov         w1,#-2
  00100		 |$LN27@gz_decomp|

; 221  : }

  00100	aa1303e0	 mov         x0,x19
  00104	94000000	 bl          gz_error
  00108		 |$LN17@gz_decomp|
  00108	12800000	 mov         w0,#-1
  0010c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00110	f9400bf5	 ldr         x21,[sp,#0x10]
  00114	a8c253f3	 ldp         x19,x20,[sp],#0x20
  00118	d65f03c0	 ret

			 ENDP  ; |gz_decomp|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzread.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gz_fetch| PROC

; 231  : {

  00000	f81f0ff3	 str         x19,[sp,#-0x10]!
  00004	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00008	910003fd	 mov         fp,sp
  0000c	aa0003f3	 mov         x19,x0
  00010		 |$LL4@gz_fetch|

; 232  :     z_streamp strm = &(state->strm);
; 233  : 
; 234  :     do {
; 235  :         switch(state->how) {

  00010	b9404668	 ldr         w8,[x19,#0x44]
  00014	34000008	 cbz         w8,|$LN7@gz_fetch|
  00018	7100051f	 cmp         w8,#1
  0001c	54000000	 beq         |$LN10@gz_fetch|
  00020	7100091f	 cmp         w8,#2
  00024	54000001	 bne         |$LN2@gz_fetch|

; 247  :             return 0;
; 248  :         case GZIP:      /* -> GZIP or LOOK (if end of gzip stream) */
; 249  :             strm->avail_out = state->size << 1;

  00028	b9402a68	 ldr         w8,[x19,#0x28]

; 250  :             strm->next_out = state->out;
; 251  :             if (gz_decomp(state) == -1)

  0002c	aa1303e0	 mov         x0,x19
  00030	531f7909	 lsl         w9,w8,#1
  00034	b9009269	 str         w9,[x19,#0x90]
  00038	f9401e6a	 ldr         x10,[x19,#0x38]
  0003c	f900466a	 str         x10,[x19,#0x88]
  00040	94000000	 bl          gz_decomp
  00044	3100041f	 cmn         w0,#1
  00048	54000001	 bne         |$LN2@gz_fetch|
  0004c		 |$LN19@gz_fetch|

; 238  :                 return -1;

  0004c	12800000	 mov         w0,#-1
  00050	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00054	f84107f3	 ldr         x19,[sp],#0x10
  00058	d65f03c0	 ret
  0005c		 |$LN7@gz_fetch|

; 236  :         case LOOK:      /* -> LOOK, COPY (only if never GZIP), or GZIP */
; 237  :             if (gz_look(state) == -1)

  0005c	aa1303e0	 mov         x0,x19
  00060	94000000	 bl          gz_look
  00064	3100041f	 cmn         w0,#1
  00068	54000000	 beq         |$LN19@gz_fetch|

; 239  :             if (state->how == LOOK)

  0006c	b9404668	 ldr         w8,[x19,#0x44]
  00070	34000008	 cbz         w8,|$LN14@gz_fetch|
  00074		 |$LN2@gz_fetch|

; 252  :                 return -1;
; 253  :         }
; 254  :     } while (state->x.have == 0 && (!state->eof || strm->avail_in));

  00074	b9400268	 ldr         w8,[x19]
  00078	35000008	 cbnz        w8,|$LN14@gz_fetch|
  0007c	b9405268	 ldr         w8,[x19,#0x50]
  00080	34000008	 cbz         w8,|$LL4@gz_fetch|
  00084	b9408268	 ldr         w8,[x19,#0x80]
  00088	34000008	 cbz         w8,|$LN14@gz_fetch|
  0008c	17ffffe1	 b           |$LL4@gz_fetch|
  00090		 |$LN10@gz_fetch|

; 240  :                 return 0;
; 241  :             break;
; 242  :         case COPY:      /* -> COPY */
; 243  :             if (gz_load(state, state->out, state->size << 1, &(state->x.have))
; 244  :                     == -1)

  00090	b9402a68	 ldr         w8,[x19,#0x28]
  00094	aa1303e3	 mov         x3,x19
  00098	f9401e61	 ldr         x1,[x19,#0x38]
  0009c	aa1303e0	 mov         x0,x19
  000a0	531f7902	 lsl         w2,w8,#1
  000a4	94000000	 bl          gz_load
  000a8	3100041f	 cmn         w0,#1
  000ac	54000000	 beq         |$LN19@gz_fetch|

; 245  :                 return -1;
; 246  :             state->x.next = state->out;

  000b0	f9401e68	 ldr         x8,[x19,#0x38]
  000b4	f9000668	 str         x8,[x19,#8]
  000b8		 |$LN14@gz_fetch|

; 255  :     return 0;
; 256  : }

  000b8	52800000	 mov         w0,#0
  000bc	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000c0	f84107f3	 ldr         x19,[sp],#0x10
  000c4	d65f03c0	 ret

			 ENDP  ; |gz_fetch|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzread.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gz_skip| PROC

; 262  : {

  00000	a9bf53f3	 stp         x19,x20,[sp,#-0x10]!
  00004	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00008	910003fd	 mov         fp,sp
  0000c	aa0003f3	 mov         x19,x0
  00010	aa0103f4	 mov         x20,x1

; 263  :     unsigned n;
; 264  : 
; 265  :     /* skip over len bytes or reach end-of-file, whichever comes first */
; 266  :     while (len)

  00014	b4000014	 cbz         x20,|$LN3@gz_skip|
  00018		 |$LL2@gz_skip|

; 267  :         /* skip over whatever is in output buffer */
; 268  :         if (state->x.have) {

  00018	b9400269	 ldr         w9,[x19]
  0001c	34000009	 cbz         w9,|$LN4@gz_skip|

; 269  :             n = GT_OFF(state->x.have) || (z_off64_t)state->x.have > len ?
; 270  :                 (unsigned)len : state->x.have;
; 271  :             state->x.have -= n;

  00020	eb29429f	 cmp         x20,w9,uxtw #0
  00024	1a89b28b	 csellt      w11,w20,w9
  00028	4b0b0128	 sub         w8,w9,w11

; 272  :             state->x.next += n;

  0002c	f9400669	 ldr         x9,[x19,#8]

; 273  :             state->x.pos += n;
; 274  :             len -= n;

  00030	cb2b4294	 sub         x20,x20,w11,uxtw #0
  00034	b9000268	 str         w8,[x19]
  00038	f9400a68	 ldr         x8,[x19,#0x10]
  0003c	8b2b412a	 add         x10,x9,w11,uxtw #0
  00040	8b2b4109	 add         x9,x8,w11,uxtw #0
  00044	a900a66a	 stp         x10,x9,[x19,#8]

; 275  :         }

  00048	14000009	 b           |$LN8@gz_skip|
  0004c		 |$LN4@gz_skip|

; 276  : 
; 277  :         /* output buffer empty -- return if we're at the end of the input */
; 278  :         else if (state->eof && state->strm.avail_in == 0)

  0004c	b9405268	 ldr         w8,[x19,#0x50]
  00050	34000008	 cbz         w8,|$LN6@gz_skip|
  00054	b9408268	 ldr         w8,[x19,#0x80]
  00058	34000008	 cbz         w8,|$LN3@gz_skip|
  0005c		 |$LN6@gz_skip|

; 279  :             break;
; 280  : 
; 281  :         /* need more data to skip -- load up output buffer */
; 282  :         else {
; 283  :             /* get more output, looking for header if required */
; 284  :             if (gz_fetch(state) == -1)

  0005c	aa1303e0	 mov         x0,x19
  00060	94000000	 bl          gz_fetch
  00064	3100041f	 cmn         w0,#1
  00068	54000000	 beq         |$LN14@gz_skip|
  0006c		 |$LN8@gz_skip|

; 263  :     unsigned n;
; 264  : 
; 265  :     /* skip over len bytes or reach end-of-file, whichever comes first */
; 266  :     while (len)

  0006c	b5000014	 cbnz        x20,|$LL2@gz_skip|
  00070		 |$LN3@gz_skip|

; 286  :         }
; 287  :     return 0;

  00070	52800000	 mov         w0,#0
  00074	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00078	a8c153f3	 ldp         x19,x20,[sp],#0x10
  0007c	d65f03c0	 ret
  00080		 |$LN14@gz_skip|

; 285  :                 return -1;

  00080	12800000	 mov         w0,#-1
  00084	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00088	a8c153f3	 ldp         x19,x20,[sp],#0x10
  0008c	d65f03c0	 ret

			 ENDP  ; |gz_skip|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzread.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gz_read| PROC

; 298  : {

  00000	a9bc53f3	 stp         x19,x20,[sp,#-0x40]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	a90263f7	 stp         x23,x24,[sp,#0x20]
  0000c	f9001bf9	 str         x25,[sp,#0x30]
  00010	a9be7bfd	 stp         fp,lr,[sp,#-0x20]!
  00014	910003fd	 mov         fp,sp
  00018	aa0003f3	 mov         x19,x0
  0001c	aa0103f7	 mov         x23,x1
  00020	aa0203f6	 mov         x22,x2

; 299  :     z_size_t got;
; 300  :     unsigned n;
; 301  : 
; 302  :     /* if len is zero, avoid unnecessary operations */
; 303  :     if (len == 0)

  00024	b4000016	 cbz         x22,|$LN27@gz_read|

; 304  :         return 0;
; 305  : 
; 306  :     /* process a skip request */
; 307  :     if (state->seek) {

  00028	b9406a68	 ldr         w8,[x19,#0x68]
  0002c	34000008	 cbz         w8,|$LN7@gz_read|

; 308  :         state->seek = 0;
; 309  :         if (gz_skip(state, state->skip) == -1)

  00030	f9403261	 ldr         x1,[x19,#0x60]
  00034	b9006a7f	 str         wzr,[x19,#0x68]
  00038	94000000	 bl          gz_skip
  0003c	3100041f	 cmn         w0,#1
  00040	54000000	 beq         |$LN27@gz_read|
  00044		 |$LN7@gz_read|

; 310  :             return 0;
; 311  :     }
; 312  : 
; 313  :     /* get len bytes to buf, or less than len if at the end */
; 314  :     got = 0;

  00044	d2800018	 mov         x24,#0
  00048	b2407ff9	 mov         x25,#0xFFFFFFFF
  0004c		 |$LL4@gz_read|

; 315  :     do {
; 316  :         /* set n to the maximum amount of len that fits in an unsigned int */
; 317  :         n = -1;

  0004c	12800014	 mov         w20,#-1
  00050	b90013f4	 str         w20,[sp,#0x10]

; 318  :         if (n > len)

  00054	12800015	 mov         w21,#-1
  00058	eb16033f	 cmp         x25,x22
  0005c	54000009	 bls         |$LN8@gz_read|

; 319  :             n = len;

  00060	2a1603f4	 mov         w20,w22
  00064	b90013f4	 str         w20,[sp,#0x10]
  00068	2a1403f5	 mov         w21,w20
  0006c		 |$LN8@gz_read|

; 320  : 
; 321  :         /* first just try copying data from the output buffer */
; 322  :         if (state->x.have) {

  0006c	b9400268	 ldr         w8,[x19]
  00070	34000008	 cbz         w8,|$LN9@gz_read|

; 323  :             if (state->x.have < n)

  00074	6b15011f	 cmp         w8,w21

; 324  :                 n = state->x.have;
; 325  :             memcpy(buf, state->x.next, n);

  00078	f9400661	 ldr         x1,[x19,#8]
  0007c	1a953115	 csello      w21,w8,w21
  00080	d3407ea2	 uxtw        x2,w21
  00084	aa1703e0	 mov         x0,x23
  00088	1a943114	 csello      w20,w8,w20
  0008c	94000000	 bl          memcpy

; 326  :             state->x.next += n;

  00090	f9400668	 ldr         x8,[x19,#8]

; 327  :             state->x.have -= n;

  00094	b940026a	 ldr         w10,[x19]
  00098	8b354109	 add         x9,x8,w21,uxtw #0
  0009c	4b150148	 sub         w8,w10,w21
  000a0	f9000669	 str         x9,[x19,#8]
  000a4	b9000268	 str         w8,[x19]

; 328  :         }

  000a8	1400001c	 b           |$LN19@gz_read|
  000ac		 |$LN9@gz_read|

; 329  : 
; 330  :         /* output buffer empty -- return if we're at the end of the input */
; 331  :         else if (state->eof && state->strm.avail_in == 0) {

  000ac	b9405268	 ldr         w8,[x19,#0x50]
  000b0	34000008	 cbz         w8,|$LN12@gz_read|
  000b4	b9408268	 ldr         w8,[x19,#0x80]
  000b8	34000008	 cbz         w8,|$LN24@gz_read|
  000bc		 |$LN12@gz_read|

; 333  :             break;
; 334  :         }
; 335  : 
; 336  :         /* need output data -- for small len or new stream load up our output
; 337  :            buffer */
; 338  :         else if (state->how == LOOK || n < (state->size << 1)) {

  000bc	b9404669	 ldr         w9,[x19,#0x44]
  000c0	34000009	 cbz         w9,|$LN16@gz_read|
  000c4	b9402a68	 ldr         w8,[x19,#0x28]
  000c8	6b0806bf	 cmp         w21,w8,lsl #1
  000cc	54000003	 blo         |$LN16@gz_read|

; 342  :             continue;       /* no progress yet -- go back to copy above */
; 343  :             /* the copy above assures that we will leave with space in the
; 344  :                output buffer, allowing at least one gzungetc() to succeed */
; 345  :         }
; 346  : 
; 347  :         /* large len -- read directly into user buffer */
; 348  :         else if (state->how == COPY) {      /* read directly */

  000d0	7100053f	 cmp         w9,#1
  000d4	aa1303e0	 mov         x0,x19
  000d8	54000001	 bne         |$LN18@gz_read|

; 349  :             if (gz_load(state, (unsigned char *)buf, n, &n) == -1)

  000dc	910043e3	 add         x3,sp,#0x10
  000e0	2a1403e2	 mov         w2,w20
  000e4	aa1703e1	 mov         x1,x23
  000e8	94000000	 bl          gz_load
  000ec	3100041f	 cmn         w0,#1
  000f0	54000000	 beq         |$LN27@gz_read|

; 350  :                 return 0;
; 351  :         }

  000f4	b94013f4	 ldr         w20,[sp,#0x10]
  000f8	14000008	 b           |$LN19@gz_read|
  000fc		 |$LN18@gz_read|

; 352  : 
; 353  :         /* large len -- decompress directly into user buffer */
; 354  :         else {  /* state->how == GZIP */
; 355  :             state->strm.avail_out = n;

  000fc	b9009274	 str         w20,[x19,#0x90]

; 356  :             state->strm.next_out = (unsigned char *)buf;

  00100	f9004677	 str         x23,[x19,#0x88]

; 357  :             if (gz_decomp(state) == -1)

  00104	94000000	 bl          gz_decomp
  00108	3100041f	 cmn         w0,#1
  0010c	54000000	 beq         |$LN27@gz_read|

; 358  :                 return 0;
; 359  :             n = state->x.have;

  00110	b9400274	 ldr         w20,[x19]

; 360  :             state->x.have = 0;

  00114	b900027f	 str         wzr,[x19]
  00118		 |$LN19@gz_read|

; 361  :         }
; 362  : 
; 363  :         /* update progress */
; 364  :         len -= n;
; 365  :         buf = (char *)buf + n;
; 366  :         got += n;
; 367  :         state->x.pos += n;

  00118	f9400a68	 ldr         x8,[x19,#0x10]
  0011c	cb3442d6	 sub         x22,x22,w20,uxtw #0
  00120	8b3442f7	 add         x23,x23,w20,uxtw #0
  00124	8b344318	 add         x24,x24,w20,uxtw #0
  00128	8b344109	 add         x9,x8,w20,uxtw #0
  0012c	f9000a69	 str         x9,[x19,#0x10]
  00130	14000005	 b           |$LN2@gz_read|
  00134		 |$LN16@gz_read|

; 339  :             /* get more output, looking for header if required */
; 340  :             if (gz_fetch(state) == -1)

  00134	aa1303e0	 mov         x0,x19
  00138	94000000	 bl          gz_fetch
  0013c	3100041f	 cmn         w0,#1
  00140	54000000	 beq         |$LN27@gz_read|
  00144		 |$LN2@gz_read|

; 368  :     } while (len);

  00144	b4000016	 cbz         x22,|$LN3@gz_read|
  00148	17ffffc1	 b           |$LL4@gz_read|
  0014c		 |$LN24@gz_read|

; 332  :             state->past = 1;        /* tried to read past end */

  0014c	52800028	 mov         w8,#1
  00150	b9005668	 str         w8,[x19,#0x54]
  00154		 |$LN3@gz_read|

; 369  : 
; 370  :     /* return number of bytes read into user buffer */
; 371  :     return got;

  00154	aa1803e0	 mov         x0,x24
  00158	14000002	 b           |$LN1@gz_read|
  0015c		 |$LN27@gz_read|

; 341  :                 return 0;

  0015c	d2800000	 mov         x0,#0
  00160		 |$LN1@gz_read|
  00160	a8c27bfd	 ldp         fp,lr,[sp],#0x20
  00164	f9401bf9	 ldr         x25,[sp,#0x30]
  00168	a94263f7	 ldp         x23,x24,[sp,#0x20]
  0016c	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00170	a8c453f3	 ldp         x19,x20,[sp],#0x40
  00174	d65f03c0	 ret

			 ENDP  ; |gz_read|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzread.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gzread| PROC

; 379  : {

  00000		 |$LN9|
  00000	f81f0ff3	 str         x19,[sp,#-0x10]!
  00004	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00008	910003fd	 mov         fp,sp
  0000c	aa0003f3	 mov         x19,x0

; 380  :     gz_statep state;
; 381  : 
; 382  :     /* get internal structure */
; 383  :     if (file == NULL)

  00010	b4000013	 cbz         x19,|$LN4@gzread|

; 384  :         return -1;
; 385  :     state = (gz_statep)file;
; 386  : 
; 387  :     /* check that we're reading and that there's no (serious) error */
; 388  :     if (state->mode != GZ_READ ||

  00014	b9401a68	 ldr         w8,[x19,#0x18]
  00018	528389e9	 mov         w9,#0x1C4F
  0001c	6b09011f	 cmp         w8,w9
  00020	54000001	 bne         |$LN4@gzread|
  00024	b9406e68	 ldr         w8,[x19,#0x6C]
  00028	34000008	 cbz         w8,|$LN3@gzread|
  0002c	3100151f	 cmn         w8,#5
  00030	54000001	 bne         |$LN4@gzread|
  00034		 |$LN3@gzread|

; 389  :             (state->err != Z_OK && state->err != Z_BUF_ERROR))
; 390  :         return -1;
; 391  : 
; 392  :     /* since an int is returned, make sure len fits in one, otherwise return
; 393  :        with an error (this avoids a flaw in the interface) */
; 394  :     if ((int)len < 0) {

  00034	36f80002	 tbz         x2,#0x1F,|$LN5@gzread|

; 395  :         gz_error(state, Z_STREAM_ERROR, "request does not fit in an int");

  00038	90000008	 adrp        x8,|??_C@_0BP@HLDABFKK@request?5does?5not?5fit?5in?5an?5int@|
  0003c	91000102	 add         x2,x8,PageOffset(|??_C@_0BP@HLDABFKK@request?5does?5not?5fit?5in?5an?5int@|)
  00040	12800021	 mov         w1,#-2
  00044	aa1303e0	 mov         x0,x19
  00048	94000000	 bl          gz_error

; 404  :         return -1;
; 405  : 
; 406  :     /* return the number of bytes read (this is assured to fit in an int) */
; 407  :     return (int)len;
; 408  : }

  0004c	12800000	 mov         w0,#-1
  00050	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00054	f84107f3	 ldr         x19,[sp],#0x10
  00058	d65f03c0	 ret
  0005c		 |$LN5@gzread|

; 396  :         return -1;
; 397  :     }
; 398  : 
; 399  :     /* read len or fewer bytes to buf */
; 400  :     len = gz_read(state, buf, len);

  0005c	7100005f	 cmp         w2,#0
  00060	1a9fa042	 cselge      w2,w2,wzr
  00064	d503229f	 csdb
  00068	d3407c42	 uxtw        x2,w2
  0006c	aa1303e0	 mov         x0,x19
  00070	94000000	 bl          gz_read
  00074	2a0003e0	 mov         w0,w0

; 401  : 
; 402  :     /* check for an error */
; 403  :     if (len == 0 && state->err != Z_OK && state->err != Z_BUF_ERROR)

  00078	35000000	 cbnz        w0,|$LN1@gzread|
  0007c	b9406e68	 ldr         w8,[x19,#0x6C]
  00080	34000008	 cbz         w8,|$LN1@gzread|
  00084	3100151f	 cmn         w8,#5
  00088	54000000	 beq         |$LN1@gzread|
  0008c		 |$LN4@gzread|

; 404  :         return -1;
; 405  : 
; 406  :     /* return the number of bytes read (this is assured to fit in an int) */
; 407  :     return (int)len;
; 408  : }

  0008c	12800000	 mov         w0,#-1
  00090		 |$LN1@gzread|
  00090	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00094	f84107f3	 ldr         x19,[sp],#0x10
  00098	d65f03c0	 ret

			 ENDP  ; |gzread|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzread.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gzfread| PROC

; 416  : {

  00000		 |$LN11|
  00000	f81f0ff3	 str         x19,[sp,#-0x10]!
  00004	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00008	910003fd	 mov         fp,sp
  0000c	aa0103f3	 mov         x19,x1
  00010	aa0203e9	 mov         x9,x2

; 417  :     z_size_t len;
; 418  :     gz_statep state;
; 419  : 
; 420  :     /* get internal structure */
; 421  :     if (file == NULL)

  00014	b4000003	 cbz         x3,|$LN4@gzfread|

; 422  :         return 0;
; 423  :     state = (gz_statep)file;
; 424  : 
; 425  :     /* check that we're reading and that there's no (serious) error */
; 426  :     if (state->mode != GZ_READ ||

  00018	b9401868	 ldr         w8,[x3,#0x18]
  0001c	528389ea	 mov         w10,#0x1C4F
  00020	6b0a011f	 cmp         w8,w10
  00024	54000001	 bne         |$LN4@gzfread|
  00028	b9406c68	 ldr         w8,[x3,#0x6C]
  0002c	34000008	 cbz         w8,|$LN3@gzfread|
  00030	3100151f	 cmn         w8,#5
  00034	54000001	 bne         |$LN4@gzfread|
  00038		 |$LN3@gzfread|

; 427  :             (state->err != Z_OK && state->err != Z_BUF_ERROR))
; 428  :         return 0;
; 429  : 
; 430  :     /* compute bytes to read -- error on overflow */
; 431  :     len = nitems * size;

  00038	9b097e62	 mul         x2,x19,x9

; 432  :     if (size && len / size != nitems) {

  0003c	b4000013	 cbz         x19,|$LN5@gzfread|
  00040	9ad30848	 udiv        x8,x2,x19
  00044	eb09011f	 cmp         x8,x9
  00048	54000000	 beq         |$LN5@gzfread|

; 433  :         gz_error(state, Z_STREAM_ERROR, "request does not fit in a size_t");

  0004c	90000008	 adrp        x8,|??_C@_0CB@EGGJDMIK@request?5does?5not?5fit?5in?5a?5size_@|
  00050	91000102	 add         x2,x8,PageOffset(|??_C@_0CB@EGGJDMIK@request?5does?5not?5fit?5in?5a?5size_@|)
  00054	12800021	 mov         w1,#-2
  00058	aa0303e0	 mov         x0,x3
  0005c	94000000	 bl          gz_error
  00060		 |$LN4@gzfread|

; 439  : }

  00060	d2800000	 mov         x0,#0
  00064	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00068	f84107f3	 ldr         x19,[sp],#0x10
  0006c	d65f03c0	 ret
  00070		 |$LN5@gzfread|

; 434  :         return 0;
; 435  :     }
; 436  : 
; 437  :     /* read len or fewer bytes to buf, return the number of full items read */
; 438  :     return len ? gz_read(state, buf, len) / size : 0;

  00070	b4000002	 cbz         x2,|$LN4@gzfread|
  00074	aa0003e1	 mov         x1,x0
  00078	aa0303e0	 mov         x0,x3
  0007c	94000000	 bl          gz_read
  00080	b5000013	 cbnz        x19,|$LN10@gzfread|
  00084	d43e0080	 brk         #0xF004
  00088		 |$LN10@gzfread|
  00088	9ad30800	 udiv        x0,x0,x19
  0008c	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00090	f84107f3	 ldr         x19,[sp],#0x10
  00094	d65f03c0	 ret

			 ENDP  ; |gzfread|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzread.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gzgetc| PROC

; 449  : {

  00000		 |$LN8|
  00000	a9be7bfd	 stp         fp,lr,[sp,#-0x20]!
  00004	910003fd	 mov         fp,sp
  00008	aa0003eb	 mov         x11,x0

; 450  :     int ret;
; 451  :     unsigned char buf[1];
; 452  :     gz_statep state;
; 453  : 
; 454  :     /* get internal structure */
; 455  :     if (file == NULL)

  0000c	b400000b	 cbz         x11,|$LN4@gzgetc|

; 456  :         return -1;
; 457  :     state = (gz_statep)file;
; 458  : 
; 459  :     /* check that we're reading and that there's no (serious) error */
; 460  :     if (state->mode != GZ_READ ||

  00010	b9401968	 ldr         w8,[x11,#0x18]
  00014	528389e9	 mov         w9,#0x1C4F
  00018	6b09011f	 cmp         w8,w9
  0001c	54000001	 bne         |$LN4@gzgetc|
  00020	b9406d68	 ldr         w8,[x11,#0x6C]
  00024	34000008	 cbz         w8,|$LN3@gzgetc|
  00028	3100151f	 cmn         w8,#5
  0002c	54000001	 bne         |$LN4@gzgetc|
  00030		 |$LN3@gzgetc|

; 463  : 
; 464  :     /* try output buffer (no need to check for skip request) */
; 465  :     if (state->x.have) {

  00030	b9400168	 ldr         w8,[x11]
  00034	34000008	 cbz         w8,|$LN5@gzgetc|

; 466  :         state->x.have--;

  00038	51000508	 sub         w8,w8,#1

; 467  :         state->x.pos++;

  0003c	f9400969	 ldr         x9,[x11,#0x10]
  00040	b9000168	 str         w8,[x11]

; 468  :         return *(state->x.next)++;

  00044	f9400568	 ldr         x8,[x11,#8]
  00048	9100052a	 add         x10,x9,#1
  0004c	f900096a	 str         x10,[x11,#0x10]
  00050	38401500	 ldrb        w0,[x8],#1
  00054	f9000568	 str         x8,[x11,#8]
  00058	a8c27bfd	 ldp         fp,lr,[sp],#0x20
  0005c	d65f03c0	 ret
  00060		 |$LN5@gzgetc|

; 469  :     }
; 470  : 
; 471  :     /* nothing there -- try gz_read() */
; 472  :     ret = gz_read(state, buf, 1);

  00060	d2800022	 mov         x2,#1
  00064	910043e1	 add         x1,sp,#0x10
  00068	aa0b03e0	 mov         x0,x11
  0006c	94000000	 bl          gz_read

; 473  :     return ret < 1 ? -1 : buf[0];

  00070	394043e8	 ldrb        w8,[sp,#0x10]
  00074	1280000b	 mov         w11,#-1
  00078	7100041f	 cmp         w0,#1
  0007c	1a88b160	 csellt      w0,w11,w8
  00080	a8c27bfd	 ldp         fp,lr,[sp],#0x20
  00084	d65f03c0	 ret
  00088		 |$LN4@gzgetc|

; 461  :         (state->err != Z_OK && state->err != Z_BUF_ERROR))
; 462  :         return -1;

  00088	12800000	 mov         w0,#-1
  0008c	a8c27bfd	 ldp         fp,lr,[sp],#0x20
  00090	d65f03c0	 ret

			 ENDP  ; |gzgetc|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzread.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gzgetc_| PROC

; 479  :     return gzgetc(file);

  00000	14000000	 b           gzgetc

			 ENDP  ; |gzgetc_|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzread.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gzungetc| PROC

; 486  : {

  00000		 |$LN19|
  00000	a9bf53f3	 stp         x19,x20,[sp,#-0x10]!
  00004	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00008	910003fd	 mov         fp,sp
  0000c	2a0003f4	 mov         w20,w0
  00010	aa0103f3	 mov         x19,x1

; 487  :     gz_statep state;
; 488  : 
; 489  :     /* get internal structure */
; 490  :     if (file == NULL)

  00014	b4000013	 cbz         x19,|$LN6@gzungetc|

; 491  :         return -1;
; 492  :     state = (gz_statep)file;
; 493  : 
; 494  :     /* check that we're reading and that there's no (serious) error */
; 495  :     if (state->mode != GZ_READ ||

  00018	b9401a68	 ldr         w8,[x19,#0x18]
  0001c	528389e9	 mov         w9,#0x1C4F
  00020	6b09011f	 cmp         w8,w9
  00024	54000001	 bne         |$LN6@gzungetc|
  00028	b9406e68	 ldr         w8,[x19,#0x6C]
  0002c	34000008	 cbz         w8,|$LN5@gzungetc|
  00030	3100151f	 cmn         w8,#5
  00034	54000001	 bne         |$LN6@gzungetc|
  00038		 |$LN5@gzungetc|

; 496  :         (state->err != Z_OK && state->err != Z_BUF_ERROR))
; 497  :         return -1;
; 498  : 
; 499  :     /* process a skip request */
; 500  :     if (state->seek) {

  00038	b9406a68	 ldr         w8,[x19,#0x68]
  0003c	34000008	 cbz         w8,|$LN8@gzungetc|

; 501  :         state->seek = 0;
; 502  :         if (gz_skip(state, state->skip) == -1)

  00040	f9403261	 ldr         x1,[x19,#0x60]
  00044	aa1303e0	 mov         x0,x19
  00048	b9006a7f	 str         wzr,[x19,#0x68]
  0004c	94000000	 bl          gz_skip
  00050	3100041f	 cmn         w0,#1
  00054	54000000	 beq         |$LN6@gzungetc|
  00058		 |$LN8@gzungetc|

; 503  :             return -1;
; 504  :     }
; 505  : 
; 506  :     /* can't push EOF */
; 507  :     if (c < 0)

  00058	37f80014	 tbnz        x20,#0x1F,|$LN6@gzungetc|

; 508  :         return -1;
; 509  : 
; 510  :     /* if output buffer empty, put byte at end (allows more pushing) */
; 511  :     if (state->x.have == 0) {

  0005c	7100029f	 cmp         w20,#0
  00060	1a9fa294	 cselge      w20,w20,wzr
  00064	d503229f	 csdb
  00068	b9402a69	 ldr         w9,[x19,#0x28]
  0006c	b9400268	 ldr         w8,[x19]
  00070	531f7929	 lsl         w9,w9,#1
  00074	35000008	 cbnz        w8,|$LN10@gzungetc|

; 512  :         state->x.have = 1;
; 513  :         state->x.next = state->out + (state->size << 1) - 1;

  00078	f9401e68	 ldr         x8,[x19,#0x38]
  0007c	5280002a	 mov         w10,#1
  00080	b900026a	 str         w10,[x19]

; 514  :         state->x.next[0] = (unsigned char)c;
; 515  :         state->x.pos--;
; 516  :         state->past = 0;
; 517  :         return c;

  00084	2a1403e0	 mov         w0,w20
  00088	8b294109	 add         x9,x8,w9,uxtw #0
  0008c	d100052a	 sub         x10,x9,#1
  00090	f900066a	 str         x10,[x19,#8]
  00094	39000154	 strb        w20,[x10]
  00098	f9400a68	 ldr         x8,[x19,#0x10]
  0009c	b900567f	 str         wzr,[x19,#0x54]
  000a0	d1000509	 sub         x9,x8,#1
  000a4	f9000a69	 str         x9,[x19,#0x10]
  000a8	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000ac	a8c153f3	 ldp         x19,x20,[sp],#0x10
  000b0	d65f03c0	 ret
  000b4		 |$LN10@gzungetc|

; 518  :     }
; 519  : 
; 520  :     /* if no room, give up (must have already done a gzungetc()) */
; 521  :     if (state->x.have == (state->size << 1)) {

  000b4	6b09011f	 cmp         w8,w9
  000b8	54000001	 bne         |$LN11@gzungetc|

; 522  :         gz_error(state, Z_DATA_ERROR, "out of room to push characters");

  000bc	9000000a	 adrp        x10,|??_C@_0BP@IIKIGMCC@out?5of?5room?5to?5push?5characters@|
  000c0	91000142	 add         x2,x10,PageOffset(|??_C@_0BP@IIKIGMCC@out?5of?5room?5to?5push?5characters@|)
  000c4	12800041	 mov         w1,#-3
  000c8	aa1303e0	 mov         x0,x19
  000cc	94000000	 bl          gz_error
  000d0		 |$LN6@gzungetc|

; 540  : }

  000d0	12800000	 mov         w0,#-1
  000d4	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  000d8	a8c153f3	 ldp         x19,x20,[sp],#0x10
  000dc	d65f03c0	 ret
  000e0		 |$LN11@gzungetc|

; 523  :         return -1;
; 524  :     }
; 525  : 
; 526  :     /* slide output data if needed and insert byte before existing data */
; 527  :     if (state->x.next == state->out) {

  000e0	f9401e6c	 ldr         x12,[x19,#0x38]
  000e4	f940066b	 ldr         x11,[x19,#8]
  000e8	eb0c017f	 cmp         x11,x12
  000ec	54000001	 bne         |$LN12@gzungetc|

; 528  :         unsigned char *src = state->out + state->x.have;

  000f0	8b28418a	 add         x10,x12,w8,uxtw #0

; 529  :         unsigned char *dest = state->out + (state->size << 1);

  000f4	8b29418b	 add         x11,x12,w9,uxtw #0

; 530  :         while (src > state->out)

  000f8	eb0c015f	 cmp         x10,x12
  000fc	54000009	 bls         |$LN12@gzungetc|
  00100		 |$LL2@gzungetc|

; 531  :             *--dest = *--src;

  00100	385ffd48	 ldrb        w8,[x10,#-1]!
  00104	381ffd68	 strb        w8,[x11,#-1]!
  00108	f9401e69	 ldr         x9,[x19,#0x38]
  0010c	eb09015f	 cmp         x10,x9
  00110	54000008	 bhi         |$LL2@gzungetc|
  00114	b9400268	 ldr         w8,[x19]
  00118		 |$LN12@gzungetc|

; 532  :         state->x.next = dest;
; 533  :     }
; 534  :     state->x.have++;
; 535  :     state->x.next--;

  00118	d1000569	 sub         x9,x11,#1
  0011c	11000508	 add         w8,w8,#1
  00120	f9000669	 str         x9,[x19,#8]
  00124	b9000268	 str         w8,[x19]

; 536  :     state->x.next[0] = (unsigned char)c;
; 537  :     state->x.pos--;
; 538  :     state->past = 0;
; 539  :     return c;

  00128	2a1403e0	 mov         w0,w20
  0012c	39000134	 strb        w20,[x9]
  00130	f9400a68	 ldr         x8,[x19,#0x10]
  00134	b900567f	 str         wzr,[x19,#0x54]
  00138	d1000509	 sub         x9,x8,#1
  0013c	f9000a69	 str         x9,[x19,#0x10]
  00140	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00144	a8c153f3	 ldp         x19,x20,[sp],#0x10
  00148	d65f03c0	 ret

			 ENDP  ; |gzungetc|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzread.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gzgets| PROC

; 547  : {

  00000		 |$LN27|
  00000	a9bc53f3	 stp         x19,x20,[sp,#-0x40]!
  00004	a9015bf5	 stp         x21,x22,[sp,#0x10]
  00008	a90263f7	 stp         x23,x24,[sp,#0x20]
  0000c	f9001bf9	 str         x25,[sp,#0x30]
  00010	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00014	910003fd	 mov         fp,sp
  00018	aa0003f3	 mov         x19,x0
  0001c	aa0103f7	 mov         x23,x1
  00020	2a0203f4	 mov         w20,w2

; 548  :     unsigned left, n;
; 549  :     char *str;
; 550  :     unsigned char *eol;
; 551  :     gz_statep state;
; 552  : 
; 553  :     /* check parameters and get internal structure */
; 554  :     if (file == NULL || buf == NULL || len < 1)

  00024	b4000013	 cbz         x19,|$LN6@gzgets|
  00028	f10002ff	 cmp         x23,#0
  0002c	7a411a8a	 ccmpne      w20,#1,#0xA
  00030	5400000b	 blt         |$LN6@gzgets|

; 556  :     state = (gz_statep)file;
; 557  : 
; 558  :     /* check that we're reading and that there's no (serious) error */
; 559  :     if (state->mode != GZ_READ ||

  00034	b9401a68	 ldr         w8,[x19,#0x18]
  00038	528389e9	 mov         w9,#0x1C4F
  0003c	6b09011f	 cmp         w8,w9
  00040	54000001	 bne         |$LN6@gzgets|
  00044	b9406e68	 ldr         w8,[x19,#0x6C]
  00048	34000008	 cbz         w8,|$LN7@gzgets|
  0004c	3100151f	 cmn         w8,#5
  00050	54000001	 bne         |$LN6@gzgets|
  00054		 |$LN7@gzgets|

; 560  :         (state->err != Z_OK && state->err != Z_BUF_ERROR))
; 561  :         return NULL;
; 562  : 
; 563  :     /* process a skip request */
; 564  :     if (state->seek) {

  00054	b9406a68	 ldr         w8,[x19,#0x68]
  00058	34000008	 cbz         w8,|$LN10@gzgets|

; 565  :         state->seek = 0;
; 566  :         if (gz_skip(state, state->skip) == -1)

  0005c	f9403261	 ldr         x1,[x19,#0x60]
  00060	aa1303e0	 mov         x0,x19
  00064	b9006a7f	 str         wzr,[x19,#0x68]
  00068	94000000	 bl          gz_skip
  0006c	3100041f	 cmn         w0,#1
  00070	54000000	 beq         |$LN6@gzgets|
  00074		 |$LN10@gzgets|

; 567  :             return NULL;
; 568  :     }
; 569  : 
; 570  :     /* copy output bytes up to new line or len - 1, whichever comes first --
; 571  :        append a terminating zero to the string (we don't check for a zero in
; 572  :        the contents, let the user worry about that) */
; 573  :     str = buf;

  00074	aa1703f9	 mov         x25,x23

; 574  :     left = (unsigned)len - 1;

  00078	51000698	 sub         w24,w20,#1

; 575  :     if (left) do {

  0007c	34000018	 cbz         w24,|$LN6@gzgets|
  00080	b940026b	 ldr         w11,[x19]
  00084		 |$LL4@gzgets|

; 576  :         /* assure that something is in the output buffer */
; 577  :         if (state->x.have == 0 && gz_fetch(state) == -1)

  00084	3500000b	 cbnz        w11,|$LN12@gzgets|
  00088	aa1303e0	 mov         x0,x19
  0008c	94000000	 bl          gz_fetch
  00090	3100041f	 cmn         w0,#1
  00094	54000000	 beq         |$LN6@gzgets|
  00098		 |$LN12@gzgets|

; 578  :             return NULL;                /* error */
; 579  :         if (state->x.have == 0) {       /* end of file */

  00098	b9400268	 ldr         w8,[x19]
  0009c	34000008	 cbz         w8,|$LN22@gzgets|

; 581  :             break;                      /* return what we have */
; 582  :         }
; 583  : 
; 584  :         /* look for end-of-line in current output buffer */
; 585  :         n = state->x.have > left ? left : state->x.have;
; 586  :         eol = (unsigned char *)memchr(state->x.next, '\n', n);

  000a0	f9400676	 ldr         x22,[x19,#8]
  000a4	6b18011f	 cmp         w8,w24
  000a8	1a989115	 csells      w21,w8,w24
  000ac	aa1503e2	 mov         x2,x21
  000b0	52800141	 mov         w1,#0xA
  000b4	aa1603e0	 mov         x0,x22
  000b8	94000000	 bl          memchr
  000bc	aa0003f4	 mov         x20,x0

; 587  :         if (eol != NULL)

  000c0	b4000014	 cbz         x20,|$LN14@gzgets|

; 588  :             n = (unsigned)(eol - state->x.next) + 1;

  000c4	4b160289	 sub         w9,w20,w22
  000c8	11000535	 add         w21,w9,#1
  000cc		 |$LN14@gzgets|

; 589  : 
; 590  :         /* copy through end-of-line, or remainder if not found */
; 591  :         memcpy(buf, state->x.next, n);

  000cc	d3407ea2	 uxtw        x2,w21
  000d0	aa1603e1	 mov         x1,x22
  000d4	aa1703e0	 mov         x0,x23
  000d8	94000000	 bl          memcpy

; 592  :         state->x.have -= n;

  000dc	b9400268	 ldr         w8,[x19]

; 593  :         state->x.next += n;
; 594  :         state->x.pos += n;
; 595  :         left -= n;

  000e0	4b150318	 sub         w24,w24,w21
  000e4	f9400a6a	 ldr         x10,[x19,#0x10]

; 596  :         buf += n;

  000e8	8b3542f7	 add         x23,x23,w21,uxtw #0
  000ec	4b15010b	 sub         w11,w8,w21
  000f0	f9400668	 ldr         x8,[x19,#8]
  000f4	b900026b	 str         w11,[x19]
  000f8	8b354109	 add         x9,x8,w21,uxtw #0
  000fc	8b354148	 add         x8,x10,w21,uxtw #0
  00100	a900a269	 stp         x9,x8,[x19,#8]

; 597  :     } while (left && eol == NULL);

  00104	34000018	 cbz         w24,|$LN3@gzgets|
  00108	b5000014	 cbnz        x20,|$LN3@gzgets|
  0010c	17ffffde	 b           |$LL4@gzgets|
  00110		 |$LN22@gzgets|

; 580  :             state->past = 1;            /* read past end */

  00110	52800028	 mov         w8,#1
  00114	b9005668	 str         w8,[x19,#0x54]
  00118		 |$LN3@gzgets|

; 598  : 
; 599  :     /* return terminated string, or if nothing, end of file */
; 600  :     if (buf == str)

  00118	eb1902ff	 cmp         x23,x25
  0011c	54000000	 beq         |$LN6@gzgets|

; 601  :         return NULL;
; 602  :     buf[0] = 0;

  00120	390002ff	 strb        wzr,[x23]

; 603  :     return str;

  00124	aa1903e0	 mov         x0,x25
  00128	14000002	 b           |$LN1@gzgets|
  0012c		 |$LN6@gzgets|

; 555  :         return NULL;

  0012c	d2800000	 mov         x0,#0
  00130		 |$LN1@gzgets|
  00130	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00134	f9401bf9	 ldr         x25,[sp,#0x30]
  00138	a94263f7	 ldp         x23,x24,[sp,#0x20]
  0013c	a9415bf5	 ldp         x21,x22,[sp,#0x10]
  00140	a8c453f3	 ldp         x19,x20,[sp],#0x40
  00144	d65f03c0	 ret

			 ENDP  ; |gzgets|

; Function compile flags: /Ogtp
; File C:\Users\ws103\Desktop\zlib-1.2.11\gzread.c

	AREA	|.text$mn|, CODE, ARM64

  00000		 |gzdirect| PROC

; 609  : {

  00000		 |$LN6|
  00000	f81f0ff3	 str         x19,[sp,#-0x10]!
  00004	a9bf7bfd	 stp         fp,lr,[sp,#-0x10]!
  00008	910003fd	 mov         fp,sp
  0000c	aa0003f3	 mov         x19,x0

; 610  :     gz_statep state;
; 611  : 
; 612  :     /* get internal structure */
; 613  :     if (file == NULL)

  00010	b5000013	 cbnz        x19,|$LN2@gzdirect|

; 614  :         return 0;

  00014	52800000	 mov         w0,#0
  00018	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  0001c	f84107f3	 ldr         x19,[sp],#0x10
  00020	d65f03c0	 ret
  00024		 |$LN2@gzdirect|

; 615  :     state = (gz_statep)file;
; 616  : 
; 617  :     /* if the state is not known, but we can find out, then do so (this is
; 618  :        mainly for right after a gzopen() or gzdopen()) */
; 619  :     if (state->mode == GZ_READ && state->how == LOOK && state->x.have == 0)

  00024	b9401a68	 ldr         w8,[x19,#0x18]
  00028	528389e9	 mov         w9,#0x1C4F
  0002c	6b09011f	 cmp         w8,w9
  00030	54000001	 bne         |$LN3@gzdirect|
  00034	b9404668	 ldr         w8,[x19,#0x44]
  00038	35000008	 cbnz        w8,|$LN3@gzdirect|
  0003c	b9400268	 ldr         w8,[x19]
  00040	35000008	 cbnz        w8,|$LN3@gzdirect|

; 620  :         (void)gz_look(state);

  00044	aa1303e0	 mov         x0,x19
  00048	94000000	 bl          gz_look
  0004c		 |$LN3@gzdirect|

; 621  : 
; 622  :     /* return 1 if transparent, 0 if processing a gzip stream */
; 623  :     return state->direct;

  0004c	b9404260	 ldr         w0,[x19,#0x40]
  00050	a8c17bfd	 ldp         fp,lr,[sp],#0x10
  00054	f84107f3	 ldr         x19,[sp],#0x10
  00058	d65f03c0	 ret

			 ENDP  ; |gzdirect|

	END
